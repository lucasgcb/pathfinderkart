
FREERTOS_PERIPHERAL_CONTROL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ac14  00080000  00080000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008ac14  0008ac14  0001ac14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c58  20070000  0008ac1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00004d34  20070c58  0008b874  00020c58  2**2
                  ALLOC
  4 .stack        00002004  2007598c  000905a8  00020c58  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c58  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c81  2**0
                  CONTENTS, READONLY
  7 .debug_info   00035467  00000000  00000000  00020cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000705b  00000000  00000000  00056141  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000fce5  00000000  00000000  0005d19c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000015d0  00000000  00000000  0006ce81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001878  00000000  00000000  0006e451  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023349  00000000  00000000  0006fcc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00021f72  00000000  00000000  00093012  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007dc17  00000000  00000000  000b4f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004228  00000000  00000000  00132b9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	90 79 07 20 f1 34 08 00 ed 34 08 00 ed 34 08 00     .y. .4...4...4..
   80010:	ed 34 08 00 ed 34 08 00 ed 34 08 00 00 00 00 00     .4...4...4......
	...
   8002c:	91 3a 08 00 ed 34 08 00 00 00 00 00 31 3b 08 00     .:...4......1;..
   8003c:	75 3b 08 00 ed 34 08 00 ed 34 08 00 ed 34 08 00     u;...4...4...4..
   8004c:	ed 34 08 00 ed 34 08 00 ed 34 08 00 ed 34 08 00     .4...4...4...4..
   8005c:	ed 34 08 00 01 08 08 00 ed 34 08 00 00 00 00 00     .4.......4......
   8006c:	6d 1f 08 00 81 1f 08 00 95 1f 08 00 a9 1f 08 00     m...............
	...
   80084:	5d 0f 08 00 6d 0f 08 00 7d 0f 08 00 8d 0f 08 00     ]...m...}.......
   80094:	ed 34 08 00 f5 06 08 00 05 07 08 00 ed 34 08 00     .4...........4..
   800a4:	00 00 00 00 ed 34 08 00 ed 34 08 00 ed 34 08 00     .....4...4...4..
   800b4:	ed 34 08 00 ed 34 08 00 ed 34 08 00 ed 34 08 00     .4...4...4...4..
   800c4:	ed 34 08 00 ed 34 08 00 ed 34 08 00 ed 34 08 00     .4...4...4...4..
   800d4:	ad 59 08 00 ed 34 08 00 ed 34 08 00 95 26 08 00     .Y...4...4...&..
   800e4:	ed 34 08 00 ed 34 08 00 ed 34 08 00 ed 34 08 00     .4...4...4...4..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c58 	.word	0x20070c58
   80110:	00000000 	.word	0x00000000
   80114:	0008ac1c 	.word	0x0008ac1c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008ac1c 	.word	0x0008ac1c
   80154:	20070c5c 	.word	0x20070c5c
   80158:	0008ac1c 	.word	0x0008ac1c
   8015c:	00000000 	.word	0x00000000

00080160 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80160:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80162:	480e      	ldr	r0, [pc, #56]	; (8019c <sysclk_init+0x3c>)
   80164:	4b0e      	ldr	r3, [pc, #56]	; (801a0 <sysclk_init+0x40>)
   80166:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80168:	213e      	movs	r1, #62	; 0x3e
   8016a:	2000      	movs	r0, #0
   8016c:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x44>)
   8016e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80170:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x48>)
   80172:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80174:	2800      	cmp	r0, #0
   80176:	d0fc      	beq.n	80172 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80178:	4b0c      	ldr	r3, [pc, #48]	; (801ac <sysclk_init+0x4c>)
   8017a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8017c:	4a0c      	ldr	r2, [pc, #48]	; (801b0 <sysclk_init+0x50>)
   8017e:	4b0d      	ldr	r3, [pc, #52]	; (801b4 <sysclk_init+0x54>)
   80180:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80182:	4c0d      	ldr	r4, [pc, #52]	; (801b8 <sysclk_init+0x58>)
   80184:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80186:	2800      	cmp	r0, #0
   80188:	d0fc      	beq.n	80184 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8018a:	2010      	movs	r0, #16
   8018c:	4b0b      	ldr	r3, [pc, #44]	; (801bc <sysclk_init+0x5c>)
   8018e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80190:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <sysclk_init+0x60>)
   80192:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80194:	4801      	ldr	r0, [pc, #4]	; (8019c <sysclk_init+0x3c>)
   80196:	4b02      	ldr	r3, [pc, #8]	; (801a0 <sysclk_init+0x40>)
   80198:	4798      	blx	r3
   8019a:	bd10      	pop	{r4, pc}
   8019c:	0501bd00 	.word	0x0501bd00
   801a0:	200700a5 	.word	0x200700a5
   801a4:	00082021 	.word	0x00082021
   801a8:	00082075 	.word	0x00082075
   801ac:	00082085 	.word	0x00082085
   801b0:	200d3f01 	.word	0x200d3f01
   801b4:	400e0600 	.word	0x400e0600
   801b8:	00082095 	.word	0x00082095
   801bc:	00081fbd 	.word	0x00081fbd
   801c0:	00083589 	.word	0x00083589

000801c4 <get_pdc_peripheral_details>:
 * peripheral that has the start address specified by peripheral_to_find.
 */
portBASE_TYPE get_pdc_peripheral_details(
		const freertos_pdc_peripheral_parameters_t peripheral_array[],
		size_t array_size, void *peripheral_to_find)
{
   801c4:	b410      	push	{r4}
	size_t x;

	for (x = 0; x < array_size; x++) {
   801c6:	460c      	mov	r4, r1
   801c8:	b169      	cbz	r1, 801e6 <get_pdc_peripheral_details+0x22>
		if (peripheral_array[x].peripheral_base_address ==
   801ca:	6803      	ldr	r3, [r0, #0]
   801cc:	429a      	cmp	r2, r3
   801ce:	d00c      	beq.n	801ea <get_pdc_peripheral_details+0x26>
   801d0:	4603      	mov	r3, r0
   801d2:	2000      	movs	r0, #0
	for (x = 0; x < array_size; x++) {
   801d4:	3001      	adds	r0, #1
   801d6:	4284      	cmp	r4, r0
   801d8:	d003      	beq.n	801e2 <get_pdc_peripheral_details+0x1e>
		if (peripheral_array[x].peripheral_base_address ==
   801da:	f853 1f10 	ldr.w	r1, [r3, #16]!
   801de:	4291      	cmp	r1, r2
   801e0:	d1f8      	bne.n	801d4 <get_pdc_peripheral_details+0x10>
			break;
		}
	}

	return x;
}
   801e2:	bc10      	pop	{r4}
   801e4:	4770      	bx	lr
	for (x = 0; x < array_size; x++) {
   801e6:	4608      	mov	r0, r1
   801e8:	e7fb      	b.n	801e2 <get_pdc_peripheral_details+0x1e>
   801ea:	2000      	movs	r0, #0
   801ec:	e7f9      	b.n	801e2 <get_pdc_peripheral_details+0x1e>

000801ee <check_requested_operating_mode>:
		portBASE_TYPE num_valid_operating_modes)
{
	bool return_value = false;
	portBASE_TYPE index_position;

	for (index_position = 0; index_position < num_valid_operating_modes;
   801ee:	2a00      	cmp	r2, #0
   801f0:	dd10      	ble.n	80214 <check_requested_operating_mode+0x26>
			index_position++) {
		if (requested_operation_mode ==
   801f2:	780b      	ldrb	r3, [r1, #0]
   801f4:	4283      	cmp	r3, r0
   801f6:	d00f      	beq.n	80218 <check_requested_operating_mode+0x2a>
   801f8:	1c4b      	adds	r3, r1, #1
   801fa:	4411      	add	r1, r2
	for (index_position = 0; index_position < num_valid_operating_modes;
   801fc:	428b      	cmp	r3, r1
   801fe:	d00f      	beq.n	80220 <check_requested_operating_mode+0x32>
{
   80200:	b410      	push	{r4}
				valid_operating_modes[index_position]) {
   80202:	f813 4b01 	ldrb.w	r4, [r3], #1
		if (requested_operation_mode ==
   80206:	4284      	cmp	r4, r0
   80208:	d008      	beq.n	8021c <check_requested_operating_mode+0x2e>
	for (index_position = 0; index_position < num_valid_operating_modes;
   8020a:	428b      	cmp	r3, r1
   8020c:	d1f9      	bne.n	80202 <check_requested_operating_mode+0x14>
	bool return_value = false;
   8020e:	2000      	movs	r0, #0
			break;
		}
	}

	return return_value;
}
   80210:	bc10      	pop	{r4}
   80212:	4770      	bx	lr
	bool return_value = false;
   80214:	2000      	movs	r0, #0
   80216:	4770      	bx	lr
			return_value = true;
   80218:	2001      	movs	r0, #1
   8021a:	4770      	bx	lr
   8021c:	2001      	movs	r0, #1
   8021e:	e7f7      	b.n	80210 <check_requested_operating_mode+0x22>
	bool return_value = false;
   80220:	2000      	movs	r0, #0
}
   80222:	4770      	bx	lr

00080224 <create_peripheral_control_semaphores>:
 * with the bits set in the options_flags value.
 */
void create_peripheral_control_semaphores(const uint8_t options_flags,
		freertos_dma_event_control_t *tx_dma_control,
		freertos_dma_event_control_t *rx_dma_control)
{
   80224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80226:	4604      	mov	r4, r0
   80228:	460d      	mov	r5, r1
   8022a:	4616      	mov	r6, r2
	/* If the tx driver is to be thread aware then create an access control
	semaphore.  An Rx access mutex is not created in this function as half duplex
	peripherals need only use a single access mutex, and the Tx semaphore is used
	for the purpose.  Full duplex peripherals have extra configuration steps
	that are performed separately. */
	if ((options_flags & USE_TX_ACCESS_SEM) != 0) {
   8022c:	f010 0f01 	tst.w	r0, #1
   80230:	d11e      	bne.n	80270 <create_peripheral_control_semaphores+0x4c>
		xSemaphoreGive(tx_dma_control->peripheral_access_sem);
	}

	/* If the transmit function is only going to return once the transmit is
	complete then create an internal notification semaphore. */
	if ((options_flags & WAIT_TX_COMPLETE) != 0) {
   80232:	f014 0f04 	tst.w	r4, #4
   80236:	d135      	bne.n	802a4 <create_peripheral_control_semaphores+0x80>
		available (it has only just been created). */
		xSemaphoreTake(
				tx_dma_control->transaction_complete_notification_semaphore,
				0);
	} else {
		tx_dma_control->transaction_complete_notification_semaphore = NULL;
   80238:	2300      	movs	r3, #0
   8023a:	602b      	str	r3, [r5, #0]
	}

	/* If the receive function is only going to return once the receive
	is complete then create an internal notification semaphore. */
	if (((options_flags & WAIT_RX_COMPLETE) != 0) &&
   8023c:	f014 0f08 	tst.w	r4, #8
   80240:	d04d      	beq.n	802de <create_peripheral_control_semaphores+0xba>
   80242:	2e00      	cmp	r6, #0
   80244:	d04b      	beq.n	802de <create_peripheral_control_semaphores+0xba>
			(rx_dma_control != NULL)) {
		vSemaphoreCreateBinary(
   80246:	2203      	movs	r2, #3
   80248:	2100      	movs	r1, #0
   8024a:	2001      	movs	r0, #1
   8024c:	4b25      	ldr	r3, [pc, #148]	; (802e4 <create_peripheral_control_semaphores+0xc0>)
   8024e:	4798      	blx	r3
   80250:	6030      	str	r0, [r6, #0]
   80252:	2800      	cmp	r0, #0
   80254:	d03e      	beq.n	802d4 <create_peripheral_control_semaphores+0xb0>
   80256:	2300      	movs	r3, #0
   80258:	461a      	mov	r2, r3
   8025a:	4619      	mov	r1, r3
   8025c:	4c22      	ldr	r4, [pc, #136]	; (802e8 <create_peripheral_control_semaphores+0xc4>)
   8025e:	47a0      	blx	r4
				rx_dma_control->transaction_complete_notification_semaphore);
		configASSERT(
   80260:	6833      	ldr	r3, [r6, #0]
   80262:	2b00      	cmp	r3, #0
   80264:	d036      	beq.n	802d4 <create_peripheral_control_semaphores+0xb0>
				rx_dma_control->transaction_complete_notification_semaphore);

		/* Ensure the semaphore starts in the expected state.  A block time
		of zero can be used here as the semaphore is guaranteed to be
		available (it has only just been created. */
		xSemaphoreTake(
   80266:	2100      	movs	r1, #0
   80268:	6830      	ldr	r0, [r6, #0]
   8026a:	4b20      	ldr	r3, [pc, #128]	; (802ec <create_peripheral_control_semaphores+0xc8>)
   8026c:	4798      	blx	r3
   8026e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vSemaphoreCreateBinary(
   80270:	2203      	movs	r2, #3
   80272:	2100      	movs	r1, #0
   80274:	2001      	movs	r0, #1
   80276:	4b1b      	ldr	r3, [pc, #108]	; (802e4 <create_peripheral_control_semaphores+0xc0>)
   80278:	4798      	blx	r3
   8027a:	6068      	str	r0, [r5, #4]
   8027c:	b168      	cbz	r0, 8029a <create_peripheral_control_semaphores+0x76>
   8027e:	2300      	movs	r3, #0
   80280:	461a      	mov	r2, r3
   80282:	4619      	mov	r1, r3
   80284:	4f18      	ldr	r7, [pc, #96]	; (802e8 <create_peripheral_control_semaphores+0xc4>)
   80286:	47b8      	blx	r7
		configASSERT(tx_dma_control->peripheral_access_sem);
   80288:	686b      	ldr	r3, [r5, #4]
   8028a:	b133      	cbz	r3, 8029a <create_peripheral_control_semaphores+0x76>
		xSemaphoreGive(tx_dma_control->peripheral_access_sem);
   8028c:	2300      	movs	r3, #0
   8028e:	461a      	mov	r2, r3
   80290:	4619      	mov	r1, r3
   80292:	6868      	ldr	r0, [r5, #4]
   80294:	4f14      	ldr	r7, [pc, #80]	; (802e8 <create_peripheral_control_semaphores+0xc4>)
   80296:	47b8      	blx	r7
   80298:	e7cb      	b.n	80232 <create_peripheral_control_semaphores+0xe>
		configASSERT(tx_dma_control->peripheral_access_sem);
   8029a:	2171      	movs	r1, #113	; 0x71
   8029c:	4814      	ldr	r0, [pc, #80]	; (802f0 <create_peripheral_control_semaphores+0xcc>)
   8029e:	4b15      	ldr	r3, [pc, #84]	; (802f4 <create_peripheral_control_semaphores+0xd0>)
   802a0:	4798      	blx	r3
   802a2:	e7f3      	b.n	8028c <create_peripheral_control_semaphores+0x68>
		vSemaphoreCreateBinary(
   802a4:	2203      	movs	r2, #3
   802a6:	2100      	movs	r1, #0
   802a8:	2001      	movs	r0, #1
   802aa:	4b0e      	ldr	r3, [pc, #56]	; (802e4 <create_peripheral_control_semaphores+0xc0>)
   802ac:	4798      	blx	r3
   802ae:	6028      	str	r0, [r5, #0]
   802b0:	b158      	cbz	r0, 802ca <create_peripheral_control_semaphores+0xa6>
   802b2:	2300      	movs	r3, #0
   802b4:	461a      	mov	r2, r3
   802b6:	4619      	mov	r1, r3
   802b8:	4f0b      	ldr	r7, [pc, #44]	; (802e8 <create_peripheral_control_semaphores+0xc4>)
   802ba:	47b8      	blx	r7
		configASSERT(
   802bc:	682b      	ldr	r3, [r5, #0]
   802be:	b123      	cbz	r3, 802ca <create_peripheral_control_semaphores+0xa6>
		xSemaphoreTake(
   802c0:	2100      	movs	r1, #0
   802c2:	6828      	ldr	r0, [r5, #0]
   802c4:	4b09      	ldr	r3, [pc, #36]	; (802ec <create_peripheral_control_semaphores+0xc8>)
   802c6:	4798      	blx	r3
   802c8:	e7b8      	b.n	8023c <create_peripheral_control_semaphores+0x18>
		configASSERT(
   802ca:	217d      	movs	r1, #125	; 0x7d
   802cc:	4808      	ldr	r0, [pc, #32]	; (802f0 <create_peripheral_control_semaphores+0xcc>)
   802ce:	4b09      	ldr	r3, [pc, #36]	; (802f4 <create_peripheral_control_semaphores+0xd0>)
   802d0:	4798      	blx	r3
   802d2:	e7f5      	b.n	802c0 <create_peripheral_control_semaphores+0x9c>
		configASSERT(
   802d4:	2190      	movs	r1, #144	; 0x90
   802d6:	4806      	ldr	r0, [pc, #24]	; (802f0 <create_peripheral_control_semaphores+0xcc>)
   802d8:	4b06      	ldr	r3, [pc, #24]	; (802f4 <create_peripheral_control_semaphores+0xd0>)
   802da:	4798      	blx	r3
   802dc:	e7c3      	b.n	80266 <create_peripheral_control_semaphores+0x42>
				rx_dma_control->transaction_complete_notification_semaphore,
				0);
	} else {
		rx_dma_control->transaction_complete_notification_semaphore = NULL;
   802de:	2300      	movs	r3, #0
   802e0:	6033      	str	r3, [r6, #0]
   802e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   802e4:	00083f89 	.word	0x00083f89
   802e8:	00084021 	.word	0x00084021
   802ec:	00084501 	.word	0x00084501
   802f0:	0008a564 	.word	0x0008a564
   802f4:	00085a0d 	.word	0x00085a0d

000802f8 <configure_interrupt_controller>:
 * Configure the NVIC to enable, and set the priority of, the interrupt
 * specified by peripheral_irq.
 */
void configure_interrupt_controller(const enum IRQn peripheral_irq,
		uint32_t interrupt_priority)
{
   802f8:	b538      	push	{r3, r4, r5, lr}
   802fa:	4605      	mov	r5, r0
   802fc:	460c      	mov	r4, r1
	configASSERT(interrupt_priority <=
   802fe:	290f      	cmp	r1, #15
   80300:	d815      	bhi.n	8032e <configure_interrupt_controller+0x36>
            configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
	configASSERT(interrupt_priority >=
   80302:	2c09      	cmp	r4, #9
   80304:	d918      	bls.n	80338 <configure_interrupt_controller+0x40>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   80306:	2d00      	cmp	r5, #0
   80308:	db1b      	blt.n	80342 <configure_interrupt_controller+0x4a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8030a:	0969      	lsrs	r1, r5, #5
   8030c:	f005 021f 	and.w	r2, r5, #31
   80310:	2301      	movs	r3, #1
   80312:	4093      	lsls	r3, r2
   80314:	4a0e      	ldr	r2, [pc, #56]	; (80350 <configure_interrupt_controller+0x58>)
   80316:	f101 0060 	add.w	r0, r1, #96	; 0x60
   8031a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8031e:	0124      	lsls	r4, r4, #4
   80320:	b2e4      	uxtb	r4, r4
   80322:	1950      	adds	r0, r2, r5
   80324:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80328:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);

	NVIC_ClearPendingIRQ(peripheral_irq);
	NVIC_SetPriority(peripheral_irq, interrupt_priority);
	NVIC_EnableIRQ(peripheral_irq);
}
   8032c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT(interrupt_priority <=
   8032e:	21a6      	movs	r1, #166	; 0xa6
   80330:	4808      	ldr	r0, [pc, #32]	; (80354 <configure_interrupt_controller+0x5c>)
   80332:	4b09      	ldr	r3, [pc, #36]	; (80358 <configure_interrupt_controller+0x60>)
   80334:	4798      	blx	r3
   80336:	e7e4      	b.n	80302 <configure_interrupt_controller+0xa>
	configASSERT(interrupt_priority >=
   80338:	21a8      	movs	r1, #168	; 0xa8
   8033a:	4806      	ldr	r0, [pc, #24]	; (80354 <configure_interrupt_controller+0x5c>)
   8033c:	4b06      	ldr	r3, [pc, #24]	; (80358 <configure_interrupt_controller+0x60>)
   8033e:	4798      	blx	r3
   80340:	e7e1      	b.n	80306 <configure_interrupt_controller+0xe>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80342:	f005 000f 	and.w	r0, r5, #15
   80346:	0124      	lsls	r4, r4, #4
   80348:	b2e4      	uxtb	r4, r4
   8034a:	4b04      	ldr	r3, [pc, #16]	; (8035c <configure_interrupt_controller+0x64>)
   8034c:	541c      	strb	r4, [r3, r0]
   8034e:	bd38      	pop	{r3, r4, r5, pc}
   80350:	e000e100 	.word	0xe000e100
   80354:	0008a564 	.word	0x0008a564
   80358:	00085a0d 	.word	0x00085a0d
   8035c:	e000ed14 	.word	0xe000ed14

00080360 <freertos_copy_bytes_from_pdc_circular_buffer>:
 */
uint32_t freertos_copy_bytes_from_pdc_circular_buffer(
		freertos_pdc_rx_control_t *p_rx_buffer_details,
		uint32_t next_byte_to_be_written, uint8_t *buf,
		uint32_t bytes_to_read)
{
   80360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80364:	4606      	mov	r6, r0
   80366:	4690      	mov	r8, r2
   80368:	461f      	mov	r7, r3
	uint32_t number_of_bytes_available, next_byte_to_read;

	/* Locate the position that data will be read from next. */
	next_byte_to_read = (uint32_t) p_rx_buffer_details->next_byte_to_read;
   8036a:	6985      	ldr	r5, [r0, #24]

	if (next_byte_to_be_written == next_byte_to_read) {
   8036c:	428d      	cmp	r5, r1
   8036e:	d01f      	beq.n	803b0 <freertos_copy_bytes_from_pdc_circular_buffer+0x50>
		} else {
			/* The read and write pointers are equal, but the Rx DMA is still
			in operation, so the buffer must be empty. */
			number_of_bytes_available = 0;
		}
	} else if (next_byte_to_be_written > next_byte_to_read) {
   80370:	428d      	cmp	r5, r1
		/* The write pointer has not wrapped around from the read pointer, or
		the write and read pointer are the same indicating a buffer overflow.
		Calculate the bytes available between the write and read pointers. */
		number_of_bytes_available = next_byte_to_be_written -
   80372:	bf32      	itee	cc
   80374:	1b4c      	subcc	r4, r1, r5
				next_byte_to_read;
	} else {
		/* The write pointer has wrapped around from the read pointer.
		Calculate the bytes available between the end of the buffer and the
		read pointer. */
		number_of_bytes_available =
   80376:	6844      	ldrcs	r4, [r0, #4]
   80378:	1b64      	subcs	r4, r4, r5
				p_rx_buffer_details->past_rx_buffer_end_address
				- next_byte_to_read;
	}

	/* Cap the number of requested bytes to those available. */
	if (bytes_to_read > number_of_bytes_available) {
   8037a:	42bc      	cmp	r4, r7
   8037c:	d307      	bcc.n	8038e <freertos_copy_bytes_from_pdc_circular_buffer+0x2e>
		bytes_to_read = number_of_bytes_available;
	} else if (bytes_to_read != number_of_bytes_available) {
   8037e:	d01e      	beq.n	803be <freertos_copy_bytes_from_pdc_circular_buffer+0x5e>
		/* There are more bytes available than being read now, so there is no
		need to wait for the interrupt to give the semaphore to indicate that
		new data is available. */
		xSemaphoreGive(p_rx_buffer_details->rx_event_semaphore);
   80380:	2300      	movs	r3, #0
   80382:	461a      	mov	r2, r3
   80384:	4619      	mov	r1, r3
   80386:	6930      	ldr	r0, [r6, #16]
   80388:	4c11      	ldr	r4, [pc, #68]	; (803d0 <freertos_copy_bytes_from_pdc_circular_buffer+0x70>)
   8038a:	47a0      	blx	r4
   8038c:	463c      	mov	r4, r7
	}

	/* Copy the bytes into the user buffer. */
	memcpy(buf, (void *) p_rx_buffer_details->next_byte_to_read,
   8038e:	4622      	mov	r2, r4
   80390:	69b1      	ldr	r1, [r6, #24]
   80392:	4640      	mov	r0, r8
   80394:	4b0f      	ldr	r3, [pc, #60]	; (803d4 <freertos_copy_bytes_from_pdc_circular_buffer+0x74>)
   80396:	4798      	blx	r3
			bytes_to_read);

	/* Move up the read buffer accordingly, wrapping around if it reaches the
	end of the buffer. */
	next_byte_to_read += bytes_to_read;
   80398:	4425      	add	r5, r4

	if (next_byte_to_read >=
   8039a:	6873      	ldr	r3, [r6, #4]
   8039c:	429d      	cmp	r5, r3
   8039e:	d210      	bcs.n	803c2 <freertos_copy_bytes_from_pdc_circular_buffer+0x62>
		}
		taskEXIT_CRITICAL();
	} else {
		/* The next_byte_to_read pointer is only read by the ISR, so the
		critical section is probably not needed on 32-bit machines. */
		taskENTER_CRITICAL();
   803a0:	4b0d      	ldr	r3, [pc, #52]	; (803d8 <freertos_copy_bytes_from_pdc_circular_buffer+0x78>)
   803a2:	4798      	blx	r3
		{
			p_rx_buffer_details->next_byte_to_read =
   803a4:	61b5      	str	r5, [r6, #24]
					(uint8_t *) next_byte_to_read;
		}
		taskEXIT_CRITICAL();
   803a6:	4b0d      	ldr	r3, [pc, #52]	; (803dc <freertos_copy_bytes_from_pdc_circular_buffer+0x7c>)
   803a8:	4798      	blx	r3
	}

	/* Return the number of bytes actually read. */
	return bytes_to_read;
}
   803aa:	4620      	mov	r0, r4
   803ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (p_rx_buffer_details->rx_pdc_parameters.ul_size == 0) {
   803b0:	68c3      	ldr	r3, [r0, #12]
   803b2:	b913      	cbnz	r3, 803ba <freertos_copy_bytes_from_pdc_circular_buffer+0x5a>
			number_of_bytes_available =
   803b4:	6844      	ldr	r4, [r0, #4]
   803b6:	1b64      	subs	r4, r4, r5
   803b8:	e7df      	b.n	8037a <freertos_copy_bytes_from_pdc_circular_buffer+0x1a>
			number_of_bytes_available = 0;
   803ba:	2400      	movs	r4, #0
   803bc:	e7dd      	b.n	8037a <freertos_copy_bytes_from_pdc_circular_buffer+0x1a>
   803be:	463c      	mov	r4, r7
   803c0:	e7e5      	b.n	8038e <freertos_copy_bytes_from_pdc_circular_buffer+0x2e>
		taskENTER_CRITICAL();
   803c2:	4b05      	ldr	r3, [pc, #20]	; (803d8 <freertos_copy_bytes_from_pdc_circular_buffer+0x78>)
   803c4:	4798      	blx	r3
			p_rx_buffer_details->next_byte_to_read =
   803c6:	6833      	ldr	r3, [r6, #0]
   803c8:	61b3      	str	r3, [r6, #24]
		taskEXIT_CRITICAL();
   803ca:	4b04      	ldr	r3, [pc, #16]	; (803dc <freertos_copy_bytes_from_pdc_circular_buffer+0x7c>)
   803cc:	4798      	blx	r3
   803ce:	e7ec      	b.n	803aa <freertos_copy_bytes_from_pdc_circular_buffer+0x4a>
   803d0:	00084021 	.word	0x00084021
   803d4:	00085c5d 	.word	0x00085c5d
   803d8:	00083ab5 	.word	0x00083ab5
   803dc:	00083afd 	.word	0x00083afd

000803e0 <freertos_obtain_peripheral_access_semphore>:
		portTickType *max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
	xTimeOutType time_out_definition;

	if (dma_event_control->peripheral_access_sem != NULL) {
   803e0:	6843      	ldr	r3, [r0, #4]
   803e2:	b1bb      	cbz	r3, 80414 <freertos_obtain_peripheral_access_semphore+0x34>
{
   803e4:	b530      	push	{r4, r5, lr}
   803e6:	b083      	sub	sp, #12
   803e8:	460d      	mov	r5, r1
   803ea:	4604      	mov	r4, r0
		/* Remember the time on entry. */
		vTaskSetTimeOutState(&time_out_definition);
   803ec:	4668      	mov	r0, sp
   803ee:	4b0c      	ldr	r3, [pc, #48]	; (80420 <freertos_obtain_peripheral_access_semphore+0x40>)
   803f0:	4798      	blx	r3

		/* Wait to get exclusive access to the peripheral. */
		if (xSemaphoreTake(dma_event_control->peripheral_access_sem,
   803f2:	6829      	ldr	r1, [r5, #0]
   803f4:	6860      	ldr	r0, [r4, #4]
   803f6:	4b0b      	ldr	r3, [pc, #44]	; (80424 <freertos_obtain_peripheral_access_semphore+0x44>)
   803f8:	4798      	blx	r3
   803fa:	b168      	cbz	r0, 80418 <freertos_obtain_peripheral_access_semphore+0x38>
				*max_block_time_ticks) == pdFAIL) {
			return_value = ERR_TIMEOUT;
		} else {
			/* Adjust the time out value in case the task had to block to
			wait for the semaphore. */
			if (xTaskCheckForTimeOut(&time_out_definition,
   803fc:	4629      	mov	r1, r5
   803fe:	4668      	mov	r0, sp
   80400:	4b09      	ldr	r3, [pc, #36]	; (80428 <freertos_obtain_peripheral_access_semphore+0x48>)
   80402:	4798      	blx	r3
   80404:	2801      	cmp	r0, #1
   80406:	d002      	beq.n	8040e <freertos_obtain_peripheral_access_semphore+0x2e>
	status_code_t return_value = STATUS_OK;
   80408:	2000      	movs	r0, #0
			}
		}
	}

	return return_value;
}
   8040a:	b003      	add	sp, #12
   8040c:	bd30      	pop	{r4, r5, pc}
				*max_block_time_ticks = 0;
   8040e:	2000      	movs	r0, #0
   80410:	6028      	str	r0, [r5, #0]
   80412:	e7fa      	b.n	8040a <freertos_obtain_peripheral_access_semphore+0x2a>
	status_code_t return_value = STATUS_OK;
   80414:	2000      	movs	r0, #0
   80416:	4770      	bx	lr
			return_value = ERR_TIMEOUT;
   80418:	f06f 0002 	mvn.w	r0, #2
   8041c:	e7f5      	b.n	8040a <freertos_obtain_peripheral_access_semphore+0x2a>
   8041e:	bf00      	nop
   80420:	00085035 	.word	0x00085035
   80424:	00084501 	.word	0x00084501
   80428:	0008508d 	.word	0x0008508d

0008042c <freertos_start_pdc_transfer>:
 */
void freertos_start_pdc_transfer(
		freertos_dma_event_control_t *dma_event_control,
		const uint8_t *data, size_t len, void *pdc_base_address,
		xSemaphoreHandle notification_semaphore, bool is_transmitting)
{
   8042c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8042e:	b083      	sub	sp, #12
   80430:	460f      	mov	r7, r1
   80432:	4616      	mov	r6, r2
   80434:	461c      	mov	r4, r3
   80436:	9b08      	ldr	r3, [sp, #32]
   80438:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
	/* Remember which semaphore is to be used to indicate the end of
	transmission.  If notification_semaphore is NULL then either no
	semaphore is being used, or the driver is using an internal notification
	semaphore because it is configured to wait until the transmit has
	completed before returning. */
	if (notification_semaphore != NULL) {
   8043c:	b1b3      	cbz	r3, 8046c <freertos_start_pdc_transfer+0x40>
		dma_event_control->transaction_complete_notification_semaphore =
   8043e:	6003      	str	r3, [r0, #0]

	/* Ensure the notification semaphore starts in the expected state in case
	the previous PDC transfer didn't complete for any reason. */
	if (dma_event_control->transaction_complete_notification_semaphore !=
			NULL) {
		xSemaphoreTake(
   80440:	2100      	movs	r1, #0
   80442:	4618      	mov	r0, r3
   80444:	4b13      	ldr	r3, [pc, #76]	; (80494 <freertos_start_pdc_transfer+0x68>)
   80446:	4798      	blx	r3
				dma_event_control->transaction_complete_notification_semaphore,
				0);
	}

	/* Configure the PDC to transmit or receive parameters. */
	pdc_packet.ul_addr = (uint32_t) data;
   80448:	9700      	str	r7, [sp, #0]
	pdc_packet.ul_size = (uint32_t) len;
   8044a:	9601      	str	r6, [sp, #4]

	if (is_transmitting == true) {
   8044c:	b995      	cbnz	r5, 80474 <freertos_start_pdc_transfer+0x48>
		pdc_disable_transfer(pdc_base_address, PERIPH_PTCR_TXTDIS);
		pdc_tx_init(pdc_base_address, &pdc_packet, NULL);
		pdc_enable_transfer(pdc_base_address, PERIPH_PTCR_TXTEN);
	} else {
		pdc_disable_transfer(pdc_base_address, PERIPH_PTCR_RXTDIS);
   8044e:	2102      	movs	r1, #2
   80450:	4620      	mov	r0, r4
   80452:	4b11      	ldr	r3, [pc, #68]	; (80498 <freertos_start_pdc_transfer+0x6c>)
   80454:	4798      	blx	r3
		pdc_rx_init(pdc_base_address, &pdc_packet, NULL);
   80456:	2200      	movs	r2, #0
   80458:	4669      	mov	r1, sp
   8045a:	4620      	mov	r0, r4
   8045c:	4b0f      	ldr	r3, [pc, #60]	; (8049c <freertos_start_pdc_transfer+0x70>)
   8045e:	4798      	blx	r3
		pdc_enable_transfer(pdc_base_address, PERIPH_PTCR_RXTEN);
   80460:	2101      	movs	r1, #1
   80462:	4620      	mov	r0, r4
   80464:	4b0e      	ldr	r3, [pc, #56]	; (804a0 <freertos_start_pdc_transfer+0x74>)
   80466:	4798      	blx	r3
	}
}
   80468:	b003      	add	sp, #12
   8046a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (dma_event_control->transaction_complete_notification_semaphore !=
   8046c:	6803      	ldr	r3, [r0, #0]
   8046e:	2b00      	cmp	r3, #0
   80470:	d0ea      	beq.n	80448 <freertos_start_pdc_transfer+0x1c>
   80472:	e7e5      	b.n	80440 <freertos_start_pdc_transfer+0x14>
		pdc_disable_transfer(pdc_base_address, PERIPH_PTCR_TXTDIS);
   80474:	f44f 7100 	mov.w	r1, #512	; 0x200
   80478:	4620      	mov	r0, r4
   8047a:	4b07      	ldr	r3, [pc, #28]	; (80498 <freertos_start_pdc_transfer+0x6c>)
   8047c:	4798      	blx	r3
		pdc_tx_init(pdc_base_address, &pdc_packet, NULL);
   8047e:	2200      	movs	r2, #0
   80480:	4669      	mov	r1, sp
   80482:	4620      	mov	r0, r4
   80484:	4b07      	ldr	r3, [pc, #28]	; (804a4 <freertos_start_pdc_transfer+0x78>)
   80486:	4798      	blx	r3
		pdc_enable_transfer(pdc_base_address, PERIPH_PTCR_TXTEN);
   80488:	f44f 7180 	mov.w	r1, #256	; 0x100
   8048c:	4620      	mov	r0, r4
   8048e:	4b04      	ldr	r3, [pc, #16]	; (804a0 <freertos_start_pdc_transfer+0x74>)
   80490:	4798      	blx	r3
   80492:	e7e9      	b.n	80468 <freertos_start_pdc_transfer+0x3c>
   80494:	00084501 	.word	0x00084501
   80498:	00081d9d 	.word	0x00081d9d
   8049c:	00081d79 	.word	0x00081d79
   804a0:	00081d91 	.word	0x00081d91
   804a4:	00081d61 	.word	0x00081d61

000804a8 <freertos_optionally_wait_transfer_completion>:
		xSemaphoreHandle notification_semaphore,
		portTickType max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;

	if (notification_semaphore == NULL) {
   804a8:	b109      	cbz	r1, 804ae <freertos_optionally_wait_transfer_completion+0x6>
	status_code_t return_value = STATUS_OK;
   804aa:	2000      	movs	r0, #0
   804ac:	4770      	bx	lr
		if (dma_event_control->transaction_complete_notification_semaphore !=
   804ae:	6800      	ldr	r0, [r0, #0]
   804b0:	b148      	cbz	r0, 804c6 <freertos_optionally_wait_transfer_completion+0x1e>
{
   804b2:	b508      	push	{r3, lr}
   804b4:	4611      	mov	r1, r2
				NULL) {
			/* Wait until notified by the ISR that transmission is
			complete. */
			if (xSemaphoreTake(dma_event_control->
   804b6:	4b05      	ldr	r3, [pc, #20]	; (804cc <freertos_optionally_wait_transfer_completion+0x24>)
   804b8:	4798      	blx	r3
					transaction_complete_notification_semaphore,
					max_block_time_ticks) != pdPASS) {
				return_value = ERR_TIMEOUT;
   804ba:	2801      	cmp	r0, #1
   804bc:	bf0c      	ite	eq
   804be:	2000      	moveq	r0, #0
   804c0:	f06f 0002 	mvnne.w	r0, #2
   804c4:	bd08      	pop	{r3, pc}
	status_code_t return_value = STATUS_OK;
   804c6:	2000      	movs	r0, #0
   804c8:	4770      	bx	lr
   804ca:	bf00      	nop
   804cc:	00084501 	.word	0x00084501

000804d0 <local_twi_handler>:
/*
 * For internal use only.
 * A common TWI interrupt handler that is called for all TWI peripherals.
 */
static void local_twi_handler(const portBASE_TYPE twi_index)
{
   804d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804d4:	b082      	sub	sp, #8
   804d6:	4607      	mov	r7, r0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
   804d8:	2300      	movs	r3, #0
   804da:	9301      	str	r3, [sp, #4]
	uint32_t twi_status;
	Twi *twi_port;
	bool transfer_timeout = false;

	twi_port = all_twi_definitions[twi_index].peripheral_base_address;
   804dc:	0103      	lsls	r3, r0, #4
   804de:	4a7b      	ldr	r2, [pc, #492]	; (806cc <local_twi_handler+0x1fc>)
   804e0:	58d5      	ldr	r5, [r2, r3]

	twi_status = twi_get_interrupt_status(twi_port);
   804e2:	4628      	mov	r0, r5
   804e4:	4b7a      	ldr	r3, [pc, #488]	; (806d0 <local_twi_handler+0x200>)
   804e6:	4798      	blx	r3
   804e8:	4606      	mov	r6, r0
	twi_status &= twi_get_interrupt_mask(twi_port);
   804ea:	4628      	mov	r0, r5
   804ec:	4b79      	ldr	r3, [pc, #484]	; (806d4 <local_twi_handler+0x204>)
   804ee:	4798      	blx	r3
   804f0:	4006      	ands	r6, r0

	/* Has the PDC completed a transmission? */
	if ((twi_status & TWI_SR_ENDTX) != 0UL) {
   804f2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   804f6:	d135      	bne.n	80564 <local_twi_handler+0x94>
	bool transfer_timeout = false;
   804f8:	f04f 0800 	mov.w	r8, #0
			}
		}
	}

	/* Has the PDC completed a reception? */
	if ((twi_status & TWI_SR_ENDRX) != 0UL) {
   804fc:	f416 5f80 	tst.w	r6, #4096	; 0x1000
   80500:	d17c      	bne.n	805fc <local_twi_handler+0x12c>
						&higher_priority_task_woken);
			}
		}
	}

	if (((twi_status & SR_ERROR_INTERRUPTS) != 0) || (transfer_timeout == true)) {
   80502:	f416 7f50 	tst.w	r6, #832	; 0x340
   80506:	d102      	bne.n	8050e <local_twi_handler+0x3e>
   80508:	f1b8 0f00 	cmp.w	r8, #0
   8050c:	d01d      	beq.n	8054a <local_twi_handler+0x7a>
		Stop the transmission, disable interrupts used by the peripheral, and
		ensure the peripheral access mutex is made available to tasks.  As this
		peripheral is half duplex, only the Tx peripheral access mutex exits.*/

		/* Stop the PDC */
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS | PERIPH_PTCR_RXTDIS);
   8050e:	4b6f      	ldr	r3, [pc, #444]	; (806cc <local_twi_handler+0x1fc>)
   80510:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80514:	f240 2102 	movw	r1, #514	; 0x202
   80518:	6858      	ldr	r0, [r3, #4]
   8051a:	4b6f      	ldr	r3, [pc, #444]	; (806d8 <local_twi_handler+0x208>)
   8051c:	4798      	blx	r3

		if (!(twi_status & TWI_SR_NACK)) {
   8051e:	f416 7f80 	tst.w	r6, #256	; 0x100
			/* Do not send stop if NACK received. Handled by hardware */
			twi_port->TWI_CR = TWI_CR_STOP;
   80522:	bf04      	itt	eq
   80524:	2302      	moveq	r3, #2
   80526:	602b      	streq	r3, [r5, #0]
		}
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
   80528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8052c:	4628      	mov	r0, r5
   8052e:	4c6b      	ldr	r4, [pc, #428]	; (806dc <local_twi_handler+0x20c>)
   80530:	47a0      	blx	r4
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
   80532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80536:	4628      	mov	r0, r5
   80538:	47a0      	blx	r4

		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
   8053a:	4b69      	ldr	r3, [pc, #420]	; (806e0 <local_twi_handler+0x210>)
   8053c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   80540:	6878      	ldr	r0, [r7, #4]
   80542:	b110      	cbz	r0, 8054a <local_twi_handler+0x7a>
			xSemaphoreGiveFromISR(
   80544:	a901      	add	r1, sp, #4
   80546:	4b67      	ldr	r3, [pc, #412]	; (806e4 <local_twi_handler+0x214>)
   80548:	4798      	blx	r3
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
   8054a:	9b01      	ldr	r3, [sp, #4]
   8054c:	b13b      	cbz	r3, 8055e <local_twi_handler+0x8e>
   8054e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80552:	4b65      	ldr	r3, [pc, #404]	; (806e8 <local_twi_handler+0x218>)
   80554:	601a      	str	r2, [r3, #0]
   80556:	f3bf 8f4f 	dsb	sy
   8055a:	f3bf 8f6f 	isb	sy
}
   8055e:	b002      	add	sp, #8
   80560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_TXTDIS);
   80564:	4b59      	ldr	r3, [pc, #356]	; (806cc <local_twi_handler+0x1fc>)
   80566:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8056a:	f44f 7100 	mov.w	r1, #512	; 0x200
   8056e:	6858      	ldr	r0, [r3, #4]
   80570:	4b59      	ldr	r3, [pc, #356]	; (806d8 <local_twi_handler+0x208>)
   80572:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDTX);
   80574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   80578:	4628      	mov	r0, r5
   8057a:	4b58      	ldr	r3, [pc, #352]	; (806dc <local_twi_handler+0x20c>)
   8057c:	4798      	blx	r3
		uint32_t timeout_counter = 0;
   8057e:	2400      	movs	r4, #0
			status = twi_port->TWI_SR;
   80580:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_TXRDY) {
   80582:	f013 0f04 	tst.w	r3, #4
   80586:	d106      	bne.n	80596 <local_twi_handler+0xc6>
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
   80588:	3401      	adds	r4, #1
   8058a:	f1b4 3fff 	cmp.w	r4, #4294967295
   8058e:	d1f7      	bne.n	80580 <local_twi_handler+0xb0>
				transfer_timeout = true;
   80590:	f04f 0801 	mov.w	r8, #1
   80594:	e001      	b.n	8059a <local_twi_handler+0xca>
	bool transfer_timeout = false;
   80596:	f04f 0800 	mov.w	r8, #0
		twi_port->TWI_CR = TWI_CR_STOP;
   8059a:	2302      	movs	r3, #2
   8059c:	602b      	str	r3, [r5, #0]
		twi_port->TWI_THR = twis[twi_index].buffer[twis[twi_index].length-1];
   8059e:	4b53      	ldr	r3, [pc, #332]	; (806ec <local_twi_handler+0x21c>)
   805a0:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
   805a4:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
   805a8:	6852      	ldr	r2, [r2, #4]
   805aa:	4413      	add	r3, r2
   805ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   805b0:	636b      	str	r3, [r5, #52]	; 0x34
			status = twi_port->TWI_SR;
   805b2:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_TXCOMP) {
   805b4:	f013 0f01 	tst.w	r3, #1
   805b8:	d10c      	bne.n	805d4 <local_twi_handler+0x104>
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
   805ba:	3401      	adds	r4, #1
   805bc:	f1b4 3fff 	cmp.w	r4, #4294967295
   805c0:	d1f7      	bne.n	805b2 <local_twi_handler+0xe2>
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
   805c2:	4b47      	ldr	r3, [pc, #284]	; (806e0 <local_twi_handler+0x210>)
   805c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   805c8:	6858      	ldr	r0, [r3, #4]
   805ca:	2800      	cmp	r0, #0
   805cc:	d07a      	beq.n	806c4 <local_twi_handler+0x1f4>
				transfer_timeout = true;
   805ce:	f04f 0801 	mov.w	r8, #1
   805d2:	e004      	b.n	805de <local_twi_handler+0x10e>
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
   805d4:	4b42      	ldr	r3, [pc, #264]	; (806e0 <local_twi_handler+0x210>)
   805d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   805da:	6858      	ldr	r0, [r3, #4]
   805dc:	b110      	cbz	r0, 805e4 <local_twi_handler+0x114>
			xSemaphoreGiveFromISR(
   805de:	a901      	add	r1, sp, #4
   805e0:	4b40      	ldr	r3, [pc, #256]	; (806e4 <local_twi_handler+0x214>)
   805e2:	4798      	blx	r3
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
   805e4:	f1b4 3fff 	cmp.w	r4, #4294967295
   805e8:	d088      	beq.n	804fc <local_twi_handler+0x2c>
			if (tx_dma_control[twi_index]. transaction_complete_notification_semaphore != NULL) {
   805ea:	4b3d      	ldr	r3, [pc, #244]	; (806e0 <local_twi_handler+0x210>)
   805ec:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
   805f0:	2800      	cmp	r0, #0
   805f2:	d083      	beq.n	804fc <local_twi_handler+0x2c>
				xSemaphoreGiveFromISR(
   805f4:	a901      	add	r1, sp, #4
   805f6:	4b3b      	ldr	r3, [pc, #236]	; (806e4 <local_twi_handler+0x214>)
   805f8:	4798      	blx	r3
   805fa:	e77f      	b.n	804fc <local_twi_handler+0x2c>
		pdc_disable_transfer(all_twi_definitions[twi_index].pdc_base_address, PERIPH_PTCR_RXTDIS);
   805fc:	4b33      	ldr	r3, [pc, #204]	; (806cc <local_twi_handler+0x1fc>)
   805fe:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80602:	2102      	movs	r1, #2
   80604:	6858      	ldr	r0, [r3, #4]
   80606:	4b34      	ldr	r3, [pc, #208]	; (806d8 <local_twi_handler+0x208>)
   80608:	4798      	blx	r3
		twi_disable_interrupt(twi_port, TWI_IDR_ENDRX);
   8060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8060e:	4628      	mov	r0, r5
   80610:	4b32      	ldr	r3, [pc, #200]	; (806dc <local_twi_handler+0x20c>)
   80612:	4798      	blx	r3
		uint32_t timeout_counter = 0;
   80614:	2400      	movs	r4, #0
			status = twi_port->TWI_SR;
   80616:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_RXRDY) {
   80618:	f013 0f02 	tst.w	r3, #2
   8061c:	d103      	bne.n	80626 <local_twi_handler+0x156>
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
   8061e:	3401      	adds	r4, #1
   80620:	f1b4 3fff 	cmp.w	r4, #4294967295
   80624:	d1f7      	bne.n	80616 <local_twi_handler+0x146>
		twi_port->TWI_CR = TWI_CR_STOP;
   80626:	2302      	movs	r3, #2
   80628:	602b      	str	r3, [r5, #0]
		twis[twi_index].buffer[(twis[twi_index].length)-2] = twi_port->TWI_RHR;
   8062a:	4b30      	ldr	r3, [pc, #192]	; (806ec <local_twi_handler+0x21c>)
   8062c:	f853 2037 	ldr.w	r2, [r3, r7, lsl #3]
   80630:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   80634:	6859      	ldr	r1, [r3, #4]
   80636:	6b28      	ldr	r0, [r5, #48]	; 0x30
   80638:	1853      	adds	r3, r2, r1
   8063a:	f803 0c02 	strb.w	r0, [r3, #-2]
			status = twi_port->TWI_SR;
   8063e:	6a2b      	ldr	r3, [r5, #32]
			if (status & TWI_SR_RXRDY) {
   80640:	f013 0f02 	tst.w	r3, #2
   80644:	d11b      	bne.n	8067e <local_twi_handler+0x1ae>
			if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
   80646:	3401      	adds	r4, #1
   80648:	f1b4 3fff 	cmp.w	r4, #4294967295
   8064c:	d1f7      	bne.n	8063e <local_twi_handler+0x16e>
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
   8064e:	4b24      	ldr	r3, [pc, #144]	; (806e0 <local_twi_handler+0x210>)
   80650:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   80654:	6858      	ldr	r0, [r3, #4]
   80656:	2800      	cmp	r0, #0
   80658:	f43f af53 	beq.w	80502 <local_twi_handler+0x32>
			xSemaphoreGiveFromISR(
   8065c:	a901      	add	r1, sp, #4
   8065e:	4b21      	ldr	r3, [pc, #132]	; (806e4 <local_twi_handler+0x214>)
   80660:	4798      	blx	r3
		if  (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
   80662:	f1b4 3fff 	cmp.w	r4, #4294967295
   80666:	f43f af4c 	beq.w	80502 <local_twi_handler+0x32>
			if (rx_dma_control[twi_index].transaction_complete_notification_semaphore != NULL) {
   8066a:	4b21      	ldr	r3, [pc, #132]	; (806f0 <local_twi_handler+0x220>)
   8066c:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
   80670:	2800      	cmp	r0, #0
   80672:	f43f af46 	beq.w	80502 <local_twi_handler+0x32>
				xSemaphoreGiveFromISR(
   80676:	a901      	add	r1, sp, #4
   80678:	4b1a      	ldr	r3, [pc, #104]	; (806e4 <local_twi_handler+0x214>)
   8067a:	4798      	blx	r3
   8067c:	e741      	b.n	80502 <local_twi_handler+0x32>
		if (!(timeout_counter >= TWI_TIMEOUT_COUNTER)) {
   8067e:	f1b4 3fff 	cmp.w	r4, #4294967295
   80682:	d00e      	beq.n	806a2 <local_twi_handler+0x1d2>
			twis[twi_index].buffer[(twis[twi_index].length)-1] = twi_port->TWI_RHR;
   80684:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   80686:	440a      	add	r2, r1
   80688:	f802 3c01 	strb.w	r3, [r2, #-1]
			timeout_counter = 0;
   8068c:	2400      	movs	r4, #0
				status = twi_port->TWI_SR;
   8068e:	6a2b      	ldr	r3, [r5, #32]
				if (status & TWI_SR_TXCOMP) {
   80690:	f013 0f01 	tst.w	r3, #1
   80694:	d10f      	bne.n	806b6 <local_twi_handler+0x1e6>
				if (++timeout_counter >= TWI_TIMEOUT_COUNTER) {
   80696:	3401      	adds	r4, #1
   80698:	f1b4 3fff 	cmp.w	r4, #4294967295
   8069c:	d1f7      	bne.n	8068e <local_twi_handler+0x1be>
					transfer_timeout = true;
   8069e:	f04f 0801 	mov.w	r8, #1
		if (tx_dma_control[twi_index].peripheral_access_sem != NULL) {
   806a2:	4b0f      	ldr	r3, [pc, #60]	; (806e0 <local_twi_handler+0x210>)
   806a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   806a8:	6858      	ldr	r0, [r3, #4]
   806aa:	2800      	cmp	r0, #0
   806ac:	f43f af29 	beq.w	80502 <local_twi_handler+0x32>
   806b0:	f04f 34ff 	mov.w	r4, #4294967295
   806b4:	e7d2      	b.n	8065c <local_twi_handler+0x18c>
   806b6:	4b0a      	ldr	r3, [pc, #40]	; (806e0 <local_twi_handler+0x210>)
   806b8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   806bc:	6858      	ldr	r0, [r3, #4]
   806be:	2800      	cmp	r0, #0
   806c0:	d1cc      	bne.n	8065c <local_twi_handler+0x18c>
   806c2:	e7ce      	b.n	80662 <local_twi_handler+0x192>
				transfer_timeout = true;
   806c4:	f04f 0801 	mov.w	r8, #1
   806c8:	e718      	b.n	804fc <local_twi_handler+0x2c>
   806ca:	bf00      	nop
   806cc:	0008a5ac 	.word	0x0008a5ac
   806d0:	000820db 	.word	0x000820db
   806d4:	000820df 	.word	0x000820df
   806d8:	00081d9d 	.word	0x00081d9d
   806dc:	000820d5 	.word	0x000820d5
   806e0:	20070c94 	.word	0x20070c94
   806e4:	000842c9 	.word	0x000842c9
   806e8:	e000ed04 	.word	0xe000ed04
   806ec:	20070c84 	.word	0x20070c84
   806f0:	20070c74 	.word	0x20070c74

000806f4 <TWI0_Handler>:
#endif /* TWI */

#ifdef TWI0

void TWI0_Handler(void)
{
   806f4:	b508      	push	{r3, lr}
	local_twi_handler(0);
   806f6:	2000      	movs	r0, #0
   806f8:	4b01      	ldr	r3, [pc, #4]	; (80700 <TWI0_Handler+0xc>)
   806fa:	4798      	blx	r3
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	000804d1 	.word	0x000804d1

00080704 <TWI1_Handler>:
#endif

#ifdef TWI1

void TWI1_Handler(void)
{
   80704:	b508      	push	{r3, lr}
	local_twi_handler(1);
   80706:	2001      	movs	r0, #1
   80708:	4b01      	ldr	r3, [pc, #4]	; (80710 <TWI1_Handler+0xc>)
   8070a:	4798      	blx	r3
   8070c:	bd08      	pop	{r3, pc}
   8070e:	bf00      	nop
   80710:	000804d1 	.word	0x000804d1

00080714 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t uart_index,
		enum buffer_operations operation_performed)
{
   80714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80716:	4604      	mov	r4, r0
	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   80718:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   8071c:	4b30      	ldr	r3, [pc, #192]	; (807e0 <configure_rx_dma+0xcc>)
   8071e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80722:	699a      	ldr	r2, [r3, #24]
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
   80724:	689b      	ldr	r3, [r3, #8]
	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   80726:	429a      	cmp	r2, r3
   80728:	d020      	beq.n	8076c <configure_rx_dma+0x58>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
   8072a:	429a      	cmp	r2, r3
   8072c:	d938      	bls.n	807a0 <configure_rx_dma+0x8c>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   8072e:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
   80732:	482b      	ldr	r0, [pc, #172]	; (807e0 <configure_rx_dma+0xcc>)
   80734:	eb00 0181 	add.w	r1, r0, r1, lsl #2
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   80738:	1ad2      	subs	r2, r2, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   8073a:	60ca      	str	r2, [r1, #12]
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
   8073c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80740:	4927      	ldr	r1, [pc, #156]	; (807e0 <configure_rx_dma+0xcc>)
   80742:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   80746:	68d1      	ldr	r1, [r2, #12]
   80748:	440b      	add	r3, r1
   8074a:	6852      	ldr	r2, [r2, #4]
   8074c:	4293      	cmp	r3, r2
   8074e:	d818      	bhi.n	80782 <configure_rx_dma+0x6e>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
   80750:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80754:	4a22      	ldr	r2, [pc, #136]	; (807e0 <configure_rx_dma+0xcc>)
   80756:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8075a:	68db      	ldr	r3, [r3, #12]
   8075c:	bb4b      	cbnz	r3, 807b2 <configure_rx_dma+0x9e>
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		uart_disable_interrupt(
				all_uart_definitions[uart_index].peripheral_base_address,
   8075e:	0124      	lsls	r4, r4, #4
		uart_disable_interrupt(
   80760:	2109      	movs	r1, #9
   80762:	4b20      	ldr	r3, [pc, #128]	; (807e4 <configure_rx_dma+0xd0>)
   80764:	5918      	ldr	r0, [r3, r4]
   80766:	4b20      	ldr	r3, [pc, #128]	; (807e8 <configure_rx_dma+0xd4>)
   80768:	4798      	blx	r3
   8076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (operation_performed == data_added) {
   8076c:	b979      	cbnz	r1, 8078e <configure_rx_dma+0x7a>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
   8076e:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80772:	491b      	ldr	r1, [pc, #108]	; (807e0 <configure_rx_dma+0xcc>)
   80774:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   80778:	2100      	movs	r1, #0
   8077a:	60d1      	str	r1, [r2, #12]
	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
   8077c:	6852      	ldr	r2, [r2, #4]
   8077e:	4293      	cmp	r3, r2
   80780:	d9ed      	bls.n	8075e <configure_rx_dma+0x4a>
   80782:	f44f 7113 	mov.w	r1, #588	; 0x24c
   80786:	4819      	ldr	r0, [pc, #100]	; (807ec <configure_rx_dma+0xd8>)
   80788:	4b19      	ldr	r3, [pc, #100]	; (807f0 <configure_rx_dma+0xdc>)
   8078a:	4798      	blx	r3
   8078c:	e7e0      	b.n	80750 <configure_rx_dma+0x3c>
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   8078e:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80792:	4913      	ldr	r1, [pc, #76]	; (807e0 <configure_rx_dma+0xcc>)
   80794:	eb01 0282 	add.w	r2, r1, r2, lsl #2
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   80798:	6851      	ldr	r1, [r2, #4]
   8079a:	1ac9      	subs	r1, r1, r3
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   8079c:	60d1      	str	r1, [r2, #12]
   8079e:	e7cd      	b.n	8073c <configure_rx_dma+0x28>
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   807a0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   807a4:	490e      	ldr	r1, [pc, #56]	; (807e0 <configure_rx_dma+0xcc>)
   807a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   807aa:	6851      	ldr	r1, [r2, #4]
   807ac:	1ac9      	subs	r1, r1, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   807ae:	60d1      	str	r1, [r2, #12]
   807b0:	e7c4      	b.n	8073c <configure_rx_dma+0x28>
		pdc_rx_init(
   807b2:	4e0c      	ldr	r6, [pc, #48]	; (807e4 <configure_rx_dma+0xd0>)
   807b4:	0125      	lsls	r5, r4, #4
   807b6:	1973      	adds	r3, r6, r5
   807b8:	685f      	ldr	r7, [r3, #4]
   807ba:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   807be:	eb02 0184 	add.w	r1, r2, r4, lsl #2
   807c2:	2200      	movs	r2, #0
   807c4:	3108      	adds	r1, #8
   807c6:	4638      	mov	r0, r7
   807c8:	4b0a      	ldr	r3, [pc, #40]	; (807f4 <configure_rx_dma+0xe0>)
   807ca:	4798      	blx	r3
		pdc_enable_transfer(
   807cc:	2101      	movs	r1, #1
   807ce:	4638      	mov	r0, r7
   807d0:	4b09      	ldr	r3, [pc, #36]	; (807f8 <configure_rx_dma+0xe4>)
   807d2:	4798      	blx	r3
		uart_enable_interrupt(
   807d4:	2109      	movs	r1, #9
   807d6:	5970      	ldr	r0, [r6, r5]
   807d8:	4b08      	ldr	r3, [pc, #32]	; (807fc <configure_rx_dma+0xe8>)
   807da:	4798      	blx	r3
   807dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   807de:	bf00      	nop
   807e0:	20070ca4 	.word	0x20070ca4
   807e4:	0008a5cc 	.word	0x0008a5cc
   807e8:	000820e7 	.word	0x000820e7
   807ec:	0008a5dc 	.word	0x0008a5dc
   807f0:	00085a0d 	.word	0x00085a0d
   807f4:	00081d79 	.word	0x00081d79
   807f8:	00081d91 	.word	0x00081d91
   807fc:	000820e3 	.word	0x000820e3

00080800 <UART_Handler>:
 */

#ifdef UART

void UART_Handler(void)
{
   80800:	b530      	push	{r4, r5, lr}
   80802:	b083      	sub	sp, #12
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
   80804:	2300      	movs	r3, #0
   80806:	9301      	str	r3, [sp, #4]
	uart_status = uart_get_status(
   80808:	4d37      	ldr	r5, [pc, #220]	; (808e8 <UART_Handler+0xe8>)
   8080a:	4628      	mov	r0, r5
   8080c:	4b37      	ldr	r3, [pc, #220]	; (808ec <UART_Handler+0xec>)
   8080e:	4798      	blx	r3
   80810:	4604      	mov	r4, r0
	uart_status &= uart_get_interrupt_mask(
   80812:	4628      	mov	r0, r5
   80814:	4b36      	ldr	r3, [pc, #216]	; (808f0 <UART_Handler+0xf0>)
   80816:	4798      	blx	r3
   80818:	4004      	ands	r4, r0
	if ((uart_status & UART_SR_ENDTX) != 0UL) {
   8081a:	f014 0f10 	tst.w	r4, #16
   8081e:	d134      	bne.n	8088a <UART_Handler+0x8a>
	if ((uart_status & UART_SR_ENDRX) != 0UL) {
   80820:	f014 0f08 	tst.w	r4, #8
   80824:	d01d      	beq.n	80862 <UART_Handler+0x62>
		configASSERT(rx_buffer_definition->next_byte_to_read);
   80826:	4b33      	ldr	r3, [pc, #204]	; (808f4 <UART_Handler+0xf4>)
   80828:	699b      	ldr	r3, [r3, #24]
   8082a:	2b00      	cmp	r3, #0
   8082c:	d03f      	beq.n	808ae <UART_Handler+0xae>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   8082e:	4b31      	ldr	r3, [pc, #196]	; (808f4 <UART_Handler+0xf4>)
   80830:	699b      	ldr	r3, [r3, #24]
   80832:	2b01      	cmp	r3, #1
   80834:	d041      	beq.n	808ba <UART_Handler+0xba>
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
   80836:	4a2f      	ldr	r2, [pc, #188]	; (808f4 <UART_Handler+0xf4>)
   80838:	6893      	ldr	r3, [r2, #8]
   8083a:	68d1      	ldr	r1, [r2, #12]
   8083c:	440b      	add	r3, r1
   8083e:	6093      	str	r3, [r2, #8]
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
   80840:	6852      	ldr	r2, [r2, #4]
   80842:	4293      	cmp	r3, r2
   80844:	d302      	bcc.n	8084c <UART_Handler+0x4c>
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
   80846:	4b2b      	ldr	r3, [pc, #172]	; (808f4 <UART_Handler+0xf4>)
   80848:	681a      	ldr	r2, [r3, #0]
   8084a:	609a      	str	r2, [r3, #8]
		configure_rx_dma(uart_index, data_added);
   8084c:	2100      	movs	r1, #0
   8084e:	4608      	mov	r0, r1
   80850:	4b29      	ldr	r3, [pc, #164]	; (808f8 <UART_Handler+0xf8>)
   80852:	4798      	blx	r3
		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80854:	4b27      	ldr	r3, [pc, #156]	; (808f4 <UART_Handler+0xf4>)
   80856:	6918      	ldr	r0, [r3, #16]
   80858:	2800      	cmp	r0, #0
   8085a:	d034      	beq.n	808c6 <UART_Handler+0xc6>
			xSemaphoreGiveFromISR(
   8085c:	a901      	add	r1, sp, #4
   8085e:	4b27      	ldr	r3, [pc, #156]	; (808fc <UART_Handler+0xfc>)
   80860:	4798      	blx	r3
	if (uart_status == 0UL) {
   80862:	2c00      	cmp	r4, #0
   80864:	d131      	bne.n	808ca <UART_Handler+0xca>
		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80866:	4b23      	ldr	r3, [pc, #140]	; (808f4 <UART_Handler+0xf4>)
   80868:	6918      	ldr	r0, [r3, #16]
   8086a:	b110      	cbz	r0, 80872 <UART_Handler+0x72>
			xSemaphoreGiveFromISR(
   8086c:	a901      	add	r1, sp, #4
   8086e:	4b23      	ldr	r3, [pc, #140]	; (808fc <UART_Handler+0xfc>)
   80870:	4798      	blx	r3
	portEND_SWITCHING_ISR(higher_priority_task_woken);
   80872:	9b01      	ldr	r3, [sp, #4]
   80874:	b13b      	cbz	r3, 80886 <UART_Handler+0x86>
   80876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8087a:	4b21      	ldr	r3, [pc, #132]	; (80900 <UART_Handler+0x100>)
   8087c:	601a      	str	r2, [r3, #0]
   8087e:	f3bf 8f4f 	dsb	sy
   80882:	f3bf 8f6f 	isb	sy
	local_uart_handler(0);
}
   80886:	b003      	add	sp, #12
   80888:	bd30      	pop	{r4, r5, pc}
		uart_disable_interrupt(
   8088a:	2110      	movs	r1, #16
   8088c:	4628      	mov	r0, r5
   8088e:	4b1d      	ldr	r3, [pc, #116]	; (80904 <UART_Handler+0x104>)
   80890:	4798      	blx	r3
		if (tx_dma_control[uart_index].peripheral_access_sem != NULL) {
   80892:	4b1d      	ldr	r3, [pc, #116]	; (80908 <UART_Handler+0x108>)
   80894:	6858      	ldr	r0, [r3, #4]
   80896:	b110      	cbz	r0, 8089e <UART_Handler+0x9e>
			xSemaphoreGiveFromISR(
   80898:	a901      	add	r1, sp, #4
   8089a:	4b18      	ldr	r3, [pc, #96]	; (808fc <UART_Handler+0xfc>)
   8089c:	4798      	blx	r3
		if (tx_dma_control[uart_index].transaction_complete_notification_semaphore != NULL) {
   8089e:	4b1a      	ldr	r3, [pc, #104]	; (80908 <UART_Handler+0x108>)
   808a0:	6818      	ldr	r0, [r3, #0]
   808a2:	2800      	cmp	r0, #0
   808a4:	d0bc      	beq.n	80820 <UART_Handler+0x20>
			xSemaphoreGiveFromISR(
   808a6:	a901      	add	r1, sp, #4
   808a8:	4b14      	ldr	r3, [pc, #80]	; (808fc <UART_Handler+0xfc>)
   808aa:	4798      	blx	r3
   808ac:	e7b8      	b.n	80820 <UART_Handler+0x20>
		configASSERT(rx_buffer_definition->next_byte_to_read);
   808ae:	f44f 7124 	mov.w	r1, #656	; 0x290
   808b2:	4816      	ldr	r0, [pc, #88]	; (8090c <UART_Handler+0x10c>)
   808b4:	4b16      	ldr	r3, [pc, #88]	; (80910 <UART_Handler+0x110>)
   808b6:	4798      	blx	r3
   808b8:	e7b9      	b.n	8082e <UART_Handler+0x2e>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   808ba:	f240 2192 	movw	r1, #658	; 0x292
   808be:	4813      	ldr	r0, [pc, #76]	; (8090c <UART_Handler+0x10c>)
   808c0:	4b13      	ldr	r3, [pc, #76]	; (80910 <UART_Handler+0x110>)
   808c2:	4798      	blx	r3
   808c4:	e7b7      	b.n	80836 <UART_Handler+0x36>
	if (uart_status == 0UL) {
   808c6:	2c00      	cmp	r4, #0
   808c8:	d0d3      	beq.n	80872 <UART_Handler+0x72>
	if ((uart_status & SR_ERROR_INTERRUPTS) != 0) {
   808ca:	f014 0fe0 	tst.w	r4, #224	; 0xe0
   808ce:	d0d0      	beq.n	80872 <UART_Handler+0x72>
		uart_reset_status(
   808d0:	4805      	ldr	r0, [pc, #20]	; (808e8 <UART_Handler+0xe8>)
   808d2:	4b10      	ldr	r3, [pc, #64]	; (80914 <UART_Handler+0x114>)
   808d4:	4798      	blx	r3
		if (tx_dma_control[uart_index].peripheral_access_sem != NULL) {
   808d6:	4b0c      	ldr	r3, [pc, #48]	; (80908 <UART_Handler+0x108>)
   808d8:	6858      	ldr	r0, [r3, #4]
   808da:	2800      	cmp	r0, #0
   808dc:	d0c9      	beq.n	80872 <UART_Handler+0x72>
			xSemaphoreGiveFromISR(
   808de:	a901      	add	r1, sp, #4
   808e0:	4b06      	ldr	r3, [pc, #24]	; (808fc <UART_Handler+0xfc>)
   808e2:	4798      	blx	r3
   808e4:	e7c5      	b.n	80872 <UART_Handler+0x72>
   808e6:	bf00      	nop
   808e8:	400e0800 	.word	0x400e0800
   808ec:	000820ef 	.word	0x000820ef
   808f0:	000820eb 	.word	0x000820eb
   808f4:	20070ca4 	.word	0x20070ca4
   808f8:	00080715 	.word	0x00080715
   808fc:	000842c9 	.word	0x000842c9
   80900:	e000ed04 	.word	0xe000ed04
   80904:	000820e7 	.word	0x000820e7
   80908:	20070cc0 	.word	0x20070cc0
   8090c:	0008a5dc 	.word	0x0008a5dc
   80910:	00085a0d 	.word	0x00085a0d
   80914:	000820f3 	.word	0x000820f3

00080918 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t usart_index,
		enum buffer_operations operation_performed)
{
   80918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8091a:	4604      	mov	r4, r0
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   8091c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80920:	4b31      	ldr	r3, [pc, #196]	; (809e8 <configure_rx_dma+0xd0>)
   80922:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80926:	699a      	ldr	r2, [r3, #24]
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
   80928:	689b      	ldr	r3, [r3, #8]
	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   8092a:	429a      	cmp	r2, r3
   8092c:	d021      	beq.n	80972 <configure_rx_dma+0x5a>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
   8092e:	429a      	cmp	r2, r3
   80930:	d939      	bls.n	809a6 <configure_rx_dma+0x8e>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   80932:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
   80936:	482c      	ldr	r0, [pc, #176]	; (809e8 <configure_rx_dma+0xd0>)
   80938:	eb00 0181 	add.w	r1, r0, r1, lsl #2
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   8093c:	1ad2      	subs	r2, r2, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   8093e:	60ca      	str	r2, [r1, #12]
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
   80940:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80944:	4928      	ldr	r1, [pc, #160]	; (809e8 <configure_rx_dma+0xd0>)
   80946:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   8094a:	68d1      	ldr	r1, [r2, #12]
   8094c:	440b      	add	r3, r1
   8094e:	6852      	ldr	r2, [r2, #4]
   80950:	4293      	cmp	r3, r2
   80952:	d819      	bhi.n	80988 <configure_rx_dma+0x70>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
   80954:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80958:	4a23      	ldr	r2, [pc, #140]	; (809e8 <configure_rx_dma+0xd0>)
   8095a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8095e:	68db      	ldr	r3, [r3, #12]
   80960:	bb53      	cbnz	r3, 809b8 <configure_rx_dma+0xa0>
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
   80962:	0124      	lsls	r4, r4, #4
		usart_disable_interrupt(
   80964:	f44f 7184 	mov.w	r1, #264	; 0x108
   80968:	4b20      	ldr	r3, [pc, #128]	; (809ec <configure_rx_dma+0xd4>)
   8096a:	5918      	ldr	r0, [r3, r4]
   8096c:	4b20      	ldr	r3, [pc, #128]	; (809f0 <configure_rx_dma+0xd8>)
   8096e:	4798      	blx	r3
   80970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (operation_performed == data_added) {
   80972:	b979      	cbnz	r1, 80994 <configure_rx_dma+0x7c>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
   80974:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80978:	491b      	ldr	r1, [pc, #108]	; (809e8 <configure_rx_dma+0xd0>)
   8097a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   8097e:	2100      	movs	r1, #0
   80980:	60d1      	str	r1, [r2, #12]
	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
   80982:	6852      	ldr	r2, [r2, #4]
   80984:	4293      	cmp	r3, r2
   80986:	d9ec      	bls.n	80962 <configure_rx_dma+0x4a>
   80988:	f240 2191 	movw	r1, #657	; 0x291
   8098c:	4819      	ldr	r0, [pc, #100]	; (809f4 <configure_rx_dma+0xdc>)
   8098e:	4b1a      	ldr	r3, [pc, #104]	; (809f8 <configure_rx_dma+0xe0>)
   80990:	4798      	blx	r3
   80992:	e7df      	b.n	80954 <configure_rx_dma+0x3c>
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   80994:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80998:	4913      	ldr	r1, [pc, #76]	; (809e8 <configure_rx_dma+0xd0>)
   8099a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   8099e:	6851      	ldr	r1, [r2, #4]
   809a0:	1ac9      	subs	r1, r1, r3
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   809a2:	60d1      	str	r1, [r2, #12]
   809a4:	e7cc      	b.n	80940 <configure_rx_dma+0x28>
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   809a6:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   809aa:	490f      	ldr	r1, [pc, #60]	; (809e8 <configure_rx_dma+0xd0>)
   809ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   809b0:	6851      	ldr	r1, [r2, #4]
   809b2:	1ac9      	subs	r1, r1, r3
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   809b4:	60d1      	str	r1, [r2, #12]
   809b6:	e7c3      	b.n	80940 <configure_rx_dma+0x28>
		pdc_rx_init(
   809b8:	4e0c      	ldr	r6, [pc, #48]	; (809ec <configure_rx_dma+0xd4>)
   809ba:	0125      	lsls	r5, r4, #4
   809bc:	1973      	adds	r3, r6, r5
   809be:	685f      	ldr	r7, [r3, #4]
   809c0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   809c4:	eb02 0184 	add.w	r1, r2, r4, lsl #2
   809c8:	2200      	movs	r2, #0
   809ca:	3108      	adds	r1, #8
   809cc:	4638      	mov	r0, r7
   809ce:	4b0b      	ldr	r3, [pc, #44]	; (809fc <configure_rx_dma+0xe4>)
   809d0:	4798      	blx	r3
		pdc_enable_transfer(
   809d2:	2101      	movs	r1, #1
   809d4:	4638      	mov	r0, r7
   809d6:	4b0a      	ldr	r3, [pc, #40]	; (80a00 <configure_rx_dma+0xe8>)
   809d8:	4798      	blx	r3
		usart_enable_interrupt(
   809da:	f44f 7184 	mov.w	r1, #264	; 0x108
   809de:	5970      	ldr	r0, [r6, r5]
   809e0:	4b08      	ldr	r3, [pc, #32]	; (80a04 <configure_rx_dma+0xec>)
   809e2:	4798      	blx	r3
   809e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   809e6:	bf00      	nop
   809e8:	20070cc8 	.word	0x20070cc8
   809ec:	0008a61c 	.word	0x0008a61c
   809f0:	000834d1 	.word	0x000834d1
   809f4:	0008a65c 	.word	0x0008a65c
   809f8:	00085a0d 	.word	0x00085a0d
   809fc:	00081d79 	.word	0x00081d79
   80a00:	00081d91 	.word	0x00081d91
   80a04:	000834cd 	.word	0x000834cd

00080a08 <local_usart_handler>:
/*
 * For internal use only.
 * A common USART interrupt handler that is called for all USART peripherals.
 */
static void local_usart_handler(const portBASE_TYPE usart_index)
{
   80a08:	b570      	push	{r4, r5, r6, lr}
   80a0a:	b082      	sub	sp, #8
   80a0c:	4604      	mov	r4, r0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
   80a0e:	2300      	movs	r3, #0
   80a10:	9301      	str	r3, [sp, #4]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
   80a12:	0103      	lsls	r3, r0, #4
   80a14:	4a47      	ldr	r2, [pc, #284]	; (80b34 <local_usart_handler+0x12c>)
   80a16:	58d6      	ldr	r6, [r2, r3]
	usart_status = usart_get_status(
   80a18:	4630      	mov	r0, r6
   80a1a:	4b47      	ldr	r3, [pc, #284]	; (80b38 <local_usart_handler+0x130>)
   80a1c:	4798      	blx	r3
   80a1e:	4605      	mov	r5, r0
	usart_status &= usart_get_interrupt_mask(
   80a20:	4630      	mov	r0, r6
   80a22:	4b46      	ldr	r3, [pc, #280]	; (80b3c <local_usart_handler+0x134>)
   80a24:	4798      	blx	r3
   80a26:	4005      	ands	r5, r0
			all_usart_definitions[usart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
   80a28:	f015 0f10 	tst.w	r5, #16
   80a2c:	d145      	bne.n	80aba <local_usart_handler+0xb2>
					tx_dma_control[usart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_CSR_ENDRX) != 0UL) {
   80a2e:	f015 0f08 	tst.w	r5, #8
   80a32:	d030      	beq.n	80a96 <local_usart_handler+0x8e>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
   80a34:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80a38:	4a41      	ldr	r2, [pc, #260]	; (80b40 <local_usart_handler+0x138>)
   80a3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80a3e:	699b      	ldr	r3, [r3, #24]
   80a40:	2b00      	cmp	r3, #0
   80a42:	d04f      	beq.n	80ae4 <local_usart_handler+0xdc>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   80a44:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80a48:	4a3d      	ldr	r2, [pc, #244]	; (80b40 <local_usart_handler+0x138>)
   80a4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80a4e:	699b      	ldr	r3, [r3, #24]
   80a50:	2b01      	cmp	r3, #1
   80a52:	d04d      	beq.n	80af0 <local_usart_handler+0xe8>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
   80a54:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80a58:	4a39      	ldr	r2, [pc, #228]	; (80b40 <local_usart_handler+0x138>)
   80a5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80a5e:	689a      	ldr	r2, [r3, #8]
   80a60:	68d9      	ldr	r1, [r3, #12]
   80a62:	440a      	add	r2, r1
   80a64:	609a      	str	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
   80a66:	685b      	ldr	r3, [r3, #4]
   80a68:	429a      	cmp	r2, r3
   80a6a:	d306      	bcc.n	80a7a <local_usart_handler+0x72>
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
   80a6c:	4a34      	ldr	r2, [pc, #208]	; (80b40 <local_usart_handler+0x138>)
   80a6e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80a72:	009b      	lsls	r3, r3, #2
   80a74:	18d1      	adds	r1, r2, r3
   80a76:	58d3      	ldr	r3, [r2, r3]
   80a78:	608b      	str	r3, [r1, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(usart_index, data_added);
   80a7a:	2100      	movs	r1, #0
   80a7c:	4620      	mov	r0, r4
   80a7e:	4b31      	ldr	r3, [pc, #196]	; (80b44 <local_usart_handler+0x13c>)
   80a80:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80a82:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80a86:	4a2e      	ldr	r2, [pc, #184]	; (80b40 <local_usart_handler+0x138>)
   80a88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80a8c:	6918      	ldr	r0, [r3, #16]
   80a8e:	b110      	cbz	r0, 80a96 <local_usart_handler+0x8e>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
   80a90:	a901      	add	r1, sp, #4
   80a92:	4b2d      	ldr	r3, [pc, #180]	; (80b48 <local_usart_handler+0x140>)
   80a94:	4798      	blx	r3
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_IER_TIMEOUT) != 0UL) {
   80a96:	f415 7f80 	tst.w	r5, #256	; 0x100
   80a9a:	d12f      	bne.n	80afc <local_usart_handler+0xf4>
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
   80a9c:	f015 0fe0 	tst.w	r5, #224	; 0xe0
   80aa0:	d13b      	bne.n	80b1a <local_usart_handler+0x112>
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
   80aa2:	9b01      	ldr	r3, [sp, #4]
   80aa4:	b13b      	cbz	r3, 80ab6 <local_usart_handler+0xae>
   80aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80aaa:	4b28      	ldr	r3, [pc, #160]	; (80b4c <local_usart_handler+0x144>)
   80aac:	601a      	str	r2, [r3, #0]
   80aae:	f3bf 8f4f 	dsb	sy
   80ab2:	f3bf 8f6f 	isb	sy
}
   80ab6:	b002      	add	sp, #8
   80ab8:	bd70      	pop	{r4, r5, r6, pc}
		usart_disable_interrupt(
   80aba:	2110      	movs	r1, #16
   80abc:	4630      	mov	r0, r6
   80abe:	4b24      	ldr	r3, [pc, #144]	; (80b50 <local_usart_handler+0x148>)
   80ac0:	4798      	blx	r3
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
   80ac2:	4b24      	ldr	r3, [pc, #144]	; (80b54 <local_usart_handler+0x14c>)
   80ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   80ac8:	6858      	ldr	r0, [r3, #4]
   80aca:	b110      	cbz	r0, 80ad2 <local_usart_handler+0xca>
			xSemaphoreGiveFromISR(
   80acc:	a901      	add	r1, sp, #4
   80ace:	4b1e      	ldr	r3, [pc, #120]	; (80b48 <local_usart_handler+0x140>)
   80ad0:	4798      	blx	r3
		if (tx_dma_control[usart_index].transaction_complete_notification_semaphore != NULL) {
   80ad2:	4b20      	ldr	r3, [pc, #128]	; (80b54 <local_usart_handler+0x14c>)
   80ad4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   80ad8:	2800      	cmp	r0, #0
   80ada:	d0a8      	beq.n	80a2e <local_usart_handler+0x26>
			xSemaphoreGiveFromISR(
   80adc:	a901      	add	r1, sp, #4
   80ade:	4b1a      	ldr	r3, [pc, #104]	; (80b48 <local_usart_handler+0x140>)
   80ae0:	4798      	blx	r3
   80ae2:	e7a4      	b.n	80a2e <local_usart_handler+0x26>
		configASSERT(rx_buffer_definition->next_byte_to_read);
   80ae4:	f240 21d5 	movw	r1, #725	; 0x2d5
   80ae8:	481b      	ldr	r0, [pc, #108]	; (80b58 <local_usart_handler+0x150>)
   80aea:	4b1c      	ldr	r3, [pc, #112]	; (80b5c <local_usart_handler+0x154>)
   80aec:	4798      	blx	r3
   80aee:	e7a9      	b.n	80a44 <local_usart_handler+0x3c>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   80af0:	f240 21d7 	movw	r1, #727	; 0x2d7
   80af4:	4818      	ldr	r0, [pc, #96]	; (80b58 <local_usart_handler+0x150>)
   80af6:	4b19      	ldr	r3, [pc, #100]	; (80b5c <local_usart_handler+0x154>)
   80af8:	4798      	blx	r3
   80afa:	e7ab      	b.n	80a54 <local_usart_handler+0x4c>
		usart_start_rx_timeout(all_usart_definitions[usart_index].peripheral_base_address);
   80afc:	4630      	mov	r0, r6
   80afe:	4b18      	ldr	r3, [pc, #96]	; (80b60 <local_usart_handler+0x158>)
   80b00:	4798      	blx	r3
		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80b02:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80b06:	4a0e      	ldr	r2, [pc, #56]	; (80b40 <local_usart_handler+0x138>)
   80b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80b0c:	6918      	ldr	r0, [r3, #16]
   80b0e:	2800      	cmp	r0, #0
   80b10:	d0c4      	beq.n	80a9c <local_usart_handler+0x94>
			xSemaphoreGiveFromISR(
   80b12:	a901      	add	r1, sp, #4
   80b14:	4b0c      	ldr	r3, [pc, #48]	; (80b48 <local_usart_handler+0x140>)
   80b16:	4798      	blx	r3
   80b18:	e7c0      	b.n	80a9c <local_usart_handler+0x94>
		usart_reset_status(
   80b1a:	4630      	mov	r0, r6
   80b1c:	4b11      	ldr	r3, [pc, #68]	; (80b64 <local_usart_handler+0x15c>)
   80b1e:	4798      	blx	r3
		if (tx_dma_control[usart_index].peripheral_access_sem != NULL) {
   80b20:	4b0c      	ldr	r3, [pc, #48]	; (80b54 <local_usart_handler+0x14c>)
   80b22:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   80b26:	6860      	ldr	r0, [r4, #4]
   80b28:	2800      	cmp	r0, #0
   80b2a:	d0ba      	beq.n	80aa2 <local_usart_handler+0x9a>
			xSemaphoreGiveFromISR(
   80b2c:	a901      	add	r1, sp, #4
   80b2e:	4b06      	ldr	r3, [pc, #24]	; (80b48 <local_usart_handler+0x140>)
   80b30:	4798      	blx	r3
   80b32:	e7b6      	b.n	80aa2 <local_usart_handler+0x9a>
   80b34:	0008a61c 	.word	0x0008a61c
   80b38:	000834d9 	.word	0x000834d9
   80b3c:	000834d5 	.word	0x000834d5
   80b40:	20070cc8 	.word	0x20070cc8
   80b44:	00080919 	.word	0x00080919
   80b48:	000842c9 	.word	0x000842c9
   80b4c:	e000ed04 	.word	0xe000ed04
   80b50:	000834d1 	.word	0x000834d1
   80b54:	20070d38 	.word	0x20070d38
   80b58:	0008a65c 	.word	0x0008a65c
   80b5c:	00085a0d 	.word	0x00085a0d
   80b60:	000834e5 	.word	0x000834e5
   80b64:	000834dd 	.word	0x000834dd

00080b68 <freertos_usart_serial_init>:
{
   80b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80b6c:	b082      	sub	sp, #8
   80b6e:	4605      	mov	r5, r0
   80b70:	4688      	mov	r8, r1
   80b72:	4616      	mov	r6, r2
	const enum peripheral_operation_mode valid_operating_modes[] = {USART_RS232};
   80b74:	af02      	add	r7, sp, #8
   80b76:	2300      	movs	r3, #0
   80b78:	f807 3d04 	strb.w	r3, [r7, #-4]!
	usart_index = get_pdc_peripheral_details(all_usart_definitions,
   80b7c:	4602      	mov	r2, r0
   80b7e:	2104      	movs	r1, #4
   80b80:	485c      	ldr	r0, [pc, #368]	; (80cf4 <freertos_usart_serial_init+0x18c>)
   80b82:	4b5d      	ldr	r3, [pc, #372]	; (80cf8 <freertos_usart_serial_init+0x190>)
   80b84:	4798      	blx	r3
   80b86:	4604      	mov	r4, r0
	is_valid_operating_mode = check_requested_operating_mode(
   80b88:	2201      	movs	r2, #1
   80b8a:	4639      	mov	r1, r7
   80b8c:	7b30      	ldrb	r0, [r6, #12]
   80b8e:	4b5b      	ldr	r3, [pc, #364]	; (80cfc <freertos_usart_serial_init+0x194>)
   80b90:	4798      	blx	r3
	if ((usart_index < MAX_USARTS) && (is_valid_operating_mode == true)) {
   80b92:	2c03      	cmp	r4, #3
   80b94:	f300 80a9 	bgt.w	80cea <freertos_usart_serial_init+0x182>
   80b98:	2800      	cmp	r0, #0
   80b9a:	f000 80a8 	beq.w	80cee <freertos_usart_serial_init+0x186>
		configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read == NULL);
   80b9e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80ba2:	4a57      	ldr	r2, [pc, #348]	; (80d00 <freertos_usart_serial_init+0x198>)
   80ba4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80ba8:	699b      	ldr	r3, [r3, #24]
   80baa:	b11b      	cbz	r3, 80bb4 <freertos_usart_serial_init+0x4c>
   80bac:	21dd      	movs	r1, #221	; 0xdd
   80bae:	4855      	ldr	r0, [pc, #340]	; (80d04 <freertos_usart_serial_init+0x19c>)
   80bb0:	4b55      	ldr	r3, [pc, #340]	; (80d08 <freertos_usart_serial_init+0x1a0>)
   80bb2:	4798      	blx	r3
		usart_disable_tx(p_usart);
   80bb4:	4628      	mov	r0, r5
   80bb6:	4b55      	ldr	r3, [pc, #340]	; (80d0c <freertos_usart_serial_init+0x1a4>)
   80bb8:	4798      	blx	r3
		usart_disable_rx(p_usart);
   80bba:	4628      	mov	r0, r5
   80bbc:	4b54      	ldr	r3, [pc, #336]	; (80d10 <freertos_usart_serial_init+0x1a8>)
   80bbe:	4798      	blx	r3
		pdc_disable_transfer(all_usart_definitions[usart_index].pdc_base_address,
   80bc0:	4f4c      	ldr	r7, [pc, #304]	; (80cf4 <freertos_usart_serial_init+0x18c>)
   80bc2:	eb07 1704 	add.w	r7, r7, r4, lsl #4
   80bc6:	f8d7 9004 	ldr.w	r9, [r7, #4]
   80bca:	f240 2102 	movw	r1, #514	; 0x202
   80bce:	4648      	mov	r0, r9
   80bd0:	4b50      	ldr	r3, [pc, #320]	; (80d14 <freertos_usart_serial_init+0x1ac>)
   80bd2:	4798      	blx	r3
		pmc_enable_periph_clk(
   80bd4:	68b8      	ldr	r0, [r7, #8]
   80bd6:	4b50      	ldr	r3, [pc, #320]	; (80d18 <freertos_usart_serial_init+0x1b0>)
   80bd8:	4798      	blx	r3
		switch (freertos_driver_parameters->operation_mode) {
   80bda:	7b33      	ldrb	r3, [r6, #12]
   80bdc:	2b00      	cmp	r3, #0
   80bde:	d064      	beq.n	80caa <freertos_usart_serial_init+0x142>
		usart_disable_interrupt(p_usart, MASK_ALL_INTERRUPTS);
   80be0:	f04f 31ff 	mov.w	r1, #4294967295
   80be4:	4628      	mov	r0, r5
   80be6:	4b4d      	ldr	r3, [pc, #308]	; (80d1c <freertos_usart_serial_init+0x1b4>)
   80be8:	4798      	blx	r3
		create_peripheral_control_semaphores(
   80bea:	2200      	movs	r2, #0
   80bec:	494c      	ldr	r1, [pc, #304]	; (80d20 <freertos_usart_serial_init+0x1b8>)
   80bee:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   80bf2:	7b70      	ldrb	r0, [r6, #13]
   80bf4:	4b4b      	ldr	r3, [pc, #300]	; (80d24 <freertos_usart_serial_init+0x1bc>)
   80bf6:	4798      	blx	r3
		if (freertos_driver_parameters->receive_buffer != NULL) {
   80bf8:	6833      	ldr	r3, [r6, #0]
   80bfa:	2b00      	cmp	r3, #0
   80bfc:	d06d      	beq.n	80cda <freertos_usart_serial_init+0x172>
					xSemaphoreCreateCounting(portMAX_DELAY, 0);
   80bfe:	2100      	movs	r1, #0
   80c00:	f04f 30ff 	mov.w	r0, #4294967295
   80c04:	4b48      	ldr	r3, [pc, #288]	; (80d28 <freertos_usart_serial_init+0x1c0>)
   80c06:	4798      	blx	r3
			rx_buffer_definitions[usart_index].rx_event_semaphore =
   80c08:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80c0c:	4a3c      	ldr	r2, [pc, #240]	; (80d00 <freertos_usart_serial_init+0x198>)
   80c0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80c12:	6118      	str	r0, [r3, #16]
			configASSERT(rx_buffer_definitions[usart_index].rx_event_semaphore);
   80c14:	2800      	cmp	r0, #0
   80c16:	d04e      	beq.n	80cb6 <freertos_usart_serial_init+0x14e>
			usart_set_rx_timeout(p_usart,
   80c18:	f8d8 1000 	ldr.w	r1, [r8]
   80c1c:	4b43      	ldr	r3, [pc, #268]	; (80d2c <freertos_usart_serial_init+0x1c4>)
   80c1e:	fba3 3101 	umull	r3, r1, r3, r1
   80c22:	0989      	lsrs	r1, r1, #6
   80c24:	4628      	mov	r0, r5
   80c26:	4b42      	ldr	r3, [pc, #264]	; (80d30 <freertos_usart_serial_init+0x1c8>)
   80c28:	4798      	blx	r3
			usart_start_rx_timeout(p_usart);
   80c2a:	4628      	mov	r0, r5
   80c2c:	4b41      	ldr	r3, [pc, #260]	; (80d34 <freertos_usart_serial_init+0x1cc>)
   80c2e:	4798      	blx	r3
			rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_addr =
   80c30:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80d00 <freertos_usart_serial_init+0x198>
   80c34:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
   80c38:	ea4f 0888 	mov.w	r8, r8, lsl #2
   80c3c:	eb0a 0708 	add.w	r7, sl, r8
   80c40:	6833      	ldr	r3, [r6, #0]
   80c42:	60bb      	str	r3, [r7, #8]
					freertos_driver_parameters->receive_buffer_size;
   80c44:	6873      	ldr	r3, [r6, #4]
			rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_size =
   80c46:	60fb      	str	r3, [r7, #12]
			pdc_rx_init(
   80c48:	4639      	mov	r1, r7
   80c4a:	2200      	movs	r2, #0
   80c4c:	3108      	adds	r1, #8
   80c4e:	4648      	mov	r0, r9
   80c50:	4b39      	ldr	r3, [pc, #228]	; (80d38 <freertos_usart_serial_init+0x1d0>)
   80c52:	4798      	blx	r3
					freertos_driver_parameters->receive_buffer;
   80c54:	6833      	ldr	r3, [r6, #0]
			rx_buffer_definitions[usart_index].next_byte_to_read =
   80c56:	61bb      	str	r3, [r7, #24]
					rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_addr;
   80c58:	68ba      	ldr	r2, [r7, #8]
			rx_buffer_definitions[usart_index].rx_buffer_start_address =
   80c5a:	f84a 2008 	str.w	r2, [sl, r8]
					rx_buffer_definitions[usart_index].rx_buffer_start_address +
   80c5e:	6873      	ldr	r3, [r6, #4]
   80c60:	4413      	add	r3, r2
			rx_buffer_definitions[usart_index].past_rx_buffer_end_address =
   80c62:	607b      	str	r3, [r7, #4]
			if ((freertos_driver_parameters->options_flags &
   80c64:	7b73      	ldrb	r3, [r6, #13]
   80c66:	f013 0f02 	tst.w	r3, #2
   80c6a:	d12a      	bne.n	80cc2 <freertos_usart_serial_init+0x15a>
			usart_enable_interrupt(p_usart, US_IER_ENDRX | US_IER_TIMEOUT);
   80c6c:	f44f 7184 	mov.w	r1, #264	; 0x108
   80c70:	4628      	mov	r0, r5
   80c72:	4b32      	ldr	r3, [pc, #200]	; (80d3c <freertos_usart_serial_init+0x1d4>)
   80c74:	4798      	blx	r3
			pdc_enable_transfer(
   80c76:	2101      	movs	r1, #1
   80c78:	4648      	mov	r0, r9
   80c7a:	4b31      	ldr	r3, [pc, #196]	; (80d40 <freertos_usart_serial_init+0x1d8>)
   80c7c:	4798      	blx	r3
		configure_interrupt_controller(all_usart_definitions[usart_index].peripheral_irq,
   80c7e:	4f1d      	ldr	r7, [pc, #116]	; (80cf4 <freertos_usart_serial_init+0x18c>)
   80c80:	0124      	lsls	r4, r4, #4
   80c82:	193b      	adds	r3, r7, r4
   80c84:	68b1      	ldr	r1, [r6, #8]
   80c86:	f993 000c 	ldrsb.w	r0, [r3, #12]
   80c8a:	4b2e      	ldr	r3, [pc, #184]	; (80d44 <freertos_usart_serial_init+0x1dc>)
   80c8c:	4798      	blx	r3
		usart_enable_interrupt(
   80c8e:	21e0      	movs	r1, #224	; 0xe0
   80c90:	5938      	ldr	r0, [r7, r4]
   80c92:	4b2a      	ldr	r3, [pc, #168]	; (80d3c <freertos_usart_serial_init+0x1d4>)
   80c94:	4798      	blx	r3
		usart_enable_tx(p_usart);
   80c96:	4628      	mov	r0, r5
   80c98:	4b2b      	ldr	r3, [pc, #172]	; (80d48 <freertos_usart_serial_init+0x1e0>)
   80c9a:	4798      	blx	r3
		usart_enable_rx(p_usart);
   80c9c:	4628      	mov	r0, r5
   80c9e:	4b2b      	ldr	r3, [pc, #172]	; (80d4c <freertos_usart_serial_init+0x1e4>)
   80ca0:	4798      	blx	r3
		return_value = (freertos_usart_if) p_usart;
   80ca2:	4628      	mov	r0, r5
}
   80ca4:	b002      	add	sp, #8
   80ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			usart_init_rs232(p_usart, uart_parameters,
   80caa:	4a29      	ldr	r2, [pc, #164]	; (80d50 <freertos_usart_serial_init+0x1e8>)
   80cac:	4641      	mov	r1, r8
   80cae:	4628      	mov	r0, r5
   80cb0:	4b28      	ldr	r3, [pc, #160]	; (80d54 <freertos_usart_serial_init+0x1ec>)
   80cb2:	4798      	blx	r3
			break;
   80cb4:	e794      	b.n	80be0 <freertos_usart_serial_init+0x78>
			configASSERT(rx_buffer_definitions[usart_index].rx_event_semaphore);
   80cb6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   80cba:	4812      	ldr	r0, [pc, #72]	; (80d04 <freertos_usart_serial_init+0x19c>)
   80cbc:	4b12      	ldr	r3, [pc, #72]	; (80d08 <freertos_usart_serial_init+0x1a0>)
   80cbe:	4798      	blx	r3
   80cc0:	e7aa      	b.n	80c18 <freertos_usart_serial_init+0xb0>
					xSemaphoreCreateMutex();
   80cc2:	2001      	movs	r0, #1
   80cc4:	4b24      	ldr	r3, [pc, #144]	; (80d58 <freertos_usart_serial_init+0x1f0>)
   80cc6:	4798      	blx	r3
				rx_buffer_definitions[usart_index].rx_access_mutex =
   80cc8:	6178      	str	r0, [r7, #20]
				configASSERT(rx_buffer_definitions[usart_index].rx_access_mutex);
   80cca:	2800      	cmp	r0, #0
   80ccc:	d1ce      	bne.n	80c6c <freertos_usart_serial_init+0x104>
   80cce:	f44f 71a0 	mov.w	r1, #320	; 0x140
   80cd2:	480c      	ldr	r0, [pc, #48]	; (80d04 <freertos_usart_serial_init+0x19c>)
   80cd4:	4b0c      	ldr	r3, [pc, #48]	; (80d08 <freertos_usart_serial_init+0x1a0>)
   80cd6:	4798      	blx	r3
   80cd8:	e7c8      	b.n	80c6c <freertos_usart_serial_init+0x104>
			rx_buffer_definitions[usart_index].next_byte_to_read = RX_NOT_USED;
   80cda:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80cde:	4a08      	ldr	r2, [pc, #32]	; (80d00 <freertos_usart_serial_init+0x198>)
   80ce0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80ce4:	2201      	movs	r2, #1
   80ce6:	619a      	str	r2, [r3, #24]
   80ce8:	e7c9      	b.n	80c7e <freertos_usart_serial_init+0x116>
		return_value = NULL;
   80cea:	2000      	movs	r0, #0
   80cec:	e7da      	b.n	80ca4 <freertos_usart_serial_init+0x13c>
   80cee:	2000      	movs	r0, #0
	return return_value;
   80cf0:	e7d8      	b.n	80ca4 <freertos_usart_serial_init+0x13c>
   80cf2:	bf00      	nop
   80cf4:	0008a61c 	.word	0x0008a61c
   80cf8:	000801c5 	.word	0x000801c5
   80cfc:	000801ef 	.word	0x000801ef
   80d00:	20070cc8 	.word	0x20070cc8
   80d04:	0008a65c 	.word	0x0008a65c
   80d08:	00085a0d 	.word	0x00085a0d
   80d0c:	000834b7 	.word	0x000834b7
   80d10:	000834c3 	.word	0x000834c3
   80d14:	00081d9d 	.word	0x00081d9d
   80d18:	000820a5 	.word	0x000820a5
   80d1c:	000834d1 	.word	0x000834d1
   80d20:	20070d38 	.word	0x20070d38
   80d24:	00080225 	.word	0x00080225
   80d28:	00083fdd 	.word	0x00083fdd
   80d2c:	51eb851f 	.word	0x51eb851f
   80d30:	000834c9 	.word	0x000834c9
   80d34:	000834e5 	.word	0x000834e5
   80d38:	00081d79 	.word	0x00081d79
   80d3c:	000834cd 	.word	0x000834cd
   80d40:	00081d91 	.word	0x00081d91
   80d44:	000802f9 	.word	0x000802f9
   80d48:	000834b1 	.word	0x000834b1
   80d4c:	000834bd 	.word	0x000834bd
   80d50:	0501bd00 	.word	0x0501bd00
   80d54:	0008345d 	.word	0x0008345d
   80d58:	000841cd 	.word	0x000841cd

00080d5c <freertos_usart_write_packet_async>:
{
   80d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d60:	b084      	sub	sp, #16
   80d62:	4605      	mov	r5, r0
   80d64:	460e      	mov	r6, r1
   80d66:	4617      	mov	r7, r2
   80d68:	9303      	str	r3, [sp, #12]
	usart_index = get_pdc_peripheral_details(all_usart_definitions,
   80d6a:	4602      	mov	r2, r0
   80d6c:	2104      	movs	r1, #4
   80d6e:	4817      	ldr	r0, [pc, #92]	; (80dcc <freertos_usart_write_packet_async+0x70>)
   80d70:	4b17      	ldr	r3, [pc, #92]	; (80dd0 <freertos_usart_write_packet_async+0x74>)
   80d72:	4798      	blx	r3
	if (usart_index < MAX_USARTS) {
   80d74:	2803      	cmp	r0, #3
   80d76:	dc26      	bgt.n	80dc6 <freertos_usart_write_packet_async+0x6a>
   80d78:	4680      	mov	r8, r0
		return_value = freertos_obtain_peripheral_access_semphore(
   80d7a:	4c16      	ldr	r4, [pc, #88]	; (80dd4 <freertos_usart_write_packet_async+0x78>)
   80d7c:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   80d80:	a903      	add	r1, sp, #12
   80d82:	4620      	mov	r0, r4
   80d84:	4b14      	ldr	r3, [pc, #80]	; (80dd8 <freertos_usart_write_packet_async+0x7c>)
   80d86:	4798      	blx	r3
		if (return_value == STATUS_OK) {
   80d88:	4603      	mov	r3, r0
   80d8a:	b118      	cbz	r0, 80d94 <freertos_usart_write_packet_async+0x38>
}
   80d8c:	4618      	mov	r0, r3
   80d8e:	b004      	add	sp, #16
   80d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			freertos_start_pdc_tx(&(tx_dma_control[usart_index]),
   80d94:	4b0d      	ldr	r3, [pc, #52]	; (80dcc <freertos_usart_write_packet_async+0x70>)
   80d96:	eb03 1808 	add.w	r8, r3, r8, lsl #4
   80d9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   80d9e:	2201      	movs	r2, #1
   80da0:	9201      	str	r2, [sp, #4]
   80da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80da4:	9200      	str	r2, [sp, #0]
   80da6:	463a      	mov	r2, r7
   80da8:	4631      	mov	r1, r6
   80daa:	4620      	mov	r0, r4
   80dac:	4e0b      	ldr	r6, [pc, #44]	; (80ddc <freertos_usart_write_packet_async+0x80>)
   80dae:	47b0      	blx	r6
			usart_enable_interrupt(usart_base, US_IER_ENDTX);
   80db0:	2110      	movs	r1, #16
   80db2:	4628      	mov	r0, r5
   80db4:	4b0a      	ldr	r3, [pc, #40]	; (80de0 <freertos_usart_write_packet_async+0x84>)
   80db6:	4798      	blx	r3
			return_value = freertos_optionally_wait_transfer_completion(
   80db8:	9a03      	ldr	r2, [sp, #12]
   80dba:	990a      	ldr	r1, [sp, #40]	; 0x28
   80dbc:	4620      	mov	r0, r4
   80dbe:	4b09      	ldr	r3, [pc, #36]	; (80de4 <freertos_usart_write_packet_async+0x88>)
   80dc0:	4798      	blx	r3
   80dc2:	4603      	mov	r3, r0
   80dc4:	e7e2      	b.n	80d8c <freertos_usart_write_packet_async+0x30>
		return_value = ERR_INVALID_ARG;
   80dc6:	f06f 0307 	mvn.w	r3, #7
   80dca:	e7df      	b.n	80d8c <freertos_usart_write_packet_async+0x30>
   80dcc:	0008a61c 	.word	0x0008a61c
   80dd0:	000801c5 	.word	0x000801c5
   80dd4:	20070d38 	.word	0x20070d38
   80dd8:	000803e1 	.word	0x000803e1
   80ddc:	0008042d 	.word	0x0008042d
   80de0:	000834cd 	.word	0x000834cd
   80de4:	000804a9 	.word	0x000804a9

00080de8 <freertos_usart_serial_read_packet>:
{
   80de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80dec:	b087      	sub	sp, #28
   80dee:	460f      	mov	r7, r1
   80df0:	4616      	mov	r6, r2
   80df2:	9303      	str	r3, [sp, #12]
	usart_index = get_pdc_peripheral_details(all_usart_definitions,
   80df4:	4602      	mov	r2, r0
   80df6:	2104      	movs	r1, #4
   80df8:	484b      	ldr	r0, [pc, #300]	; (80f28 <freertos_usart_serial_read_packet+0x140>)
   80dfa:	4b4c      	ldr	r3, [pc, #304]	; (80f2c <freertos_usart_serial_read_packet+0x144>)
   80dfc:	4798      	blx	r3
   80dfe:	4604      	mov	r4, r0
	configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read);
   80e00:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80e04:	4b4a      	ldr	r3, [pc, #296]	; (80f30 <freertos_usart_serial_read_packet+0x148>)
   80e06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80e0a:	699b      	ldr	r3, [r3, #24]
   80e0c:	b1ab      	cbz	r3, 80e3a <freertos_usart_serial_read_packet+0x52>
	configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read !=
   80e0e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80e12:	4a47      	ldr	r2, [pc, #284]	; (80f30 <freertos_usart_serial_read_packet+0x148>)
   80e14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80e18:	699b      	ldr	r3, [r3, #24]
   80e1a:	2b01      	cmp	r3, #1
   80e1c:	d013      	beq.n	80e46 <freertos_usart_serial_read_packet+0x5e>
	if (usart_index < MAX_USARTS) {
   80e1e:	2c03      	cmp	r4, #3
   80e20:	dc7c      	bgt.n	80f1c <freertos_usart_serial_read_packet+0x134>
				(rx_buffer_definitions[usart_index].past_rx_buffer_end_address
   80e22:	4943      	ldr	r1, [pc, #268]	; (80f30 <freertos_usart_serial_read_packet+0x148>)
   80e24:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80e28:	009b      	lsls	r3, r3, #2
   80e2a:	18ca      	adds	r2, r1, r3
				- rx_buffer_definitions[usart_index].rx_buffer_start_address)) {
   80e2c:	6852      	ldr	r2, [r2, #4]
   80e2e:	58cb      	ldr	r3, [r1, r3]
   80e30:	1ad3      	subs	r3, r2, r3
		if (len <=
   80e32:	42b3      	cmp	r3, r6
   80e34:	d20d      	bcs.n	80e52 <freertos_usart_serial_read_packet+0x6a>
	uint32_t bytes_read = 0;
   80e36:	2500      	movs	r5, #0
	return bytes_read;
   80e38:	e071      	b.n	80f1e <freertos_usart_serial_read_packet+0x136>
	configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read);
   80e3a:	f240 2116 	movw	r1, #534	; 0x216
   80e3e:	483d      	ldr	r0, [pc, #244]	; (80f34 <freertos_usart_serial_read_packet+0x14c>)
   80e40:	4b3d      	ldr	r3, [pc, #244]	; (80f38 <freertos_usart_serial_read_packet+0x150>)
   80e42:	4798      	blx	r3
   80e44:	e7e3      	b.n	80e0e <freertos_usart_serial_read_packet+0x26>
	configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read !=
   80e46:	f44f 7106 	mov.w	r1, #536	; 0x218
   80e4a:	483a      	ldr	r0, [pc, #232]	; (80f34 <freertos_usart_serial_read_packet+0x14c>)
   80e4c:	4b3a      	ldr	r3, [pc, #232]	; (80f38 <freertos_usart_serial_read_packet+0x150>)
   80e4e:	4798      	blx	r3
   80e50:	e7e5      	b.n	80e1e <freertos_usart_serial_read_packet+0x36>
			vTaskSetTimeOutState(&time_out_definition);
   80e52:	a804      	add	r0, sp, #16
   80e54:	4b39      	ldr	r3, [pc, #228]	; (80f3c <freertos_usart_serial_read_packet+0x154>)
   80e56:	4798      	blx	r3
			if (rx_buffer_definitions[usart_index].rx_access_mutex != NULL) {
   80e58:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80e5c:	4a34      	ldr	r2, [pc, #208]	; (80f30 <freertos_usart_serial_read_packet+0x148>)
   80e5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80e62:	6958      	ldr	r0, [r3, #20]
   80e64:	b160      	cbz	r0, 80e80 <freertos_usart_serial_read_packet+0x98>
				attempt_read = xSemaphoreTake(
   80e66:	9903      	ldr	r1, [sp, #12]
   80e68:	4b35      	ldr	r3, [pc, #212]	; (80f40 <freertos_usart_serial_read_packet+0x158>)
   80e6a:	4798      	blx	r3
				if (attempt_read == pdTRUE) {
   80e6c:	2801      	cmp	r0, #1
   80e6e:	d001      	beq.n	80e74 <freertos_usart_serial_read_packet+0x8c>
	uint32_t bytes_read = 0;
   80e70:	2500      	movs	r5, #0
   80e72:	e054      	b.n	80f1e <freertos_usart_serial_read_packet+0x136>
					if (xTaskCheckForTimeOut(&time_out_definition,
   80e74:	a903      	add	r1, sp, #12
   80e76:	a804      	add	r0, sp, #16
   80e78:	4b32      	ldr	r3, [pc, #200]	; (80f44 <freertos_usart_serial_read_packet+0x15c>)
   80e7a:	4798      	blx	r3
   80e7c:	2801      	cmp	r0, #1
   80e7e:	d013      	beq.n	80ea8 <freertos_usart_serial_read_packet+0xc0>
   80e80:	9402      	str	r4, [sp, #8]
					bytes_read += freertos_copy_bytes_from_pdc_circular_buffer(
   80e82:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   80e86:	4a2a      	ldr	r2, [pc, #168]	; (80f30 <freertos_usart_serial_read_packet+0x148>)
   80e88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80e8c:	9301      	str	r3, [sp, #4]
   80e8e:	2500      	movs	r5, #0
					xSemaphoreTake(rx_buffer_definitions[usart_index].rx_event_semaphore,
   80e90:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
   80e94:	eb02 0888 	add.w	r8, r2, r8, lsl #2
   80e98:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80f40 <freertos_usart_serial_read_packet+0x158>
							all_usart_definitions[usart_index].pdc_base_address->PERIPH_RPR,
   80e9c:	4b22      	ldr	r3, [pc, #136]	; (80f28 <freertos_usart_serial_read_packet+0x140>)
   80e9e:	eb03 1904 	add.w	r9, r3, r4, lsl #4
					bytes_read += freertos_copy_bytes_from_pdc_circular_buffer(
   80ea2:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80f58 <freertos_usart_serial_read_packet+0x170>
   80ea6:	e014      	b.n	80ed2 <freertos_usart_serial_read_packet+0xea>
						xSemaphoreGive(rx_buffer_definitions[usart_index].rx_access_mutex);
   80ea8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   80eac:	4820      	ldr	r0, [pc, #128]	; (80f30 <freertos_usart_serial_read_packet+0x148>)
   80eae:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   80eb2:	2300      	movs	r3, #0
   80eb4:	461a      	mov	r2, r3
   80eb6:	4619      	mov	r1, r3
   80eb8:	6940      	ldr	r0, [r0, #20]
   80eba:	4c23      	ldr	r4, [pc, #140]	; (80f48 <freertos_usart_serial_read_packet+0x160>)
   80ebc:	47a0      	blx	r4
   80ebe:	e7d7      	b.n	80e70 <freertos_usart_serial_read_packet+0x88>
						taskEXIT_CRITICAL();
   80ec0:	4b22      	ldr	r3, [pc, #136]	; (80f4c <freertos_usart_serial_read_packet+0x164>)
   80ec2:	4798      	blx	r3
						&block_time_ticks) == pdFALSE));
   80ec4:	42ae      	cmp	r6, r5
   80ec6:	d91c      	bls.n	80f02 <freertos_usart_serial_read_packet+0x11a>
				} while ((bytes_read < len) && (xTaskCheckForTimeOut(
   80ec8:	a903      	add	r1, sp, #12
   80eca:	a804      	add	r0, sp, #16
   80ecc:	4b1d      	ldr	r3, [pc, #116]	; (80f44 <freertos_usart_serial_read_packet+0x15c>)
   80ece:	4798      	blx	r3
   80ed0:	b9b8      	cbnz	r0, 80f02 <freertos_usart_serial_read_packet+0x11a>
					xSemaphoreTake(rx_buffer_definitions[usart_index].rx_event_semaphore,
   80ed2:	9903      	ldr	r1, [sp, #12]
   80ed4:	f8d8 0010 	ldr.w	r0, [r8, #16]
   80ed8:	47d8      	blx	fp
							all_usart_definitions[usart_index].pdc_base_address->PERIPH_RPR,
   80eda:	f8d9 3004 	ldr.w	r3, [r9, #4]
					bytes_read += freertos_copy_bytes_from_pdc_circular_buffer(
   80ede:	6819      	ldr	r1, [r3, #0]
   80ee0:	1b73      	subs	r3, r6, r5
   80ee2:	197a      	adds	r2, r7, r5
   80ee4:	9801      	ldr	r0, [sp, #4]
   80ee6:	47d0      	blx	sl
					if (bytes_read > 0) {
   80ee8:	182d      	adds	r5, r5, r0
   80eea:	d0eb      	beq.n	80ec4 <freertos_usart_serial_read_packet+0xdc>
						taskENTER_CRITICAL();
   80eec:	4b18      	ldr	r3, [pc, #96]	; (80f50 <freertos_usart_serial_read_packet+0x168>)
   80eee:	4798      	blx	r3
							if(rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_size == 0UL) {
   80ef0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   80ef4:	2b00      	cmp	r3, #0
   80ef6:	d1e3      	bne.n	80ec0 <freertos_usart_serial_read_packet+0xd8>
								configure_rx_dma(usart_index, data_removed);
   80ef8:	2101      	movs	r1, #1
   80efa:	9802      	ldr	r0, [sp, #8]
   80efc:	4b15      	ldr	r3, [pc, #84]	; (80f54 <freertos_usart_serial_read_packet+0x16c>)
   80efe:	4798      	blx	r3
   80f00:	e7de      	b.n	80ec0 <freertos_usart_serial_read_packet+0xd8>
				if (rx_buffer_definitions[usart_index].rx_access_mutex != NULL) {
   80f02:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   80f06:	4b0a      	ldr	r3, [pc, #40]	; (80f30 <freertos_usart_serial_read_packet+0x148>)
   80f08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   80f0c:	6960      	ldr	r0, [r4, #20]
   80f0e:	b130      	cbz	r0, 80f1e <freertos_usart_serial_read_packet+0x136>
					xSemaphoreGive(rx_buffer_definitions[usart_index].rx_access_mutex);
   80f10:	2300      	movs	r3, #0
   80f12:	461a      	mov	r2, r3
   80f14:	4619      	mov	r1, r3
   80f16:	4c0c      	ldr	r4, [pc, #48]	; (80f48 <freertos_usart_serial_read_packet+0x160>)
   80f18:	47a0      	blx	r4
   80f1a:	e000      	b.n	80f1e <freertos_usart_serial_read_packet+0x136>
	uint32_t bytes_read = 0;
   80f1c:	2500      	movs	r5, #0
}
   80f1e:	4628      	mov	r0, r5
   80f20:	b007      	add	sp, #28
   80f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f26:	bf00      	nop
   80f28:	0008a61c 	.word	0x0008a61c
   80f2c:	000801c5 	.word	0x000801c5
   80f30:	20070cc8 	.word	0x20070cc8
   80f34:	0008a65c 	.word	0x0008a65c
   80f38:	00085a0d 	.word	0x00085a0d
   80f3c:	00085035 	.word	0x00085035
   80f40:	00084501 	.word	0x00084501
   80f44:	0008508d 	.word	0x0008508d
   80f48:	00084021 	.word	0x00084021
   80f4c:	00083afd 	.word	0x00083afd
   80f50:	00083ab5 	.word	0x00083ab5
   80f54:	00080919 	.word	0x00080919
   80f58:	00080361 	.word	0x00080361

00080f5c <USART0_Handler>:
#endif /* USART */

#ifdef USART0

void USART0_Handler(void)
{
   80f5c:	b508      	push	{r3, lr}
	local_usart_handler(0);
   80f5e:	2000      	movs	r0, #0
   80f60:	4b01      	ldr	r3, [pc, #4]	; (80f68 <USART0_Handler+0xc>)
   80f62:	4798      	blx	r3
   80f64:	bd08      	pop	{r3, pc}
   80f66:	bf00      	nop
   80f68:	00080a09 	.word	0x00080a09

00080f6c <USART1_Handler>:
#endif /* USART0 */

#ifdef USART1

void USART1_Handler(void)
{
   80f6c:	b508      	push	{r3, lr}
	local_usart_handler(1);
   80f6e:	2001      	movs	r0, #1
   80f70:	4b01      	ldr	r3, [pc, #4]	; (80f78 <USART1_Handler+0xc>)
   80f72:	4798      	blx	r3
   80f74:	bd08      	pop	{r3, pc}
   80f76:	bf00      	nop
   80f78:	00080a09 	.word	0x00080a09

00080f7c <USART2_Handler>:
#endif /* USART1 */

#ifdef USART2

void USART2_Handler(void)
{
   80f7c:	b508      	push	{r3, lr}
	local_usart_handler(2);
   80f7e:	2002      	movs	r0, #2
   80f80:	4b01      	ldr	r3, [pc, #4]	; (80f88 <USART2_Handler+0xc>)
   80f82:	4798      	blx	r3
   80f84:	bd08      	pop	{r3, pc}
   80f86:	bf00      	nop
   80f88:	00080a09 	.word	0x00080a09

00080f8c <USART3_Handler>:
#endif /* USART2 */

#ifdef USART3

void USART3_Handler(void)
{
   80f8c:	b508      	push	{r3, lr}
	local_usart_handler(3);
   80f8e:	2003      	movs	r0, #3
   80f90:	4b01      	ldr	r3, [pc, #4]	; (80f98 <USART3_Handler+0xc>)
   80f92:	4798      	blx	r3
   80f94:	bd08      	pop	{r3, pc}
   80f96:	bf00      	nop
   80f98:	00080a09 	.word	0x00080a09

00080f9c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80f9c:	4a02      	ldr	r2, [pc, #8]	; (80fa8 <udi_cdc_comm_disable+0xc>)
   80f9e:	7813      	ldrb	r3, [r2, #0]
   80fa0:	3b01      	subs	r3, #1
   80fa2:	b2db      	uxtb	r3, r3
   80fa4:	7013      	strb	r3, [r2, #0]
   80fa6:	4770      	bx	lr
   80fa8:	20070d63 	.word	0x20070d63

00080fac <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80fac:	2000      	movs	r0, #0
   80fae:	4770      	bx	lr

00080fb0 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80fb0:	2000      	movs	r0, #0
   80fb2:	4770      	bx	lr

00080fb4 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80fb4:	4b1d      	ldr	r3, [pc, #116]	; (8102c <udi_cdc_comm_setup+0x78>)
   80fb6:	781b      	ldrb	r3, [r3, #0]
   80fb8:	f013 0f80 	tst.w	r3, #128	; 0x80
   80fbc:	d105      	bne.n	80fca <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80fbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80fc2:	2b20      	cmp	r3, #32
   80fc4:	d018      	beq.n	80ff8 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80fc6:	2000      	movs	r0, #0
   80fc8:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80fca:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80fce:	2b20      	cmp	r3, #32
   80fd0:	d001      	beq.n	80fd6 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   80fd2:	2000      	movs	r0, #0
   80fd4:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80fd6:	4b15      	ldr	r3, [pc, #84]	; (8102c <udi_cdc_comm_setup+0x78>)
   80fd8:	785b      	ldrb	r3, [r3, #1]
   80fda:	2b21      	cmp	r3, #33	; 0x21
   80fdc:	d124      	bne.n	81028 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   80fde:	4b13      	ldr	r3, [pc, #76]	; (8102c <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80fe0:	88db      	ldrh	r3, [r3, #6]
   80fe2:	2b07      	cmp	r3, #7
   80fe4:	d001      	beq.n	80fea <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   80fe6:	2000      	movs	r0, #0
   80fe8:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80fea:	4b10      	ldr	r3, [pc, #64]	; (8102c <udi_cdc_comm_setup+0x78>)
   80fec:	4a10      	ldr	r2, [pc, #64]	; (81030 <udi_cdc_comm_setup+0x7c>)
   80fee:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80ff0:	2207      	movs	r2, #7
   80ff2:	819a      	strh	r2, [r3, #12]
				return true;
   80ff4:	2001      	movs	r0, #1
   80ff6:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80ff8:	4b0c      	ldr	r3, [pc, #48]	; (8102c <udi_cdc_comm_setup+0x78>)
   80ffa:	7858      	ldrb	r0, [r3, #1]
   80ffc:	2820      	cmp	r0, #32
   80ffe:	d004      	beq.n	8100a <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   81000:	2822      	cmp	r0, #34	; 0x22
   81002:	bf14      	ite	ne
   81004:	2000      	movne	r0, #0
   81006:	2001      	moveq	r0, #1
   81008:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   8100a:	4b08      	ldr	r3, [pc, #32]	; (8102c <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8100c:	88db      	ldrh	r3, [r3, #6]
   8100e:	2b07      	cmp	r3, #7
   81010:	d001      	beq.n	81016 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   81012:	2000      	movs	r0, #0
}
   81014:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   81016:	4b05      	ldr	r3, [pc, #20]	; (8102c <udi_cdc_comm_setup+0x78>)
   81018:	4a06      	ldr	r2, [pc, #24]	; (81034 <udi_cdc_comm_setup+0x80>)
   8101a:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   8101c:	4a04      	ldr	r2, [pc, #16]	; (81030 <udi_cdc_comm_setup+0x7c>)
   8101e:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   81020:	2207      	movs	r2, #7
   81022:	819a      	strh	r2, [r3, #12]
				return true;
   81024:	2001      	movs	r0, #1
   81026:	4770      	bx	lr
	return false;  // request Not supported
   81028:	2000      	movs	r0, #0
   8102a:	4770      	bx	lr
   8102c:	20075908 	.word	0x20075908
   81030:	20070d5c 	.word	0x20070d5c
   81034:	00081039 	.word	0x00081039

00081038 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   81038:	4770      	bx	lr
	...

0008103c <udi_cdc_comm_enable>:
{
   8103c:	b508      	push	{r3, lr}
	udi_cdc_nb_comm_enabled = 0;
   8103e:	2000      	movs	r0, #0
   81040:	4b10      	ldr	r3, [pc, #64]	; (81084 <udi_cdc_comm_enable+0x48>)
   81042:	7018      	strb	r0, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   81044:	4b10      	ldr	r3, [pc, #64]	; (81088 <udi_cdc_comm_enable+0x4c>)
   81046:	8018      	strh	r0, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   81048:	4b10      	ldr	r3, [pc, #64]	; (8108c <udi_cdc_comm_enable+0x50>)
   8104a:	22a1      	movs	r2, #161	; 0xa1
   8104c:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   8104e:	2220      	movs	r2, #32
   81050:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   81052:	8058      	strh	r0, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   81054:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   81056:	2202      	movs	r2, #2
   81058:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8105a:	8118      	strh	r0, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8105c:	4b0c      	ldr	r3, [pc, #48]	; (81090 <udi_cdc_comm_enable+0x54>)
   8105e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   81062:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   81064:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   81066:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   81068:	2208      	movs	r2, #8
   8106a:	719a      	strb	r2, [r3, #6]
	if (!UDI_CDC_ENABLE_EXT(port)) {
   8106c:	4b09      	ldr	r3, [pc, #36]	; (81094 <udi_cdc_comm_enable+0x58>)
   8106e:	4798      	blx	r3
   81070:	4602      	mov	r2, r0
   81072:	b120      	cbz	r0, 8107e <udi_cdc_comm_enable+0x42>
	udi_cdc_nb_comm_enabled++;
   81074:	4903      	ldr	r1, [pc, #12]	; (81084 <udi_cdc_comm_enable+0x48>)
   81076:	780b      	ldrb	r3, [r1, #0]
   81078:	3301      	adds	r3, #1
   8107a:	b2db      	uxtb	r3, r3
   8107c:	700b      	strb	r3, [r1, #0]
}
   8107e:	4610      	mov	r0, r2
   81080:	bd08      	pop	{r3, pc}
   81082:	bf00      	nop
   81084:	20070d63 	.word	0x20070d63
   81088:	20071178 	.word	0x20071178
   8108c:	20071590 	.word	0x20071590
   81090:	20070d5c 	.word	0x20070d5c
   81094:	00083901 	.word	0x00083901

00081098 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   81098:	4b44      	ldr	r3, [pc, #272]	; (811ac <udi_cdc_tx_send+0x114>)
   8109a:	781b      	ldrb	r3, [r3, #0]
   8109c:	b103      	cbz	r3, 810a0 <udi_cdc_tx_send+0x8>
   8109e:	4770      	bx	lr
{
   810a0:	b570      	push	{r4, r5, r6, lr}
   810a2:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   810a4:	4b42      	ldr	r3, [pc, #264]	; (811b0 <udi_cdc_tx_send+0x118>)
   810a6:	4798      	blx	r3
   810a8:	2800      	cmp	r0, #0
   810aa:	d042      	beq.n	81132 <udi_cdc_tx_send+0x9a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   810ac:	4b41      	ldr	r3, [pc, #260]	; (811b4 <udi_cdc_tx_send+0x11c>)
   810ae:	881c      	ldrh	r4, [r3, #0]
   810b0:	4b41      	ldr	r3, [pc, #260]	; (811b8 <udi_cdc_tx_send+0x120>)
   810b2:	4798      	blx	r3
   810b4:	4284      	cmp	r4, r0
   810b6:	d077      	beq.n	811a8 <udi_cdc_tx_send+0x110>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   810b8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   810bc:	fab3 f383 	clz	r3, r3
   810c0:	095b      	lsrs	r3, r3, #5
   810c2:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   810c4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   810c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   810ca:	2200      	movs	r2, #0
   810cc:	4b3b      	ldr	r3, [pc, #236]	; (811bc <udi_cdc_tx_send+0x124>)
   810ce:	701a      	strb	r2, [r3, #0]
	return flags;
   810d0:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   810d2:	4b3b      	ldr	r3, [pc, #236]	; (811c0 <udi_cdc_tx_send+0x128>)
   810d4:	781c      	ldrb	r4, [r3, #0]
   810d6:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   810d8:	4b3a      	ldr	r3, [pc, #232]	; (811c4 <udi_cdc_tx_send+0x12c>)
   810da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   810de:	2b00      	cmp	r3, #0
   810e0:	d02e      	beq.n	81140 <udi_cdc_tx_send+0xa8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   810e2:	2200      	movs	r2, #0
   810e4:	4b38      	ldr	r3, [pc, #224]	; (811c8 <udi_cdc_tx_send+0x130>)
   810e6:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   810e8:	4b38      	ldr	r3, [pc, #224]	; (811cc <udi_cdc_tx_send+0x134>)
   810ea:	781b      	ldrb	r3, [r3, #0]
   810ec:	2b00      	cmp	r3, #0
   810ee:	d143      	bne.n	81178 <udi_cdc_tx_send+0xe0>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   810f0:	fab4 f384 	clz	r3, r4
   810f4:	095b      	lsrs	r3, r3, #5
   810f6:	4a32      	ldr	r2, [pc, #200]	; (811c0 <udi_cdc_tx_send+0x128>)
   810f8:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   810fa:	2201      	movs	r2, #1
   810fc:	4b2b      	ldr	r3, [pc, #172]	; (811ac <udi_cdc_tx_send+0x114>)
   810fe:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81100:	b125      	cbz	r5, 8110c <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
   81102:	4b2e      	ldr	r3, [pc, #184]	; (811bc <udi_cdc_tx_send+0x124>)
   81104:	701a      	strb	r2, [r3, #0]
   81106:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8110a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8110c:	4626      	mov	r6, r4
   8110e:	4b2d      	ldr	r3, [pc, #180]	; (811c4 <udi_cdc_tx_send+0x12c>)
   81110:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   81114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81118:	bf14      	ite	ne
   8111a:	2501      	movne	r5, #1
   8111c:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8111e:	d034      	beq.n	8118a <udi_cdc_tx_send+0xf2>
		if (udd_is_high_speed()) {
   81120:	4b23      	ldr	r3, [pc, #140]	; (811b0 <udi_cdc_tx_send+0x118>)
   81122:	4798      	blx	r3
   81124:	2800      	cmp	r0, #0
   81126:	d02b      	beq.n	81180 <udi_cdc_tx_send+0xe8>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   81128:	4b23      	ldr	r3, [pc, #140]	; (811b8 <udi_cdc_tx_send+0x120>)
   8112a:	4798      	blx	r3
   8112c:	4b21      	ldr	r3, [pc, #132]	; (811b4 <udi_cdc_tx_send+0x11c>)
   8112e:	8018      	strh	r0, [r3, #0]
   81130:	e02e      	b.n	81190 <udi_cdc_tx_send+0xf8>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   81132:	4b20      	ldr	r3, [pc, #128]	; (811b4 <udi_cdc_tx_send+0x11c>)
   81134:	881c      	ldrh	r4, [r3, #0]
   81136:	4b26      	ldr	r3, [pc, #152]	; (811d0 <udi_cdc_tx_send+0x138>)
   81138:	4798      	blx	r3
   8113a:	4284      	cmp	r4, r0
   8113c:	d1bc      	bne.n	810b8 <udi_cdc_tx_send+0x20>
   8113e:	e033      	b.n	811a8 <udi_cdc_tx_send+0x110>
		sof_zlp_counter++;
   81140:	4a21      	ldr	r2, [pc, #132]	; (811c8 <udi_cdc_tx_send+0x130>)
   81142:	8813      	ldrh	r3, [r2, #0]
   81144:	3301      	adds	r3, #1
   81146:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   81148:	4b19      	ldr	r3, [pc, #100]	; (811b0 <udi_cdc_tx_send+0x118>)
   8114a:	4798      	blx	r3
   8114c:	b918      	cbnz	r0, 81156 <udi_cdc_tx_send+0xbe>
   8114e:	4b1e      	ldr	r3, [pc, #120]	; (811c8 <udi_cdc_tx_send+0x130>)
   81150:	881b      	ldrh	r3, [r3, #0]
   81152:	2b63      	cmp	r3, #99	; 0x63
   81154:	d908      	bls.n	81168 <udi_cdc_tx_send+0xd0>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   81156:	4b16      	ldr	r3, [pc, #88]	; (811b0 <udi_cdc_tx_send+0x118>)
   81158:	4798      	blx	r3
   8115a:	2800      	cmp	r0, #0
   8115c:	d0c1      	beq.n	810e2 <udi_cdc_tx_send+0x4a>
   8115e:	4b1a      	ldr	r3, [pc, #104]	; (811c8 <udi_cdc_tx_send+0x130>)
   81160:	881b      	ldrh	r3, [r3, #0]
   81162:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   81166:	d2bc      	bcs.n	810e2 <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
   81168:	b1f5      	cbz	r5, 811a8 <udi_cdc_tx_send+0x110>
		cpu_irq_enable();
   8116a:	2201      	movs	r2, #1
   8116c:	4b13      	ldr	r3, [pc, #76]	; (811bc <udi_cdc_tx_send+0x124>)
   8116e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   81170:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81174:	b662      	cpsie	i
   81176:	e017      	b.n	811a8 <udi_cdc_tx_send+0x110>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   81178:	fab4 f484 	clz	r4, r4
   8117c:	0964      	lsrs	r4, r4, #5
   8117e:	e7bc      	b.n	810fa <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   81180:	4b13      	ldr	r3, [pc, #76]	; (811d0 <udi_cdc_tx_send+0x138>)
   81182:	4798      	blx	r3
   81184:	4b0b      	ldr	r3, [pc, #44]	; (811b4 <udi_cdc_tx_send+0x11c>)
   81186:	8018      	strh	r0, [r3, #0]
   81188:	e002      	b.n	81190 <udi_cdc_tx_send+0xf8>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8118a:	2200      	movs	r2, #0
   8118c:	4b09      	ldr	r3, [pc, #36]	; (811b4 <udi_cdc_tx_send+0x11c>)
   8118e:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   81190:	4b0c      	ldr	r3, [pc, #48]	; (811c4 <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
   81192:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   81196:	4a0f      	ldr	r2, [pc, #60]	; (811d4 <udi_cdc_tx_send+0x13c>)
   81198:	9200      	str	r2, [sp, #0]
   8119a:	4a0f      	ldr	r2, [pc, #60]	; (811d8 <udi_cdc_tx_send+0x140>)
   8119c:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   811a0:	4629      	mov	r1, r5
   811a2:	2081      	movs	r0, #129	; 0x81
   811a4:	4c0d      	ldr	r4, [pc, #52]	; (811dc <udi_cdc_tx_send+0x144>)
   811a6:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   811a8:	b004      	add	sp, #16
   811aa:	bd70      	pop	{r4, r5, r6, pc}
   811ac:	2007158c 	.word	0x2007158c
   811b0:	00082cc1 	.word	0x00082cc1
   811b4:	20071588 	.word	0x20071588
   811b8:	00082d1d 	.word	0x00082d1d
   811bc:	2007026e 	.word	0x2007026e
   811c0:	20071584 	.word	0x20071584
   811c4:	20071580 	.word	0x20071580
   811c8:	20070d58 	.word	0x20070d58
   811cc:	2007117c 	.word	0x2007117c
   811d0:	00082d0d 	.word	0x00082d0d
   811d4:	000811e1 	.word	0x000811e1
   811d8:	20071180 	.word	0x20071180
   811dc:	00082f85 	.word	0x00082f85

000811e0 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   811e0:	b100      	cbz	r0, 811e4 <udi_cdc_data_sent+0x4>
   811e2:	4770      	bx	lr
{
   811e4:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   811e6:	4b07      	ldr	r3, [pc, #28]	; (81204 <udi_cdc_data_sent+0x24>)
   811e8:	781b      	ldrb	r3, [r3, #0]
   811ea:	fab3 f383 	clz	r3, r3
   811ee:	095b      	lsrs	r3, r3, #5
   811f0:	4a05      	ldr	r2, [pc, #20]	; (81208 <udi_cdc_data_sent+0x28>)
   811f2:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   811f6:	4b05      	ldr	r3, [pc, #20]	; (8120c <udi_cdc_data_sent+0x2c>)
   811f8:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   811fa:	4b05      	ldr	r3, [pc, #20]	; (81210 <udi_cdc_data_sent+0x30>)
   811fc:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   811fe:	4b05      	ldr	r3, [pc, #20]	; (81214 <udi_cdc_data_sent+0x34>)
   81200:	4798      	blx	r3
   81202:	bd08      	pop	{r3, pc}
   81204:	20071584 	.word	0x20071584
   81208:	20071580 	.word	0x20071580
   8120c:	2007117c 	.word	0x2007117c
   81210:	2007158c 	.word	0x2007158c
   81214:	00081099 	.word	0x00081099

00081218 <udi_cdc_data_sof_notify>:
{
   81218:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8121a:	2000      	movs	r0, #0
   8121c:	4b01      	ldr	r3, [pc, #4]	; (81224 <udi_cdc_data_sof_notify+0xc>)
   8121e:	4798      	blx	r3
   81220:	bd08      	pop	{r3, pc}
   81222:	bf00      	nop
   81224:	00081099 	.word	0x00081099

00081228 <udi_cdc_data_disable>:
{
   81228:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8122a:	4a06      	ldr	r2, [pc, #24]	; (81244 <udi_cdc_data_disable+0x1c>)
   8122c:	7813      	ldrb	r3, [r2, #0]
   8122e:	3b01      	subs	r3, #1
   81230:	b2db      	uxtb	r3, r3
   81232:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   81234:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   81236:	4b04      	ldr	r3, [pc, #16]	; (81248 <udi_cdc_data_disable+0x20>)
   81238:	4798      	blx	r3
	udi_cdc_data_running = false;
   8123a:	2200      	movs	r2, #0
   8123c:	4b03      	ldr	r3, [pc, #12]	; (8124c <udi_cdc_data_disable+0x24>)
   8123e:	701a      	strb	r2, [r3, #0]
   81240:	bd08      	pop	{r3, pc}
   81242:	bf00      	nop
   81244:	20070d64 	.word	0x20070d64
   81248:	00083961 	.word	0x00083961
   8124c:	20070d5a 	.word	0x20070d5a

00081250 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
   81250:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   81252:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   81256:	fab3 f383 	clz	r3, r3
   8125a:	095b      	lsrs	r3, r3, #5
   8125c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8125e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   81260:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81264:	2200      	movs	r2, #0
   81266:	4b0b      	ldr	r3, [pc, #44]	; (81294 <udi_cdc_multi_get_nb_received_data+0x44>)
   81268:	701a      	strb	r2, [r3, #0]
	return flags;
   8126a:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   8126c:	4b0a      	ldr	r3, [pc, #40]	; (81298 <udi_cdc_multi_get_nb_received_data+0x48>)
   8126e:	8818      	ldrh	r0, [r3, #0]
   81270:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   81272:	4a0a      	ldr	r2, [pc, #40]	; (8129c <udi_cdc_multi_get_nb_received_data+0x4c>)
   81274:	7812      	ldrb	r2, [r2, #0]
   81276:	b2d2      	uxtb	r2, r2
   81278:	4809      	ldr	r0, [pc, #36]	; (812a0 <udi_cdc_multi_get_nb_received_data+0x50>)
   8127a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   8127e:	b280      	uxth	r0, r0
   81280:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   81282:	b129      	cbz	r1, 81290 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
   81284:	2201      	movs	r2, #1
   81286:	4b03      	ldr	r3, [pc, #12]	; (81294 <udi_cdc_multi_get_nb_received_data+0x44>)
   81288:	701a      	strb	r2, [r3, #0]
   8128a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8128e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   81290:	b002      	add	sp, #8
   81292:	4770      	bx	lr
   81294:	2007026e 	.word	0x2007026e
   81298:	20071170 	.word	0x20071170
   8129c:	2007116c 	.word	0x2007116c
   812a0:	20071168 	.word	0x20071168

000812a4 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   812a4:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   812a6:	4b03      	ldr	r3, [pc, #12]	; (812b4 <udi_cdc_multi_is_rx_ready+0x10>)
   812a8:	4798      	blx	r3
}
   812aa:	3000      	adds	r0, #0
   812ac:	bf18      	it	ne
   812ae:	2001      	movne	r0, #1
   812b0:	bd08      	pop	{r3, pc}
   812b2:	bf00      	nop
   812b4:	00081251 	.word	0x00081251

000812b8 <udi_cdc_rx_start>:
{
   812b8:	b510      	push	{r4, lr}
   812ba:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   812bc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   812c0:	fab3 f383 	clz	r3, r3
   812c4:	095b      	lsrs	r3, r3, #5
   812c6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   812c8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   812ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   812ce:	2200      	movs	r2, #0
   812d0:	4b21      	ldr	r3, [pc, #132]	; (81358 <udi_cdc_rx_start+0xa0>)
   812d2:	701a      	strb	r2, [r3, #0]
	return flags;
   812d4:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   812d6:	4a21      	ldr	r2, [pc, #132]	; (8135c <udi_cdc_rx_start+0xa4>)
   812d8:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   812da:	4a21      	ldr	r2, [pc, #132]	; (81360 <udi_cdc_rx_start+0xa8>)
   812dc:	7812      	ldrb	r2, [r2, #0]
   812de:	b94a      	cbnz	r2, 812f4 <udi_cdc_rx_start+0x3c>
   812e0:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   812e2:	4a20      	ldr	r2, [pc, #128]	; (81364 <udi_cdc_rx_start+0xac>)
   812e4:	8811      	ldrh	r1, [r2, #0]
   812e6:	b289      	uxth	r1, r1
   812e8:	4a1f      	ldr	r2, [pc, #124]	; (81368 <udi_cdc_rx_start+0xb0>)
   812ea:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   812ee:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   812f0:	4291      	cmp	r1, r2
   812f2:	d20a      	bcs.n	8130a <udi_cdc_rx_start+0x52>
	if (cpu_irq_is_enabled_flags(flags))
   812f4:	2b00      	cmp	r3, #0
   812f6:	d02d      	beq.n	81354 <udi_cdc_rx_start+0x9c>
		cpu_irq_enable();
   812f8:	2201      	movs	r2, #1
   812fa:	4b17      	ldr	r3, [pc, #92]	; (81358 <udi_cdc_rx_start+0xa0>)
   812fc:	701a      	strb	r2, [r3, #0]
   812fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81302:	b662      	cpsie	i
		return false;
   81304:	2000      	movs	r0, #0
}
   81306:	b004      	add	sp, #16
   81308:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   8130a:	2100      	movs	r1, #0
   8130c:	4a15      	ldr	r2, [pc, #84]	; (81364 <udi_cdc_rx_start+0xac>)
   8130e:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   81310:	fab4 f284 	clz	r2, r4
   81314:	0952      	lsrs	r2, r2, #5
   81316:	4911      	ldr	r1, [pc, #68]	; (8135c <udi_cdc_rx_start+0xa4>)
   81318:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   8131a:	2101      	movs	r1, #1
   8131c:	4a10      	ldr	r2, [pc, #64]	; (81360 <udi_cdc_rx_start+0xa8>)
   8131e:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   81320:	b123      	cbz	r3, 8132c <udi_cdc_rx_start+0x74>
		cpu_irq_enable();
   81322:	4b0d      	ldr	r3, [pc, #52]	; (81358 <udi_cdc_rx_start+0xa0>)
   81324:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   81326:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8132a:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   8132c:	2000      	movs	r0, #0
   8132e:	4b0f      	ldr	r3, [pc, #60]	; (8136c <udi_cdc_rx_start+0xb4>)
   81330:	4798      	blx	r3
   81332:	b958      	cbnz	r0, 8134c <udi_cdc_rx_start+0x94>
	return udd_ep_run(ep,
   81334:	4b0e      	ldr	r3, [pc, #56]	; (81370 <udi_cdc_rx_start+0xb8>)
   81336:	9300      	str	r3, [sp, #0]
   81338:	f44f 7300 	mov.w	r3, #512	; 0x200
   8133c:	4a0d      	ldr	r2, [pc, #52]	; (81374 <udi_cdc_rx_start+0xbc>)
   8133e:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   81342:	2101      	movs	r1, #1
   81344:	2002      	movs	r0, #2
   81346:	4c0c      	ldr	r4, [pc, #48]	; (81378 <udi_cdc_rx_start+0xc0>)
   81348:	47a0      	blx	r4
   8134a:	e7dc      	b.n	81306 <udi_cdc_rx_start+0x4e>
		UDI_CDC_RX_NOTIFY(port);
   8134c:	2000      	movs	r0, #0
   8134e:	4b0b      	ldr	r3, [pc, #44]	; (8137c <udi_cdc_rx_start+0xc4>)
   81350:	4798      	blx	r3
   81352:	e7ef      	b.n	81334 <udi_cdc_rx_start+0x7c>
		return false;
   81354:	2000      	movs	r0, #0
   81356:	e7d6      	b.n	81306 <udi_cdc_rx_start+0x4e>
   81358:	2007026e 	.word	0x2007026e
   8135c:	2007116c 	.word	0x2007116c
   81360:	20071174 	.word	0x20071174
   81364:	20071170 	.word	0x20071170
   81368:	20071168 	.word	0x20071168
   8136c:	000812a5 	.word	0x000812a5
   81370:	00081415 	.word	0x00081415
   81374:	20070d68 	.word	0x20070d68
   81378:	00082f85 	.word	0x00082f85
   8137c:	0008390d 	.word	0x0008390d

00081380 <udi_cdc_data_enable>:
{
   81380:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   81382:	2400      	movs	r4, #0
   81384:	4b16      	ldr	r3, [pc, #88]	; (813e0 <udi_cdc_data_enable+0x60>)
   81386:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   81388:	4b16      	ldr	r3, [pc, #88]	; (813e4 <udi_cdc_data_enable+0x64>)
   8138a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   8138c:	4b16      	ldr	r3, [pc, #88]	; (813e8 <udi_cdc_data_enable+0x68>)
   8138e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   81390:	4b16      	ldr	r3, [pc, #88]	; (813ec <udi_cdc_data_enable+0x6c>)
   81392:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   81394:	4b16      	ldr	r3, [pc, #88]	; (813f0 <udi_cdc_data_enable+0x70>)
   81396:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   81398:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   8139a:	4b16      	ldr	r3, [pc, #88]	; (813f4 <udi_cdc_data_enable+0x74>)
   8139c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8139e:	4620      	mov	r0, r4
   813a0:	4b15      	ldr	r3, [pc, #84]	; (813f8 <udi_cdc_data_enable+0x78>)
   813a2:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   813a4:	4b15      	ldr	r3, [pc, #84]	; (813fc <udi_cdc_data_enable+0x7c>)
   813a6:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   813a8:	4b15      	ldr	r3, [pc, #84]	; (81400 <udi_cdc_data_enable+0x80>)
   813aa:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   813ac:	4b15      	ldr	r3, [pc, #84]	; (81404 <udi_cdc_data_enable+0x84>)
   813ae:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   813b0:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   813b2:	4b15      	ldr	r3, [pc, #84]	; (81408 <udi_cdc_data_enable+0x88>)
   813b4:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   813b6:	4620      	mov	r0, r4
   813b8:	4b14      	ldr	r3, [pc, #80]	; (8140c <udi_cdc_data_enable+0x8c>)
   813ba:	4798      	blx	r3
   813bc:	4601      	mov	r1, r0
   813be:	b140      	cbz	r0, 813d2 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   813c0:	4a07      	ldr	r2, [pc, #28]	; (813e0 <udi_cdc_data_enable+0x60>)
   813c2:	7813      	ldrb	r3, [r2, #0]
   813c4:	3301      	adds	r3, #1
   813c6:	b2db      	uxtb	r3, r3
   813c8:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   813ca:	7813      	ldrb	r3, [r2, #0]
   813cc:	b2db      	uxtb	r3, r3
   813ce:	2b01      	cmp	r3, #1
   813d0:	d001      	beq.n	813d6 <udi_cdc_data_enable+0x56>
}
   813d2:	4608      	mov	r0, r1
   813d4:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   813d6:	2201      	movs	r2, #1
   813d8:	4b0d      	ldr	r3, [pc, #52]	; (81410 <udi_cdc_data_enable+0x90>)
   813da:	701a      	strb	r2, [r3, #0]
   813dc:	e7f9      	b.n	813d2 <udi_cdc_data_enable+0x52>
   813de:	bf00      	nop
   813e0:	20070d64 	.word	0x20070d64
   813e4:	2007158c 	.word	0x2007158c
   813e8:	2007117c 	.word	0x2007117c
   813ec:	20071584 	.word	0x20071584
   813f0:	20071580 	.word	0x20071580
   813f4:	20071588 	.word	0x20071588
   813f8:	00081099 	.word	0x00081099
   813fc:	20071174 	.word	0x20071174
   81400:	2007116c 	.word	0x2007116c
   81404:	20071168 	.word	0x20071168
   81408:	20071170 	.word	0x20071170
   8140c:	000812b9 	.word	0x000812b9
   81410:	20070d5a 	.word	0x20070d5a

00081414 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   81414:	b9f0      	cbnz	r0, 81454 <udi_cdc_data_received+0x40>
{
   81416:	b510      	push	{r4, lr}
   81418:	b082      	sub	sp, #8
   8141a:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8141c:	4b0e      	ldr	r3, [pc, #56]	; (81458 <udi_cdc_data_received+0x44>)
   8141e:	781c      	ldrb	r4, [r3, #0]
   81420:	fab4 f484 	clz	r4, r4
   81424:	0964      	lsrs	r4, r4, #5
	if (!n) {
   81426:	b151      	cbz	r1, 8143e <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   81428:	b289      	uxth	r1, r1
   8142a:	4b0c      	ldr	r3, [pc, #48]	; (8145c <udi_cdc_data_received+0x48>)
   8142c:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   81430:	2000      	movs	r0, #0
   81432:	4b0b      	ldr	r3, [pc, #44]	; (81460 <udi_cdc_data_received+0x4c>)
   81434:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   81436:	4b0b      	ldr	r3, [pc, #44]	; (81464 <udi_cdc_data_received+0x50>)
   81438:	4798      	blx	r3
}
   8143a:	b002      	add	sp, #8
   8143c:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   8143e:	4b0a      	ldr	r3, [pc, #40]	; (81468 <udi_cdc_data_received+0x54>)
   81440:	9300      	str	r3, [sp, #0]
   81442:	f44f 7300 	mov.w	r3, #512	; 0x200
   81446:	4a09      	ldr	r2, [pc, #36]	; (8146c <udi_cdc_data_received+0x58>)
   81448:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8144c:	2101      	movs	r1, #1
   8144e:	4c08      	ldr	r4, [pc, #32]	; (81470 <udi_cdc_data_received+0x5c>)
   81450:	47a0      	blx	r4
		return;
   81452:	e7f2      	b.n	8143a <udi_cdc_data_received+0x26>
   81454:	4770      	bx	lr
   81456:	bf00      	nop
   81458:	2007116c 	.word	0x2007116c
   8145c:	20071168 	.word	0x20071168
   81460:	20071174 	.word	0x20071174
   81464:	000812b9 	.word	0x000812b9
   81468:	00081415 	.word	0x00081415
   8146c:	20070d68 	.word	0x20070d68
   81470:	00082f85 	.word	0x00082f85

00081474 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   81474:	4b10      	ldr	r3, [pc, #64]	; (814b8 <udc_next_desc_in_iface+0x44>)
   81476:	681b      	ldr	r3, [r3, #0]
   81478:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8147a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8147c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8147e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81480:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   81482:	4290      	cmp	r0, r2
   81484:	d211      	bcs.n	814aa <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81486:	7843      	ldrb	r3, [r0, #1]
   81488:	2b04      	cmp	r3, #4
   8148a:	d010      	beq.n	814ae <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8148c:	428b      	cmp	r3, r1
   8148e:	d009      	beq.n	814a4 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   81490:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81492:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   81494:	4290      	cmp	r0, r2
   81496:	d206      	bcs.n	814a6 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81498:	7843      	ldrb	r3, [r0, #1]
   8149a:	2b04      	cmp	r3, #4
   8149c:	d009      	beq.n	814b2 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   8149e:	428b      	cmp	r3, r1
   814a0:	d1f6      	bne.n	81490 <udc_next_desc_in_iface+0x1c>
   814a2:	e007      	b.n	814b4 <udc_next_desc_in_iface+0x40>
   814a4:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   814a6:	2000      	movs	r0, #0
   814a8:	4770      	bx	lr
   814aa:	2000      	movs	r0, #0
   814ac:	4770      	bx	lr
   814ae:	2000      	movs	r0, #0
   814b0:	4770      	bx	lr
   814b2:	2000      	movs	r0, #0
}
   814b4:	4770      	bx	lr
   814b6:	bf00      	nop
   814b8:	200715a8 	.word	0x200715a8

000814bc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   814bc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   814be:	4b03      	ldr	r3, [pc, #12]	; (814cc <udc_valid_address+0x10>)
   814c0:	7898      	ldrb	r0, [r3, #2]
   814c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   814c6:	4b02      	ldr	r3, [pc, #8]	; (814d0 <udc_valid_address+0x14>)
   814c8:	4798      	blx	r3
   814ca:	bd08      	pop	{r3, pc}
   814cc:	20075908 	.word	0x20075908
   814d0:	00082cd5 	.word	0x00082cd5

000814d4 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   814d4:	4b19      	ldr	r3, [pc, #100]	; (8153c <udc_update_iface_desc+0x68>)
   814d6:	781b      	ldrb	r3, [r3, #0]
   814d8:	b34b      	cbz	r3, 8152e <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   814da:	4b19      	ldr	r3, [pc, #100]	; (81540 <udc_update_iface_desc+0x6c>)
   814dc:	681b      	ldr	r3, [r3, #0]
   814de:	681b      	ldr	r3, [r3, #0]
   814e0:	791a      	ldrb	r2, [r3, #4]
   814e2:	4282      	cmp	r2, r0
   814e4:	d925      	bls.n	81532 <udc_update_iface_desc+0x5e>
{
   814e6:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   814e8:	4a16      	ldr	r2, [pc, #88]	; (81544 <udc_update_iface_desc+0x70>)
   814ea:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   814ec:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   814ee:	441c      	add	r4, r3
	while (ptr_end_desc >
   814f0:	42a3      	cmp	r3, r4
   814f2:	d220      	bcs.n	81536 <udc_update_iface_desc+0x62>
   814f4:	2500      	movs	r5, #0
   814f6:	2601      	movs	r6, #1
   814f8:	e007      	b.n	8150a <udc_update_iface_desc+0x36>
   814fa:	4a12      	ldr	r2, [pc, #72]	; (81544 <udc_update_iface_desc+0x70>)
   814fc:	6013      	str	r3, [r2, #0]
   814fe:	e00f      	b.n	81520 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   81500:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81502:	4413      	add	r3, r2
   81504:	4635      	mov	r5, r6
	while (ptr_end_desc >
   81506:	42a3      	cmp	r3, r4
   81508:	d20c      	bcs.n	81524 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8150a:	785a      	ldrb	r2, [r3, #1]
   8150c:	2a04      	cmp	r2, #4
   8150e:	d1f7      	bne.n	81500 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81510:	789a      	ldrb	r2, [r3, #2]
   81512:	4282      	cmp	r2, r0
   81514:	d1f4      	bne.n	81500 <udc_update_iface_desc+0x2c>
   81516:	78da      	ldrb	r2, [r3, #3]
   81518:	428a      	cmp	r2, r1
   8151a:	d1f1      	bne.n	81500 <udc_update_iface_desc+0x2c>
   8151c:	2d00      	cmp	r5, #0
   8151e:	d1ec      	bne.n	814fa <udc_update_iface_desc+0x26>
				return true; // Interface found
   81520:	2001      	movs	r0, #1
   81522:	e002      	b.n	8152a <udc_update_iface_desc+0x56>
   81524:	4a07      	ldr	r2, [pc, #28]	; (81544 <udc_update_iface_desc+0x70>)
   81526:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   81528:	2000      	movs	r0, #0
}
   8152a:	bc70      	pop	{r4, r5, r6}
   8152c:	4770      	bx	lr
		return false;
   8152e:	2000      	movs	r0, #0
   81530:	4770      	bx	lr
		return false;
   81532:	2000      	movs	r0, #0
   81534:	4770      	bx	lr
	return false; // Interface not found
   81536:	2000      	movs	r0, #0
   81538:	e7f7      	b.n	8152a <udc_update_iface_desc+0x56>
   8153a:	bf00      	nop
   8153c:	200715a4 	.word	0x200715a4
   81540:	200715a8 	.word	0x200715a8
   81544:	200715ac 	.word	0x200715ac

00081548 <udc_iface_disable>:
{
   81548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8154c:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   8154e:	2100      	movs	r1, #0
   81550:	4b13      	ldr	r3, [pc, #76]	; (815a0 <udc_iface_disable+0x58>)
   81552:	4798      	blx	r3
   81554:	4680      	mov	r8, r0
   81556:	b910      	cbnz	r0, 8155e <udc_iface_disable+0x16>
}
   81558:	4640      	mov	r0, r8
   8155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8155e:	4b11      	ldr	r3, [pc, #68]	; (815a4 <udc_iface_disable+0x5c>)
   81560:	681b      	ldr	r3, [r3, #0]
   81562:	685b      	ldr	r3, [r3, #4]
   81564:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81568:	f8d9 300c 	ldr.w	r3, [r9, #12]
   8156c:	4798      	blx	r3
   8156e:	4601      	mov	r1, r0
   81570:	4620      	mov	r0, r4
   81572:	4b0b      	ldr	r3, [pc, #44]	; (815a0 <udc_iface_disable+0x58>)
   81574:	4798      	blx	r3
   81576:	4680      	mov	r8, r0
   81578:	2800      	cmp	r0, #0
   8157a:	d0ed      	beq.n	81558 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8157c:	4b0a      	ldr	r3, [pc, #40]	; (815a8 <udc_iface_disable+0x60>)
   8157e:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   81580:	2605      	movs	r6, #5
   81582:	4d0a      	ldr	r5, [pc, #40]	; (815ac <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   81584:	4f0a      	ldr	r7, [pc, #40]	; (815b0 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   81586:	4631      	mov	r1, r6
   81588:	4620      	mov	r0, r4
   8158a:	47a8      	blx	r5
			if (NULL == ep_desc) {
   8158c:	4604      	mov	r4, r0
   8158e:	b110      	cbz	r0, 81596 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   81590:	7880      	ldrb	r0, [r0, #2]
   81592:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   81594:	e7f7      	b.n	81586 <udc_iface_disable+0x3e>
	udi_api->disable();
   81596:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8159a:	4798      	blx	r3
	return true;
   8159c:	e7dc      	b.n	81558 <udc_iface_disable+0x10>
   8159e:	bf00      	nop
   815a0:	000814d5 	.word	0x000814d5
   815a4:	200715a8 	.word	0x200715a8
   815a8:	200715ac 	.word	0x200715ac
   815ac:	00081475 	.word	0x00081475
   815b0:	00082d39 	.word	0x00082d39

000815b4 <udc_iface_enable>:
{
   815b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   815b8:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   815ba:	4b10      	ldr	r3, [pc, #64]	; (815fc <udc_iface_enable+0x48>)
   815bc:	4798      	blx	r3
   815be:	4603      	mov	r3, r0
   815c0:	b1c8      	cbz	r0, 815f6 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   815c2:	4b0f      	ldr	r3, [pc, #60]	; (81600 <udc_iface_enable+0x4c>)
   815c4:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   815c6:	2605      	movs	r6, #5
   815c8:	4d0e      	ldr	r5, [pc, #56]	; (81604 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   815ca:	4f0f      	ldr	r7, [pc, #60]	; (81608 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   815cc:	4631      	mov	r1, r6
   815ce:	4620      	mov	r0, r4
   815d0:	47a8      	blx	r5
		if (NULL == ep_desc)
   815d2:	4604      	mov	r4, r0
   815d4:	b138      	cbz	r0, 815e6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   815d6:	8882      	ldrh	r2, [r0, #4]
   815d8:	78c1      	ldrb	r1, [r0, #3]
   815da:	7880      	ldrb	r0, [r0, #2]
   815dc:	47b8      	blx	r7
   815de:	4603      	mov	r3, r0
   815e0:	2800      	cmp	r0, #0
   815e2:	d1f3      	bne.n	815cc <udc_iface_enable+0x18>
   815e4:	e007      	b.n	815f6 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   815e6:	4b09      	ldr	r3, [pc, #36]	; (8160c <udc_iface_enable+0x58>)
   815e8:	681b      	ldr	r3, [r3, #0]
   815ea:	685b      	ldr	r3, [r3, #4]
   815ec:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   815f0:	681b      	ldr	r3, [r3, #0]
   815f2:	4798      	blx	r3
   815f4:	4603      	mov	r3, r0
}
   815f6:	4618      	mov	r0, r3
   815f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   815fc:	000814d5 	.word	0x000814d5
   81600:	200715ac 	.word	0x200715ac
   81604:	00081475 	.word	0x00081475
   81608:	00083081 	.word	0x00083081
   8160c:	200715a8 	.word	0x200715a8

00081610 <udc_reset>:
{
   81610:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   81612:	4b0d      	ldr	r3, [pc, #52]	; (81648 <udc_reset+0x38>)
   81614:	781b      	ldrb	r3, [r3, #0]
   81616:	b183      	cbz	r3, 8163a <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81618:	4b0c      	ldr	r3, [pc, #48]	; (8164c <udc_reset+0x3c>)
   8161a:	681b      	ldr	r3, [r3, #0]
   8161c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8161e:	791b      	ldrb	r3, [r3, #4]
   81620:	b15b      	cbz	r3, 8163a <udc_reset+0x2a>
   81622:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   81624:	4e0a      	ldr	r6, [pc, #40]	; (81650 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81626:	4d09      	ldr	r5, [pc, #36]	; (8164c <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   81628:	4620      	mov	r0, r4
   8162a:	47b0      	blx	r6
				iface_num++) {
   8162c:	3401      	adds	r4, #1
   8162e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81630:	682b      	ldr	r3, [r5, #0]
   81632:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81634:	791b      	ldrb	r3, [r3, #4]
   81636:	42a3      	cmp	r3, r4
   81638:	d8f6      	bhi.n	81628 <udc_reset+0x18>
	udc_num_configuration = 0;
   8163a:	2200      	movs	r2, #0
   8163c:	4b02      	ldr	r3, [pc, #8]	; (81648 <udc_reset+0x38>)
   8163e:	701a      	strb	r2, [r3, #0]
	udc_device_status =
   81640:	2201      	movs	r2, #1
   81642:	4b04      	ldr	r3, [pc, #16]	; (81654 <udc_reset+0x44>)
   81644:	801a      	strh	r2, [r3, #0]
   81646:	bd70      	pop	{r4, r5, r6, pc}
   81648:	200715a4 	.word	0x200715a4
   8164c:	200715a8 	.word	0x200715a8
   81650:	00081549 	.word	0x00081549
   81654:	2007159a 	.word	0x2007159a

00081658 <udc_sof_notify>:
{
   81658:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   8165a:	4b0d      	ldr	r3, [pc, #52]	; (81690 <udc_sof_notify+0x38>)
   8165c:	781b      	ldrb	r3, [r3, #0]
   8165e:	b1b3      	cbz	r3, 8168e <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81660:	4b0c      	ldr	r3, [pc, #48]	; (81694 <udc_sof_notify+0x3c>)
   81662:	681b      	ldr	r3, [r3, #0]
   81664:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   81666:	7912      	ldrb	r2, [r2, #4]
   81668:	b18a      	cbz	r2, 8168e <udc_sof_notify+0x36>
   8166a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8166c:	4d09      	ldr	r5, [pc, #36]	; (81694 <udc_sof_notify+0x3c>)
   8166e:	e006      	b.n	8167e <udc_sof_notify+0x26>
				iface_num++) {
   81670:	3401      	adds	r4, #1
   81672:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81674:	682b      	ldr	r3, [r5, #0]
   81676:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   81678:	7912      	ldrb	r2, [r2, #4]
   8167a:	42a2      	cmp	r2, r4
   8167c:	d907      	bls.n	8168e <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8167e:	685b      	ldr	r3, [r3, #4]
   81680:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   81684:	691b      	ldr	r3, [r3, #16]
   81686:	2b00      	cmp	r3, #0
   81688:	d0f2      	beq.n	81670 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   8168a:	4798      	blx	r3
   8168c:	e7f0      	b.n	81670 <udc_sof_notify+0x18>
   8168e:	bd38      	pop	{r3, r4, r5, pc}
   81690:	200715a4 	.word	0x200715a4
   81694:	200715a8 	.word	0x200715a8

00081698 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   81698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   8169a:	4b94      	ldr	r3, [pc, #592]	; (818ec <udc_process_setup+0x254>)
   8169c:	2200      	movs	r2, #0
   8169e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   816a0:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   816a2:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   816a4:	781b      	ldrb	r3, [r3, #0]
   816a6:	f013 0f80 	tst.w	r3, #128	; 0x80
   816aa:	d114      	bne.n	816d6 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   816ac:	f013 0f60 	tst.w	r3, #96	; 0x60
   816b0:	f000 813c 	beq.w	8192c <udc_process_setup+0x294>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   816b4:	4b8d      	ldr	r3, [pc, #564]	; (818ec <udc_process_setup+0x254>)
   816b6:	781b      	ldrb	r3, [r3, #0]
   816b8:	f003 031f 	and.w	r3, r3, #31
   816bc:	2b01      	cmp	r3, #1
   816be:	f000 8208 	beq.w	81ad2 <udc_process_setup+0x43a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   816c2:	4b8a      	ldr	r3, [pc, #552]	; (818ec <udc_process_setup+0x254>)
   816c4:	781b      	ldrb	r3, [r3, #0]
   816c6:	f003 031f 	and.w	r3, r3, #31
   816ca:	2b02      	cmp	r3, #2
   816cc:	f000 8286 	beq.w	81bdc <udc_process_setup+0x544>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   816d0:	2300      	movs	r3, #0
#endif
}
   816d2:	4618      	mov	r0, r3
   816d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   816d6:	4a85      	ldr	r2, [pc, #532]	; (818ec <udc_process_setup+0x254>)
   816d8:	88d2      	ldrh	r2, [r2, #6]
   816da:	2a00      	cmp	r2, #0
   816dc:	f000 82a7 	beq.w	81c2e <udc_process_setup+0x596>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   816e0:	f013 0f60 	tst.w	r3, #96	; 0x60
   816e4:	d1e6      	bne.n	816b4 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   816e6:	f013 031f 	ands.w	r3, r3, #31
   816ea:	d107      	bne.n	816fc <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
   816ec:	497f      	ldr	r1, [pc, #508]	; (818ec <udc_process_setup+0x254>)
   816ee:	7849      	ldrb	r1, [r1, #1]
   816f0:	2906      	cmp	r1, #6
   816f2:	d016      	beq.n	81722 <udc_process_setup+0x8a>
   816f4:	2908      	cmp	r1, #8
   816f6:	f000 80ba 	beq.w	8186e <udc_process_setup+0x1d6>
   816fa:	b159      	cbz	r1, 81714 <udc_process_setup+0x7c>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   816fc:	2b01      	cmp	r3, #1
   816fe:	f000 80be 	beq.w	8187e <udc_process_setup+0x1e6>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81702:	2b02      	cmp	r3, #2
   81704:	d1d6      	bne.n	816b4 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   81706:	4b79      	ldr	r3, [pc, #484]	; (818ec <udc_process_setup+0x254>)
   81708:	785b      	ldrb	r3, [r3, #1]
   8170a:	2b00      	cmp	r3, #0
   8170c:	f000 80e0 	beq.w	818d0 <udc_process_setup+0x238>
	return false;
   81710:	2300      	movs	r3, #0
   81712:	e1d0      	b.n	81ab6 <udc_process_setup+0x41e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   81714:	2a02      	cmp	r2, #2
   81716:	d1d4      	bne.n	816c2 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81718:	2102      	movs	r1, #2
   8171a:	4875      	ldr	r0, [pc, #468]	; (818f0 <udc_process_setup+0x258>)
   8171c:	4b75      	ldr	r3, [pc, #468]	; (818f4 <udc_process_setup+0x25c>)
   8171e:	4798      	blx	r3
   81720:	e121      	b.n	81966 <udc_process_setup+0x2ce>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   81722:	4b72      	ldr	r3, [pc, #456]	; (818ec <udc_process_setup+0x254>)
   81724:	885a      	ldrh	r2, [r3, #2]
   81726:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81728:	0a13      	lsrs	r3, r2, #8
   8172a:	3b01      	subs	r3, #1
   8172c:	2b0e      	cmp	r3, #14
   8172e:	f200 8211 	bhi.w	81b54 <udc_process_setup+0x4bc>
   81732:	e8df f013 	tbh	[pc, r3, lsl #1]
   81736:	000f      	.short	0x000f
   81738:	0079001e 	.word	0x0079001e
   8173c:	020f020f 	.word	0x020f020f
   81740:	004d003f 	.word	0x004d003f
   81744:	020f020f 	.word	0x020f020f
   81748:	020f020f 	.word	0x020f020f
   8174c:	020f020f 	.word	0x020f020f
   81750:	0070020f 	.word	0x0070020f
		if (!udd_is_high_speed()) {
   81754:	4b68      	ldr	r3, [pc, #416]	; (818f8 <udc_process_setup+0x260>)
   81756:	4798      	blx	r3
   81758:	b928      	cbnz	r0, 81766 <udc_process_setup+0xce>
				(uint8_t *) udc_config.confdev_hs,
   8175a:	4b68      	ldr	r3, [pc, #416]	; (818fc <udc_process_setup+0x264>)
   8175c:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   8175e:	7801      	ldrb	r1, [r0, #0]
   81760:	4b64      	ldr	r3, [pc, #400]	; (818f4 <udc_process_setup+0x25c>)
   81762:	4798      	blx	r3
   81764:	e02b      	b.n	817be <udc_process_setup+0x126>
				(uint8_t *) udc_config.confdev_lsfs,
   81766:	4b65      	ldr	r3, [pc, #404]	; (818fc <udc_process_setup+0x264>)
   81768:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   8176a:	7801      	ldrb	r1, [r0, #0]
   8176c:	4b61      	ldr	r3, [pc, #388]	; (818f4 <udc_process_setup+0x25c>)
   8176e:	4798      	blx	r3
   81770:	e025      	b.n	817be <udc_process_setup+0x126>
		if (udd_is_high_speed()) {
   81772:	4b61      	ldr	r3, [pc, #388]	; (818f8 <udc_process_setup+0x260>)
   81774:	4798      	blx	r3
   81776:	b180      	cbz	r0, 8179a <udc_process_setup+0x102>
			if (conf_num >= udc_config.confdev_hs->
   81778:	4b60      	ldr	r3, [pc, #384]	; (818fc <udc_process_setup+0x264>)
   8177a:	689b      	ldr	r3, [r3, #8]
   8177c:	7c5b      	ldrb	r3, [r3, #17]
   8177e:	42a3      	cmp	r3, r4
   81780:	d998      	bls.n	816b4 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81782:	4b5e      	ldr	r3, [pc, #376]	; (818fc <udc_process_setup+0x264>)
   81784:	691b      	ldr	r3, [r3, #16]
   81786:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8178a:	8841      	ldrh	r1, [r0, #2]
   8178c:	4b59      	ldr	r3, [pc, #356]	; (818f4 <udc_process_setup+0x25c>)
   8178e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81790:	4b56      	ldr	r3, [pc, #344]	; (818ec <udc_process_setup+0x254>)
   81792:	689b      	ldr	r3, [r3, #8]
   81794:	2202      	movs	r2, #2
   81796:	705a      	strb	r2, [r3, #1]
   81798:	e011      	b.n	817be <udc_process_setup+0x126>
			if (conf_num >= udc_config.confdev_lsfs->
   8179a:	4b58      	ldr	r3, [pc, #352]	; (818fc <udc_process_setup+0x264>)
   8179c:	681b      	ldr	r3, [r3, #0]
   8179e:	7c5b      	ldrb	r3, [r3, #17]
   817a0:	42a3      	cmp	r3, r4
   817a2:	d987      	bls.n	816b4 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   817a4:	4b55      	ldr	r3, [pc, #340]	; (818fc <udc_process_setup+0x264>)
   817a6:	685b      	ldr	r3, [r3, #4]
   817a8:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   817ac:	8841      	ldrh	r1, [r0, #2]
   817ae:	4b51      	ldr	r3, [pc, #324]	; (818f4 <udc_process_setup+0x25c>)
   817b0:	4798      	blx	r3
   817b2:	e7ed      	b.n	81790 <udc_process_setup+0xf8>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   817b4:	4b51      	ldr	r3, [pc, #324]	; (818fc <udc_process_setup+0x264>)
   817b6:	68d8      	ldr	r0, [r3, #12]
   817b8:	7801      	ldrb	r1, [r0, #0]
   817ba:	4b4e      	ldr	r3, [pc, #312]	; (818f4 <udc_process_setup+0x25c>)
   817bc:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   817be:	4b4b      	ldr	r3, [pc, #300]	; (818ec <udc_process_setup+0x254>)
   817c0:	88da      	ldrh	r2, [r3, #6]
   817c2:	899b      	ldrh	r3, [r3, #12]
   817c4:	4293      	cmp	r3, r2
   817c6:	f240 80ce 	bls.w	81966 <udc_process_setup+0x2ce>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   817ca:	4b48      	ldr	r3, [pc, #288]	; (818ec <udc_process_setup+0x254>)
   817cc:	819a      	strh	r2, [r3, #12]
   817ce:	e0ca      	b.n	81966 <udc_process_setup+0x2ce>
		if (!udd_is_high_speed()) {
   817d0:	4b49      	ldr	r3, [pc, #292]	; (818f8 <udc_process_setup+0x260>)
   817d2:	4798      	blx	r3
   817d4:	b988      	cbnz	r0, 817fa <udc_process_setup+0x162>
			if (conf_num >= udc_config.confdev_hs->
   817d6:	4b49      	ldr	r3, [pc, #292]	; (818fc <udc_process_setup+0x264>)
   817d8:	689b      	ldr	r3, [r3, #8]
   817da:	7c5b      	ldrb	r3, [r3, #17]
   817dc:	42a3      	cmp	r3, r4
   817de:	f67f af69 	bls.w	816b4 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   817e2:	4b46      	ldr	r3, [pc, #280]	; (818fc <udc_process_setup+0x264>)
   817e4:	691b      	ldr	r3, [r3, #16]
   817e6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   817ea:	8841      	ldrh	r1, [r0, #2]
   817ec:	4b41      	ldr	r3, [pc, #260]	; (818f4 <udc_process_setup+0x25c>)
   817ee:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   817f0:	4b3e      	ldr	r3, [pc, #248]	; (818ec <udc_process_setup+0x254>)
   817f2:	689b      	ldr	r3, [r3, #8]
   817f4:	2207      	movs	r2, #7
   817f6:	705a      	strb	r2, [r3, #1]
   817f8:	e7e1      	b.n	817be <udc_process_setup+0x126>
			if (conf_num >= udc_config.confdev_lsfs->
   817fa:	4b40      	ldr	r3, [pc, #256]	; (818fc <udc_process_setup+0x264>)
   817fc:	681b      	ldr	r3, [r3, #0]
   817fe:	7c5b      	ldrb	r3, [r3, #17]
   81800:	42a3      	cmp	r3, r4
   81802:	f67f af57 	bls.w	816b4 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81806:	4b3d      	ldr	r3, [pc, #244]	; (818fc <udc_process_setup+0x264>)
   81808:	685b      	ldr	r3, [r3, #4]
   8180a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8180e:	8841      	ldrh	r1, [r0, #2]
   81810:	4b38      	ldr	r3, [pc, #224]	; (818f4 <udc_process_setup+0x25c>)
   81812:	4798      	blx	r3
   81814:	e7ec      	b.n	817f0 <udc_process_setup+0x158>
		if (udc_config.conf_bos == NULL) {
   81816:	4b39      	ldr	r3, [pc, #228]	; (818fc <udc_process_setup+0x264>)
   81818:	6958      	ldr	r0, [r3, #20]
   8181a:	2800      	cmp	r0, #0
   8181c:	f43f af51 	beq.w	816c2 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   81820:	8841      	ldrh	r1, [r0, #2]
   81822:	4b34      	ldr	r3, [pc, #208]	; (818f4 <udc_process_setup+0x25c>)
   81824:	4798      	blx	r3
   81826:	e7ca      	b.n	817be <udc_process_setup+0x126>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81828:	b2d2      	uxtb	r2, r2
   8182a:	2a01      	cmp	r2, #1
   8182c:	d01c      	beq.n	81868 <udc_process_setup+0x1d0>
   8182e:	b1b2      	cbz	r2, 8185e <udc_process_setup+0x1c6>
   81830:	2a02      	cmp	r2, #2
   81832:	f47f af3f 	bne.w	816b4 <udc_process_setup+0x1c>
		str = udc_string_product_name;
   81836:	4a32      	ldr	r2, [pc, #200]	; (81900 <udc_process_setup+0x268>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   81838:	2111      	movs	r1, #17
   8183a:	3a01      	subs	r2, #1
   8183c:	4831      	ldr	r0, [pc, #196]	; (81904 <udc_process_setup+0x26c>)
   8183e:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81840:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   81844:	f820 4b02 	strh.w	r4, [r0], #2
		for(i = 0; i < str_length; i++) {
   81848:	3301      	adds	r3, #1
   8184a:	b2db      	uxtb	r3, r3
   8184c:	428b      	cmp	r3, r1
   8184e:	d3f7      	bcc.n	81840 <udc_process_setup+0x1a8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81850:	0049      	lsls	r1, r1, #1
   81852:	3102      	adds	r1, #2
   81854:	482c      	ldr	r0, [pc, #176]	; (81908 <udc_process_setup+0x270>)
   81856:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   81858:	4b26      	ldr	r3, [pc, #152]	; (818f4 <udc_process_setup+0x25c>)
   8185a:	4798      	blx	r3
   8185c:	e7af      	b.n	817be <udc_process_setup+0x126>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   8185e:	2104      	movs	r1, #4
   81860:	482a      	ldr	r0, [pc, #168]	; (8190c <udc_process_setup+0x274>)
   81862:	4b24      	ldr	r3, [pc, #144]	; (818f4 <udc_process_setup+0x25c>)
   81864:	4798      	blx	r3
   81866:	e7aa      	b.n	817be <udc_process_setup+0x126>
		str = udc_string_manufacturer_name;
   81868:	4a29      	ldr	r2, [pc, #164]	; (81910 <udc_process_setup+0x278>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   8186a:	2105      	movs	r1, #5
   8186c:	e7e5      	b.n	8183a <udc_process_setup+0x1a2>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8186e:	2a01      	cmp	r2, #1
   81870:	f47f af27 	bne.w	816c2 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   81874:	2101      	movs	r1, #1
   81876:	4827      	ldr	r0, [pc, #156]	; (81914 <udc_process_setup+0x27c>)
   81878:	4b1e      	ldr	r3, [pc, #120]	; (818f4 <udc_process_setup+0x25c>)
   8187a:	4798      	blx	r3
   8187c:	e073      	b.n	81966 <udc_process_setup+0x2ce>
			switch (udd_g_ctrlreq.req.bRequest) {
   8187e:	491b      	ldr	r1, [pc, #108]	; (818ec <udc_process_setup+0x254>)
   81880:	7849      	ldrb	r1, [r1, #1]
   81882:	290a      	cmp	r1, #10
   81884:	f47f af3d 	bne.w	81702 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   81888:	2a01      	cmp	r2, #1
   8188a:	f040 8122 	bne.w	81ad2 <udc_process_setup+0x43a>
	if (!udc_num_configuration) {
   8188e:	4b21      	ldr	r3, [pc, #132]	; (81914 <udc_process_setup+0x27c>)
   81890:	781b      	ldrb	r3, [r3, #0]
   81892:	2b00      	cmp	r3, #0
   81894:	f000 811d 	beq.w	81ad2 <udc_process_setup+0x43a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81898:	4b14      	ldr	r3, [pc, #80]	; (818ec <udc_process_setup+0x254>)
   8189a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8189c:	4b1e      	ldr	r3, [pc, #120]	; (81918 <udc_process_setup+0x280>)
   8189e:	681d      	ldr	r5, [r3, #0]
   818a0:	682b      	ldr	r3, [r5, #0]
   818a2:	791b      	ldrb	r3, [r3, #4]
   818a4:	42a3      	cmp	r3, r4
   818a6:	f240 8114 	bls.w	81ad2 <udc_process_setup+0x43a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   818aa:	2100      	movs	r1, #0
   818ac:	4620      	mov	r0, r4
   818ae:	4b1b      	ldr	r3, [pc, #108]	; (8191c <udc_process_setup+0x284>)
   818b0:	4798      	blx	r3
   818b2:	2800      	cmp	r0, #0
   818b4:	f43f aefe 	beq.w	816b4 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   818b8:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   818ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   818be:	68db      	ldr	r3, [r3, #12]
   818c0:	4798      	blx	r3
   818c2:	4b17      	ldr	r3, [pc, #92]	; (81920 <udc_process_setup+0x288>)
   818c4:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   818c6:	2101      	movs	r1, #1
   818c8:	4618      	mov	r0, r3
   818ca:	4b0a      	ldr	r3, [pc, #40]	; (818f4 <udc_process_setup+0x25c>)
   818cc:	4798      	blx	r3
   818ce:	e04a      	b.n	81966 <udc_process_setup+0x2ce>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   818d0:	2a02      	cmp	r2, #2
   818d2:	f47f aef6 	bne.w	816c2 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   818d6:	4b05      	ldr	r3, [pc, #20]	; (818ec <udc_process_setup+0x254>)
   818d8:	7918      	ldrb	r0, [r3, #4]
   818da:	4b12      	ldr	r3, [pc, #72]	; (81924 <udc_process_setup+0x28c>)
   818dc:	4798      	blx	r3
   818de:	4b12      	ldr	r3, [pc, #72]	; (81928 <udc_process_setup+0x290>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   818e0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   818e2:	2102      	movs	r1, #2
   818e4:	4618      	mov	r0, r3
   818e6:	4b03      	ldr	r3, [pc, #12]	; (818f4 <udc_process_setup+0x25c>)
   818e8:	4798      	blx	r3
   818ea:	e03c      	b.n	81966 <udc_process_setup+0x2ce>
   818ec:	20075908 	.word	0x20075908
   818f0:	2007159a 	.word	0x2007159a
   818f4:	00082d2d 	.word	0x00082d2d
   818f8:	00082cc1 	.word	0x00082cc1
   818fc:	20070154 	.word	0x20070154
   81900:	2007025c 	.word	0x2007025c
   81904:	2007022e 	.word	0x2007022e
   81908:	2007022c 	.word	0x2007022c
   8190c:	20070250 	.word	0x20070250
   81910:	20070254 	.word	0x20070254
   81914:	200715a4 	.word	0x200715a4
   81918:	200715a8 	.word	0x200715a8
   8191c:	000814d5 	.word	0x000814d5
   81920:	200715a0 	.word	0x200715a0
   81924:	00082d95 	.word	0x00082d95
   81928:	2007159c 	.word	0x2007159c
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8192c:	f013 031f 	ands.w	r3, r3, #31
   81930:	f040 80b5 	bne.w	81a9e <udc_process_setup+0x406>
			switch (udd_g_ctrlreq.req.bRequest) {
   81934:	4a8a      	ldr	r2, [pc, #552]	; (81b60 <udc_process_setup+0x4c8>)
   81936:	7852      	ldrb	r2, [r2, #1]
   81938:	3a01      	subs	r2, #1
   8193a:	2a08      	cmp	r2, #8
   8193c:	f200 80af 	bhi.w	81a9e <udc_process_setup+0x406>
   81940:	e8df f012 	tbh	[pc, r2, lsl #1]
   81944:	00ad0013 	.word	0x00ad0013
   81948:	00ad0023 	.word	0x00ad0023
   8194c:	00ad0009 	.word	0x00ad0009
   81950:	00ad00ad 	.word	0x00ad00ad
   81954:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   81956:	4b82      	ldr	r3, [pc, #520]	; (81b60 <udc_process_setup+0x4c8>)
   81958:	88db      	ldrh	r3, [r3, #6]
   8195a:	2b00      	cmp	r3, #0
   8195c:	f47f aeb1 	bne.w	816c2 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   81960:	4a80      	ldr	r2, [pc, #512]	; (81b64 <udc_process_setup+0x4cc>)
   81962:	4b7f      	ldr	r3, [pc, #508]	; (81b60 <udc_process_setup+0x4c8>)
   81964:	611a      	str	r2, [r3, #16]
			return true;
   81966:	2301      	movs	r3, #1
   81968:	e6b3      	b.n	816d2 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   8196a:	4b7d      	ldr	r3, [pc, #500]	; (81b60 <udc_process_setup+0x4c8>)
   8196c:	88db      	ldrh	r3, [r3, #6]
   8196e:	2b00      	cmp	r3, #0
   81970:	f47f aea7 	bne.w	816c2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81974:	4b7a      	ldr	r3, [pc, #488]	; (81b60 <udc_process_setup+0x4c8>)
   81976:	885b      	ldrh	r3, [r3, #2]
   81978:	2b01      	cmp	r3, #1
   8197a:	f47f aea2 	bne.w	816c2 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   8197e:	4a7a      	ldr	r2, [pc, #488]	; (81b68 <udc_process_setup+0x4d0>)
   81980:	8813      	ldrh	r3, [r2, #0]
   81982:	f023 0302 	bic.w	r3, r3, #2
   81986:	8013      	strh	r3, [r2, #0]
   81988:	e7ed      	b.n	81966 <udc_process_setup+0x2ce>
	if (udd_g_ctrlreq.req.wLength) {
   8198a:	4b75      	ldr	r3, [pc, #468]	; (81b60 <udc_process_setup+0x4c8>)
   8198c:	88db      	ldrh	r3, [r3, #6]
   8198e:	2b00      	cmp	r3, #0
   81990:	f47f ae97 	bne.w	816c2 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   81994:	4b72      	ldr	r3, [pc, #456]	; (81b60 <udc_process_setup+0x4c8>)
   81996:	885b      	ldrh	r3, [r3, #2]
   81998:	2b02      	cmp	r3, #2
   8199a:	f040 80dd 	bne.w	81b58 <udc_process_setup+0x4c0>
		if (!udd_is_high_speed()) {
   8199e:	4b73      	ldr	r3, [pc, #460]	; (81b6c <udc_process_setup+0x4d4>)
   819a0:	4798      	blx	r3
   819a2:	2800      	cmp	r0, #0
   819a4:	f43f ae86 	beq.w	816b4 <udc_process_setup+0x1c>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   819a8:	4b6d      	ldr	r3, [pc, #436]	; (81b60 <udc_process_setup+0x4c8>)
   819aa:	791b      	ldrb	r3, [r3, #4]
   819ac:	2b00      	cmp	r3, #0
   819ae:	f47f ae81 	bne.w	816b4 <udc_process_setup+0x1c>
		udc_reset();
   819b2:	4b6f      	ldr	r3, [pc, #444]	; (81b70 <udc_process_setup+0x4d8>)
   819b4:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   819b6:	4b6a      	ldr	r3, [pc, #424]	; (81b60 <udc_process_setup+0x4c8>)
   819b8:	889b      	ldrh	r3, [r3, #4]
   819ba:	0a1b      	lsrs	r3, r3, #8
   819bc:	3b01      	subs	r3, #1
   819be:	2b03      	cmp	r3, #3
   819c0:	f200 80cc 	bhi.w	81b5c <udc_process_setup+0x4c4>
   819c4:	e8df f003 	tbb	[pc, r3]
   819c8:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   819cc:	4a69      	ldr	r2, [pc, #420]	; (81b74 <udc_process_setup+0x4dc>)
   819ce:	4b64      	ldr	r3, [pc, #400]	; (81b60 <udc_process_setup+0x4c8>)
   819d0:	611a      	str	r2, [r3, #16]
   819d2:	e7c8      	b.n	81966 <udc_process_setup+0x2ce>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   819d4:	4a68      	ldr	r2, [pc, #416]	; (81b78 <udc_process_setup+0x4e0>)
   819d6:	4b62      	ldr	r3, [pc, #392]	; (81b60 <udc_process_setup+0x4c8>)
   819d8:	611a      	str	r2, [r3, #16]
   819da:	e7c4      	b.n	81966 <udc_process_setup+0x2ce>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   819dc:	4a67      	ldr	r2, [pc, #412]	; (81b7c <udc_process_setup+0x4e4>)
   819de:	4b60      	ldr	r3, [pc, #384]	; (81b60 <udc_process_setup+0x4c8>)
   819e0:	611a      	str	r2, [r3, #16]
   819e2:	e7c0      	b.n	81966 <udc_process_setup+0x2ce>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   819e4:	4a66      	ldr	r2, [pc, #408]	; (81b80 <udc_process_setup+0x4e8>)
   819e6:	4b5e      	ldr	r3, [pc, #376]	; (81b60 <udc_process_setup+0x4c8>)
   819e8:	611a      	str	r2, [r3, #16]
   819ea:	e7bc      	b.n	81966 <udc_process_setup+0x2ce>
	if (udd_g_ctrlreq.req.wLength) {
   819ec:	4b5c      	ldr	r3, [pc, #368]	; (81b60 <udc_process_setup+0x4c8>)
   819ee:	88db      	ldrh	r3, [r3, #6]
   819f0:	2b00      	cmp	r3, #0
   819f2:	f47f ae66 	bne.w	816c2 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   819f6:	4b63      	ldr	r3, [pc, #396]	; (81b84 <udc_process_setup+0x4ec>)
   819f8:	4798      	blx	r3
   819fa:	2800      	cmp	r0, #0
   819fc:	f43f ae5a 	beq.w	816b4 <udc_process_setup+0x1c>
	if (udd_is_high_speed()) {
   81a00:	4b5a      	ldr	r3, [pc, #360]	; (81b6c <udc_process_setup+0x4d4>)
   81a02:	4798      	blx	r3
   81a04:	2800      	cmp	r0, #0
   81a06:	d036      	beq.n	81a76 <udc_process_setup+0x3de>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81a08:	4b55      	ldr	r3, [pc, #340]	; (81b60 <udc_process_setup+0x4c8>)
   81a0a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   81a0c:	4b5e      	ldr	r3, [pc, #376]	; (81b88 <udc_process_setup+0x4f0>)
   81a0e:	689b      	ldr	r3, [r3, #8]
   81a10:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81a12:	429a      	cmp	r2, r3
   81a14:	f73f ae4e 	bgt.w	816b4 <udc_process_setup+0x1c>
	udc_reset();
   81a18:	4b55      	ldr	r3, [pc, #340]	; (81b70 <udc_process_setup+0x4d8>)
   81a1a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   81a1c:	4b50      	ldr	r3, [pc, #320]	; (81b60 <udc_process_setup+0x4c8>)
   81a1e:	789b      	ldrb	r3, [r3, #2]
   81a20:	4a5a      	ldr	r2, [pc, #360]	; (81b8c <udc_process_setup+0x4f4>)
   81a22:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   81a24:	2b00      	cmp	r3, #0
   81a26:	d09e      	beq.n	81966 <udc_process_setup+0x2ce>
	if (udd_is_high_speed()) {
   81a28:	4b50      	ldr	r3, [pc, #320]	; (81b6c <udc_process_setup+0x4d4>)
   81a2a:	4798      	blx	r3
   81a2c:	2800      	cmp	r0, #0
   81a2e:	d02a      	beq.n	81a86 <udc_process_setup+0x3ee>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81a30:	4b56      	ldr	r3, [pc, #344]	; (81b8c <udc_process_setup+0x4f4>)
   81a32:	781b      	ldrb	r3, [r3, #0]
   81a34:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81a38:	3b01      	subs	r3, #1
   81a3a:	4a53      	ldr	r2, [pc, #332]	; (81b88 <udc_process_setup+0x4f0>)
   81a3c:	6912      	ldr	r2, [r2, #16]
   81a3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81a42:	4a53      	ldr	r2, [pc, #332]	; (81b90 <udc_process_setup+0x4f8>)
   81a44:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81a46:	4b52      	ldr	r3, [pc, #328]	; (81b90 <udc_process_setup+0x4f8>)
   81a48:	681b      	ldr	r3, [r3, #0]
   81a4a:	681b      	ldr	r3, [r3, #0]
   81a4c:	791b      	ldrb	r3, [r3, #4]
   81a4e:	2b00      	cmp	r3, #0
   81a50:	d089      	beq.n	81966 <udc_process_setup+0x2ce>
   81a52:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   81a54:	4626      	mov	r6, r4
   81a56:	4d4f      	ldr	r5, [pc, #316]	; (81b94 <udc_process_setup+0x4fc>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81a58:	4f4d      	ldr	r7, [pc, #308]	; (81b90 <udc_process_setup+0x4f8>)
		if (!udc_iface_enable(iface_num, 0)) {
   81a5a:	4631      	mov	r1, r6
   81a5c:	4620      	mov	r0, r4
   81a5e:	47a8      	blx	r5
   81a60:	2800      	cmp	r0, #0
   81a62:	f43f ae27 	beq.w	816b4 <udc_process_setup+0x1c>
			iface_num++) {
   81a66:	3401      	adds	r4, #1
   81a68:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81a6a:	683b      	ldr	r3, [r7, #0]
   81a6c:	681b      	ldr	r3, [r3, #0]
   81a6e:	791b      	ldrb	r3, [r3, #4]
   81a70:	42a3      	cmp	r3, r4
   81a72:	d8f2      	bhi.n	81a5a <udc_process_setup+0x3c2>
   81a74:	e777      	b.n	81966 <udc_process_setup+0x2ce>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81a76:	4b3a      	ldr	r3, [pc, #232]	; (81b60 <udc_process_setup+0x4c8>)
   81a78:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   81a7a:	4b43      	ldr	r3, [pc, #268]	; (81b88 <udc_process_setup+0x4f0>)
   81a7c:	681b      	ldr	r3, [r3, #0]
   81a7e:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81a80:	429a      	cmp	r2, r3
   81a82:	ddc9      	ble.n	81a18 <udc_process_setup+0x380>
   81a84:	e616      	b.n	816b4 <udc_process_setup+0x1c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81a86:	4b41      	ldr	r3, [pc, #260]	; (81b8c <udc_process_setup+0x4f4>)
   81a88:	781b      	ldrb	r3, [r3, #0]
   81a8a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81a8e:	3b01      	subs	r3, #1
   81a90:	4a3d      	ldr	r2, [pc, #244]	; (81b88 <udc_process_setup+0x4f0>)
   81a92:	6852      	ldr	r2, [r2, #4]
   81a94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   81a98:	4a3d      	ldr	r2, [pc, #244]	; (81b90 <udc_process_setup+0x4f8>)
   81a9a:	6013      	str	r3, [r2, #0]
   81a9c:	e7d3      	b.n	81a46 <udc_process_setup+0x3ae>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81a9e:	2b01      	cmp	r3, #1
   81aa0:	d00d      	beq.n	81abe <udc_process_setup+0x426>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81aa2:	2b02      	cmp	r3, #2
   81aa4:	f47f ae06 	bne.w	816b4 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   81aa8:	4b2d      	ldr	r3, [pc, #180]	; (81b60 <udc_process_setup+0x4c8>)
   81aaa:	785b      	ldrb	r3, [r3, #1]
   81aac:	2b01      	cmp	r3, #1
   81aae:	d02e      	beq.n	81b0e <udc_process_setup+0x476>
   81ab0:	2b03      	cmp	r3, #3
   81ab2:	d03c      	beq.n	81b2e <udc_process_setup+0x496>
	return false;
   81ab4:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   81ab6:	2b00      	cmp	r3, #0
   81ab8:	f47f ae0b 	bne.w	816d2 <udc_process_setup+0x3a>
   81abc:	e5fa      	b.n	816b4 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
   81abe:	4a28      	ldr	r2, [pc, #160]	; (81b60 <udc_process_setup+0x4c8>)
   81ac0:	7852      	ldrb	r2, [r2, #1]
   81ac2:	2a0b      	cmp	r2, #11
   81ac4:	d1ed      	bne.n	81aa2 <udc_process_setup+0x40a>
	if (udd_g_ctrlreq.req.wLength) {
   81ac6:	4b26      	ldr	r3, [pc, #152]	; (81b60 <udc_process_setup+0x4c8>)
   81ac8:	88db      	ldrh	r3, [r3, #6]
   81aca:	b913      	cbnz	r3, 81ad2 <udc_process_setup+0x43a>
	if (!udc_num_configuration) {
   81acc:	4b2f      	ldr	r3, [pc, #188]	; (81b8c <udc_process_setup+0x4f4>)
   81ace:	781b      	ldrb	r3, [r3, #0]
   81ad0:	b973      	cbnz	r3, 81af0 <udc_process_setup+0x458>
	if (0 == udc_num_configuration) {
   81ad2:	4b2e      	ldr	r3, [pc, #184]	; (81b8c <udc_process_setup+0x4f4>)
   81ad4:	781b      	ldrb	r3, [r3, #0]
   81ad6:	2b00      	cmp	r3, #0
   81ad8:	f000 80ab 	beq.w	81c32 <udc_process_setup+0x59a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81adc:	4b20      	ldr	r3, [pc, #128]	; (81b60 <udc_process_setup+0x4c8>)
   81ade:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81ae0:	4b2b      	ldr	r3, [pc, #172]	; (81b90 <udc_process_setup+0x4f8>)
   81ae2:	681d      	ldr	r5, [r3, #0]
   81ae4:	682b      	ldr	r3, [r5, #0]
   81ae6:	791b      	ldrb	r3, [r3, #4]
   81ae8:	42a3      	cmp	r3, r4
   81aea:	d85d      	bhi.n	81ba8 <udc_process_setup+0x510>
	return false;
   81aec:	2300      	movs	r3, #0
   81aee:	e5f0      	b.n	816d2 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81af0:	4b1b      	ldr	r3, [pc, #108]	; (81b60 <udc_process_setup+0x4c8>)
   81af2:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81af4:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   81af6:	4620      	mov	r0, r4
   81af8:	4b27      	ldr	r3, [pc, #156]	; (81b98 <udc_process_setup+0x500>)
   81afa:	4798      	blx	r3
   81afc:	2800      	cmp	r0, #0
   81afe:	f43f add9 	beq.w	816b4 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
   81b02:	b2e9      	uxtb	r1, r5
   81b04:	4620      	mov	r0, r4
   81b06:	4b23      	ldr	r3, [pc, #140]	; (81b94 <udc_process_setup+0x4fc>)
   81b08:	4798      	blx	r3
   81b0a:	4603      	mov	r3, r0
   81b0c:	e7d3      	b.n	81ab6 <udc_process_setup+0x41e>
	if (udd_g_ctrlreq.req.wLength) {
   81b0e:	4b14      	ldr	r3, [pc, #80]	; (81b60 <udc_process_setup+0x4c8>)
   81b10:	88db      	ldrh	r3, [r3, #6]
   81b12:	2b00      	cmp	r3, #0
   81b14:	f47f add5 	bne.w	816c2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81b18:	4b11      	ldr	r3, [pc, #68]	; (81b60 <udc_process_setup+0x4c8>)
   81b1a:	885b      	ldrh	r3, [r3, #2]
   81b1c:	2b00      	cmp	r3, #0
   81b1e:	f47f add0 	bne.w	816c2 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81b22:	4b0f      	ldr	r3, [pc, #60]	; (81b60 <udc_process_setup+0x4c8>)
   81b24:	7918      	ldrb	r0, [r3, #4]
   81b26:	4b1d      	ldr	r3, [pc, #116]	; (81b9c <udc_process_setup+0x504>)
   81b28:	4798      	blx	r3
   81b2a:	4603      	mov	r3, r0
   81b2c:	e7c3      	b.n	81ab6 <udc_process_setup+0x41e>
	if (udd_g_ctrlreq.req.wLength) {
   81b2e:	4b0c      	ldr	r3, [pc, #48]	; (81b60 <udc_process_setup+0x4c8>)
   81b30:	88db      	ldrh	r3, [r3, #6]
   81b32:	2b00      	cmp	r3, #0
   81b34:	f47f adc5 	bne.w	816c2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81b38:	4b09      	ldr	r3, [pc, #36]	; (81b60 <udc_process_setup+0x4c8>)
   81b3a:	885b      	ldrh	r3, [r3, #2]
   81b3c:	2b00      	cmp	r3, #0
   81b3e:	f47f adc0 	bne.w	816c2 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   81b42:	4c07      	ldr	r4, [pc, #28]	; (81b60 <udc_process_setup+0x4c8>)
   81b44:	7920      	ldrb	r0, [r4, #4]
   81b46:	4b16      	ldr	r3, [pc, #88]	; (81ba0 <udc_process_setup+0x508>)
   81b48:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81b4a:	7920      	ldrb	r0, [r4, #4]
   81b4c:	4b15      	ldr	r3, [pc, #84]	; (81ba4 <udc_process_setup+0x50c>)
   81b4e:	4798      	blx	r3
   81b50:	4603      	mov	r3, r0
   81b52:	e7b0      	b.n	81ab6 <udc_process_setup+0x41e>
		return false;
   81b54:	2300      	movs	r3, #0
   81b56:	e7ae      	b.n	81ab6 <udc_process_setup+0x41e>
		return false;
   81b58:	2300      	movs	r3, #0
   81b5a:	e7ac      	b.n	81ab6 <udc_process_setup+0x41e>
	return false;
   81b5c:	2300      	movs	r3, #0
   81b5e:	e7aa      	b.n	81ab6 <udc_process_setup+0x41e>
   81b60:	20075908 	.word	0x20075908
   81b64:	000814bd 	.word	0x000814bd
   81b68:	2007159a 	.word	0x2007159a
   81b6c:	00082cc1 	.word	0x00082cc1
   81b70:	00081611 	.word	0x00081611
   81b74:	000832f9 	.word	0x000832f9
   81b78:	00083315 	.word	0x00083315
   81b7c:	00083331 	.word	0x00083331
   81b80:	00083345 	.word	0x00083345
   81b84:	00082cfd 	.word	0x00082cfd
   81b88:	20070154 	.word	0x20070154
   81b8c:	200715a4 	.word	0x200715a4
   81b90:	200715a8 	.word	0x200715a8
   81b94:	000815b5 	.word	0x000815b5
   81b98:	00081549 	.word	0x00081549
   81b9c:	00082ea9 	.word	0x00082ea9
   81ba0:	00083279 	.word	0x00083279
   81ba4:	00082da9 	.word	0x00082da9
	if (!udc_update_iface_desc(iface_num, 0)) {
   81ba8:	2100      	movs	r1, #0
   81baa:	4620      	mov	r0, r4
   81bac:	4b22      	ldr	r3, [pc, #136]	; (81c38 <udc_process_setup+0x5a0>)
   81bae:	4798      	blx	r3
   81bb0:	2800      	cmp	r0, #0
   81bb2:	f43f ad86 	beq.w	816c2 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81bb6:	686b      	ldr	r3, [r5, #4]
   81bb8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81bbc:	68eb      	ldr	r3, [r5, #12]
   81bbe:	4798      	blx	r3
   81bc0:	4601      	mov	r1, r0
   81bc2:	4620      	mov	r0, r4
   81bc4:	4b1c      	ldr	r3, [pc, #112]	; (81c38 <udc_process_setup+0x5a0>)
   81bc6:	4798      	blx	r3
   81bc8:	2800      	cmp	r0, #0
   81bca:	f43f ad7a 	beq.w	816c2 <udc_process_setup+0x2a>
	return udi_api->setup();
   81bce:	68ab      	ldr	r3, [r5, #8]
   81bd0:	4798      	blx	r3
		if (udc_req_iface()) {
   81bd2:	4603      	mov	r3, r0
   81bd4:	2800      	cmp	r0, #0
   81bd6:	f47f ad7c 	bne.w	816d2 <udc_process_setup+0x3a>
   81bda:	e572      	b.n	816c2 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
   81bdc:	4b17      	ldr	r3, [pc, #92]	; (81c3c <udc_process_setup+0x5a4>)
   81bde:	781b      	ldrb	r3, [r3, #0]
   81be0:	b30b      	cbz	r3, 81c26 <udc_process_setup+0x58e>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81be2:	4b17      	ldr	r3, [pc, #92]	; (81c40 <udc_process_setup+0x5a8>)
   81be4:	681a      	ldr	r2, [r3, #0]
   81be6:	6813      	ldr	r3, [r2, #0]
   81be8:	791b      	ldrb	r3, [r3, #4]
   81bea:	b1f3      	cbz	r3, 81c2a <udc_process_setup+0x592>
   81bec:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81bee:	4e12      	ldr	r6, [pc, #72]	; (81c38 <udc_process_setup+0x5a0>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81bf0:	4f13      	ldr	r7, [pc, #76]	; (81c40 <udc_process_setup+0x5a8>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   81bf2:	6853      	ldr	r3, [r2, #4]
   81bf4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81bf8:	68eb      	ldr	r3, [r5, #12]
   81bfa:	4798      	blx	r3
   81bfc:	4601      	mov	r1, r0
   81bfe:	4620      	mov	r0, r4
   81c00:	47b0      	blx	r6
   81c02:	4603      	mov	r3, r0
   81c04:	2800      	cmp	r0, #0
   81c06:	f43f ad64 	beq.w	816d2 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
   81c0a:	68ab      	ldr	r3, [r5, #8]
   81c0c:	4798      	blx	r3
   81c0e:	4603      	mov	r3, r0
   81c10:	2800      	cmp	r0, #0
   81c12:	f47f ad5e 	bne.w	816d2 <udc_process_setup+0x3a>
			iface_num++) {
   81c16:	3401      	adds	r4, #1
   81c18:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81c1a:	683a      	ldr	r2, [r7, #0]
   81c1c:	6811      	ldr	r1, [r2, #0]
   81c1e:	7909      	ldrb	r1, [r1, #4]
   81c20:	42a1      	cmp	r1, r4
   81c22:	d8e6      	bhi.n	81bf2 <udc_process_setup+0x55a>
   81c24:	e555      	b.n	816d2 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
   81c26:	2300      	movs	r3, #0
   81c28:	e553      	b.n	816d2 <udc_process_setup+0x3a>
	return false;
   81c2a:	2300      	movs	r3, #0
   81c2c:	e551      	b.n	816d2 <udc_process_setup+0x3a>
			return false; // Error from USB host
   81c2e:	2300      	movs	r3, #0
   81c30:	e54f      	b.n	816d2 <udc_process_setup+0x3a>
	return false;
   81c32:	2300      	movs	r3, #0
   81c34:	e54d      	b.n	816d2 <udc_process_setup+0x3a>
   81c36:	bf00      	nop
   81c38:	000814d5 	.word	0x000814d5
   81c3c:	200715a4 	.word	0x200715a4
   81c40:	200715a8 	.word	0x200715a8

00081c44 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81c44:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81c46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81c4a:	4b1f      	ldr	r3, [pc, #124]	; (81cc8 <board_init+0x84>)
   81c4c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81c4e:	200b      	movs	r0, #11
   81c50:	4c1e      	ldr	r4, [pc, #120]	; (81ccc <board_init+0x88>)
   81c52:	47a0      	blx	r4
   81c54:	200c      	movs	r0, #12
   81c56:	47a0      	blx	r4
   81c58:	200d      	movs	r0, #13
   81c5a:	47a0      	blx	r4
   81c5c:	200e      	movs	r0, #14
   81c5e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81c60:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c64:	203b      	movs	r0, #59	; 0x3b
   81c66:	4c1a      	ldr	r4, [pc, #104]	; (81cd0 <board_init+0x8c>)
   81c68:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81c6a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c6e:	2055      	movs	r0, #85	; 0x55
   81c70:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81c72:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c76:	2056      	movs	r0, #86	; 0x56
   81c78:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81c7a:	4916      	ldr	r1, [pc, #88]	; (81cd4 <board_init+0x90>)
   81c7c:	2068      	movs	r0, #104	; 0x68
   81c7e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81c80:	4915      	ldr	r1, [pc, #84]	; (81cd8 <board_init+0x94>)
   81c82:	205c      	movs	r0, #92	; 0x5c
   81c84:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   81c86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c8a:	2019      	movs	r0, #25
   81c8c:	47a0      	blx	r4
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81c8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c92:	201a      	movs	r0, #26
   81c94:	47a0      	blx	r4
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81c96:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c9a:	201b      	movs	r0, #27
   81c9c:	47a0      	blx	r4
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81c9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ca2:	201c      	movs	r0, #28
   81ca4:	47a0      	blx	r4
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   81ca6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81caa:	2011      	movs	r0, #17
   81cac:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81cae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81cb2:	2012      	movs	r0, #18
   81cb4:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   81cb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81cba:	200a      	movs	r0, #10
   81cbc:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   81cbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81cc2:	200b      	movs	r0, #11
   81cc4:	47a0      	blx	r4
   81cc6:	bd10      	pop	{r4, pc}
   81cc8:	400e1a50 	.word	0x400e1a50
   81ccc:	000820a5 	.word	0x000820a5
   81cd0:	00081e4d 	.word	0x00081e4d
   81cd4:	28000079 	.word	0x28000079
   81cd8:	28000001 	.word	0x28000001

00081cdc <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   81cdc:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   81cde:	2401      	movs	r4, #1
   81ce0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   81ce2:	2400      	movs	r4, #0
   81ce4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   81ce6:	f240 2502 	movw	r5, #514	; 0x202
   81cea:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   81cee:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   81cf2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   81cf6:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   81cf8:	0052      	lsls	r2, r2, #1
   81cfa:	fbb1 f2f2 	udiv	r2, r1, r2
   81cfe:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   81d00:	0212      	lsls	r2, r2, #8
   81d02:	b292      	uxth	r2, r2
   81d04:	432b      	orrs	r3, r5
   81d06:	431a      	orrs	r2, r3
   81d08:	6042      	str	r2, [r0, #4]
	return 0;
}
   81d0a:	4620      	mov	r0, r4
   81d0c:	bc30      	pop	{r4, r5}
   81d0e:	4770      	bx	lr

00081d10 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   81d10:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   81d12:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   81d14:	0609      	lsls	r1, r1, #24
   81d16:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   81d1a:	4321      	orrs	r1, r4
   81d1c:	430a      	orrs	r2, r1
   81d1e:	0719      	lsls	r1, r3, #28
   81d20:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   81d24:	4311      	orrs	r1, r2
   81d26:	6041      	str	r1, [r0, #4]
}
   81d28:	bc10      	pop	{r4}
   81d2a:	4770      	bx	lr

00081d2c <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   81d2c:	2302      	movs	r3, #2
   81d2e:	6003      	str	r3, [r0, #0]
   81d30:	4770      	bx	lr

00081d32 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   81d32:	2301      	movs	r3, #1
   81d34:	fa03 f101 	lsl.w	r1, r3, r1
   81d38:	6101      	str	r1, [r0, #16]
   81d3a:	4770      	bx	lr

00081d3c <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   81d3c:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   81d3e:	bf9a      	itte	ls
   81d40:	3050      	addls	r0, #80	; 0x50
   81d42:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
	uint32_t ul_data = 0;
   81d46:	2000      	movhi	r0, #0
	}

	return ul_data;
}
   81d48:	4770      	bx	lr

00081d4a <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   81d4a:	6a00      	ldr	r0, [r0, #32]
}
   81d4c:	4770      	bx	lr

00081d4e <adc_enable_tag>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_enable_tag(Adc *p_adc)
{
	p_adc->ADC_EMR |= ADC_EMR_TAG;
   81d4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   81d54:	6403      	str	r3, [r0, #64]	; 0x40
   81d56:	4770      	bx	lr

00081d58 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   81d58:	6241      	str	r1, [r0, #36]	; 0x24
   81d5a:	4770      	bx	lr

00081d5c <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   81d5c:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   81d5e:	4770      	bx	lr

00081d60 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   81d60:	460b      	mov	r3, r1
   81d62:	b119      	cbz	r1, 81d6c <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   81d64:	6809      	ldr	r1, [r1, #0]
   81d66:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   81d68:	685b      	ldr	r3, [r3, #4]
   81d6a:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
   81d6c:	b11a      	cbz	r2, 81d76 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   81d6e:	6813      	ldr	r3, [r2, #0]
   81d70:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   81d72:	6853      	ldr	r3, [r2, #4]
   81d74:	61c3      	str	r3, [r0, #28]
   81d76:	4770      	bx	lr

00081d78 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   81d78:	460b      	mov	r3, r1
   81d7a:	b119      	cbz	r1, 81d84 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   81d7c:	6809      	ldr	r1, [r1, #0]
   81d7e:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   81d80:	685b      	ldr	r3, [r3, #4]
   81d82:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
   81d84:	b11a      	cbz	r2, 81d8e <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   81d86:	6813      	ldr	r3, [r2, #0]
   81d88:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   81d8a:	6853      	ldr	r3, [r2, #4]
   81d8c:	6143      	str	r3, [r0, #20]
   81d8e:	4770      	bx	lr

00081d90 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   81d90:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
   81d94:	05c9      	lsls	r1, r1, #23
   81d96:	0dc9      	lsrs	r1, r1, #23
	p_pdc->PERIPH_PTCR =
   81d98:	6201      	str	r1, [r0, #32]
   81d9a:	4770      	bx	lr

00081d9c <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   81d9c:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
   81da0:	f021 0101 	bic.w	r1, r1, #1
   81da4:	0589      	lsls	r1, r1, #22
   81da6:	0d89      	lsrs	r1, r1, #22
	p_pdc->PERIPH_PTCR =
   81da8:	6201      	str	r1, [r0, #32]
   81daa:	4770      	bx	lr

00081dac <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81dac:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81dae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81db2:	d016      	beq.n	81de2 <pio_set_peripheral+0x36>
   81db4:	d80b      	bhi.n	81dce <pio_set_peripheral+0x22>
   81db6:	b149      	cbz	r1, 81dcc <pio_set_peripheral+0x20>
   81db8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81dbc:	d105      	bne.n	81dca <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81dbe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81dc0:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81dc2:	400b      	ands	r3, r1
   81dc4:	ea23 0302 	bic.w	r3, r3, r2
   81dc8:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81dca:	6042      	str	r2, [r0, #4]
   81dcc:	4770      	bx	lr
	switch (ul_type) {
   81dce:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81dd2:	d0fb      	beq.n	81dcc <pio_set_peripheral+0x20>
   81dd4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81dd8:	d0f8      	beq.n	81dcc <pio_set_peripheral+0x20>
   81dda:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81dde:	d1f4      	bne.n	81dca <pio_set_peripheral+0x1e>
   81de0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81de2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81de4:	4313      	orrs	r3, r2
   81de6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81de8:	e7ef      	b.n	81dca <pio_set_peripheral+0x1e>

00081dea <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81dea:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81dec:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81df0:	bf14      	ite	ne
   81df2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81df4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81df6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81dfa:	bf14      	ite	ne
   81dfc:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81dfe:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81e00:	f012 0f02 	tst.w	r2, #2
   81e04:	d107      	bne.n	81e16 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81e06:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81e0a:	bf18      	it	ne
   81e0c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81e10:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81e12:	6001      	str	r1, [r0, #0]
   81e14:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81e16:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81e1a:	e7f9      	b.n	81e10 <pio_set_input+0x26>

00081e1c <pio_set_output>:
{
   81e1c:	b410      	push	{r4}
   81e1e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81e20:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81e22:	b944      	cbnz	r4, 81e36 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81e24:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81e26:	b143      	cbz	r3, 81e3a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81e28:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81e2a:	b942      	cbnz	r2, 81e3e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81e2c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81e2e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81e30:	6001      	str	r1, [r0, #0]
}
   81e32:	bc10      	pop	{r4}
   81e34:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81e36:	6641      	str	r1, [r0, #100]	; 0x64
   81e38:	e7f5      	b.n	81e26 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81e3a:	6541      	str	r1, [r0, #84]	; 0x54
   81e3c:	e7f5      	b.n	81e2a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81e3e:	6301      	str	r1, [r0, #48]	; 0x30
   81e40:	e7f5      	b.n	81e2e <pio_set_output+0x12>

00081e42 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81e42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81e44:	4770      	bx	lr

00081e46 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81e46:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81e48:	4770      	bx	lr
	...

00081e4c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81e4c:	b570      	push	{r4, r5, r6, lr}
   81e4e:	b082      	sub	sp, #8
   81e50:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e52:	0943      	lsrs	r3, r0, #5
   81e54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e58:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e5c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81e5e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81e62:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81e66:	d031      	beq.n	81ecc <pio_configure_pin+0x80>
   81e68:	d816      	bhi.n	81e98 <pio_configure_pin+0x4c>
   81e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81e6e:	d01b      	beq.n	81ea8 <pio_configure_pin+0x5c>
   81e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81e74:	d116      	bne.n	81ea4 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81e76:	f000 001f 	and.w	r0, r0, #31
   81e7a:	2601      	movs	r6, #1
   81e7c:	4086      	lsls	r6, r0
   81e7e:	4632      	mov	r2, r6
   81e80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81e84:	4620      	mov	r0, r4
   81e86:	4b22      	ldr	r3, [pc, #136]	; (81f10 <pio_configure_pin+0xc4>)
   81e88:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81e8a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81e8e:	bf14      	ite	ne
   81e90:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81e92:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81e94:	2001      	movs	r0, #1
   81e96:	e017      	b.n	81ec8 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81e9c:	d021      	beq.n	81ee2 <pio_configure_pin+0x96>
   81e9e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81ea2:	d01e      	beq.n	81ee2 <pio_configure_pin+0x96>
		return 0;
   81ea4:	2000      	movs	r0, #0
   81ea6:	e00f      	b.n	81ec8 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81ea8:	f000 001f 	and.w	r0, r0, #31
   81eac:	2601      	movs	r6, #1
   81eae:	4086      	lsls	r6, r0
   81eb0:	4632      	mov	r2, r6
   81eb2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81eb6:	4620      	mov	r0, r4
   81eb8:	4b15      	ldr	r3, [pc, #84]	; (81f10 <pio_configure_pin+0xc4>)
   81eba:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81ebc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81ec0:	bf14      	ite	ne
   81ec2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81ec4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81ec6:	2001      	movs	r0, #1
}
   81ec8:	b002      	add	sp, #8
   81eca:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81ecc:	f000 011f 	and.w	r1, r0, #31
   81ed0:	2601      	movs	r6, #1
   81ed2:	462a      	mov	r2, r5
   81ed4:	fa06 f101 	lsl.w	r1, r6, r1
   81ed8:	4620      	mov	r0, r4
   81eda:	4b0e      	ldr	r3, [pc, #56]	; (81f14 <pio_configure_pin+0xc8>)
   81edc:	4798      	blx	r3
	return 1;
   81ede:	4630      	mov	r0, r6
		break;
   81ee0:	e7f2      	b.n	81ec8 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81ee2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81ee6:	f000 011f 	and.w	r1, r0, #31
   81eea:	2601      	movs	r6, #1
   81eec:	ea05 0306 	and.w	r3, r5, r6
   81ef0:	9300      	str	r3, [sp, #0]
   81ef2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81ef6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81efa:	bf14      	ite	ne
   81efc:	2200      	movne	r2, #0
   81efe:	2201      	moveq	r2, #1
   81f00:	fa06 f101 	lsl.w	r1, r6, r1
   81f04:	4620      	mov	r0, r4
   81f06:	4c04      	ldr	r4, [pc, #16]	; (81f18 <pio_configure_pin+0xcc>)
   81f08:	47a0      	blx	r4
	return 1;
   81f0a:	4630      	mov	r0, r6
		break;
   81f0c:	e7dc      	b.n	81ec8 <pio_configure_pin+0x7c>
   81f0e:	bf00      	nop
   81f10:	00081dad 	.word	0x00081dad
   81f14:	00081deb 	.word	0x00081deb
   81f18:	00081e1d 	.word	0x00081e1d

00081f1c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f20:	4604      	mov	r4, r0
   81f22:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81f24:	4b0e      	ldr	r3, [pc, #56]	; (81f60 <pio_handler_process+0x44>)
   81f26:	4798      	blx	r3
   81f28:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81f2a:	4620      	mov	r0, r4
   81f2c:	4b0d      	ldr	r3, [pc, #52]	; (81f64 <pio_handler_process+0x48>)
   81f2e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81f30:	4005      	ands	r5, r0
   81f32:	d013      	beq.n	81f5c <pio_handler_process+0x40>
   81f34:	4c0c      	ldr	r4, [pc, #48]	; (81f68 <pio_handler_process+0x4c>)
   81f36:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81f3a:	e003      	b.n	81f44 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81f3c:	42b4      	cmp	r4, r6
   81f3e:	d00d      	beq.n	81f5c <pio_handler_process+0x40>
   81f40:	3410      	adds	r4, #16
		while (status != 0) {
   81f42:	b15d      	cbz	r5, 81f5c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81f44:	6820      	ldr	r0, [r4, #0]
   81f46:	4540      	cmp	r0, r8
   81f48:	d1f8      	bne.n	81f3c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81f4a:	6861      	ldr	r1, [r4, #4]
   81f4c:	4229      	tst	r1, r5
   81f4e:	d0f5      	beq.n	81f3c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81f50:	68e3      	ldr	r3, [r4, #12]
   81f52:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81f54:	6863      	ldr	r3, [r4, #4]
   81f56:	ea25 0503 	bic.w	r5, r5, r3
   81f5a:	e7ef      	b.n	81f3c <pio_handler_process+0x20>
   81f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f60:	00081e43 	.word	0x00081e43
   81f64:	00081e47 	.word	0x00081e47
   81f68:	200715b0 	.word	0x200715b0

00081f6c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81f6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81f6e:	210b      	movs	r1, #11
   81f70:	4801      	ldr	r0, [pc, #4]	; (81f78 <PIOA_Handler+0xc>)
   81f72:	4b02      	ldr	r3, [pc, #8]	; (81f7c <PIOA_Handler+0x10>)
   81f74:	4798      	blx	r3
   81f76:	bd08      	pop	{r3, pc}
   81f78:	400e0e00 	.word	0x400e0e00
   81f7c:	00081f1d 	.word	0x00081f1d

00081f80 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81f80:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81f82:	210c      	movs	r1, #12
   81f84:	4801      	ldr	r0, [pc, #4]	; (81f8c <PIOB_Handler+0xc>)
   81f86:	4b02      	ldr	r3, [pc, #8]	; (81f90 <PIOB_Handler+0x10>)
   81f88:	4798      	blx	r3
   81f8a:	bd08      	pop	{r3, pc}
   81f8c:	400e1000 	.word	0x400e1000
   81f90:	00081f1d 	.word	0x00081f1d

00081f94 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81f94:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81f96:	210d      	movs	r1, #13
   81f98:	4801      	ldr	r0, [pc, #4]	; (81fa0 <PIOC_Handler+0xc>)
   81f9a:	4b02      	ldr	r3, [pc, #8]	; (81fa4 <PIOC_Handler+0x10>)
   81f9c:	4798      	blx	r3
   81f9e:	bd08      	pop	{r3, pc}
   81fa0:	400e1200 	.word	0x400e1200
   81fa4:	00081f1d 	.word	0x00081f1d

00081fa8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81fa8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81faa:	210e      	movs	r1, #14
   81fac:	4801      	ldr	r0, [pc, #4]	; (81fb4 <PIOD_Handler+0xc>)
   81fae:	4b02      	ldr	r3, [pc, #8]	; (81fb8 <PIOD_Handler+0x10>)
   81fb0:	4798      	blx	r3
   81fb2:	bd08      	pop	{r3, pc}
   81fb4:	400e1400 	.word	0x400e1400
   81fb8:	00081f1d 	.word	0x00081f1d

00081fbc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81fbc:	4a17      	ldr	r2, [pc, #92]	; (8201c <pmc_switch_mck_to_pllack+0x60>)
   81fbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81fc4:	4318      	orrs	r0, r3
   81fc6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81fc8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81fca:	f013 0f08 	tst.w	r3, #8
   81fce:	d10a      	bne.n	81fe6 <pmc_switch_mck_to_pllack+0x2a>
   81fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81fd4:	4911      	ldr	r1, [pc, #68]	; (8201c <pmc_switch_mck_to_pllack+0x60>)
   81fd6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81fd8:	f012 0f08 	tst.w	r2, #8
   81fdc:	d103      	bne.n	81fe6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81fde:	3b01      	subs	r3, #1
   81fe0:	d1f9      	bne.n	81fd6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81fe2:	2001      	movs	r0, #1
   81fe4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81fe6:	4a0d      	ldr	r2, [pc, #52]	; (8201c <pmc_switch_mck_to_pllack+0x60>)
   81fe8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81fea:	f023 0303 	bic.w	r3, r3, #3
   81fee:	f043 0302 	orr.w	r3, r3, #2
   81ff2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81ff4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81ff6:	f013 0f08 	tst.w	r3, #8
   81ffa:	d10a      	bne.n	82012 <pmc_switch_mck_to_pllack+0x56>
   81ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82000:	4906      	ldr	r1, [pc, #24]	; (8201c <pmc_switch_mck_to_pllack+0x60>)
   82002:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82004:	f012 0f08 	tst.w	r2, #8
   82008:	d105      	bne.n	82016 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8200a:	3b01      	subs	r3, #1
   8200c:	d1f9      	bne.n	82002 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8200e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82010:	4770      	bx	lr
	return 0;
   82012:	2000      	movs	r0, #0
   82014:	4770      	bx	lr
   82016:	2000      	movs	r0, #0
   82018:	4770      	bx	lr
   8201a:	bf00      	nop
   8201c:	400e0600 	.word	0x400e0600

00082020 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82020:	b9c8      	cbnz	r0, 82056 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82022:	4a11      	ldr	r2, [pc, #68]	; (82068 <pmc_switch_mainck_to_xtal+0x48>)
   82024:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82026:	0209      	lsls	r1, r1, #8
   82028:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8202a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8202e:	f023 0303 	bic.w	r3, r3, #3
   82032:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82036:	f043 0301 	orr.w	r3, r3, #1
   8203a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8203c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8203e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82040:	f013 0f01 	tst.w	r3, #1
   82044:	d0fb      	beq.n	8203e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82046:	4a08      	ldr	r2, [pc, #32]	; (82068 <pmc_switch_mainck_to_xtal+0x48>)
   82048:	6a13      	ldr	r3, [r2, #32]
   8204a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8204e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82052:	6213      	str	r3, [r2, #32]
   82054:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82056:	4904      	ldr	r1, [pc, #16]	; (82068 <pmc_switch_mainck_to_xtal+0x48>)
   82058:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8205a:	4a04      	ldr	r2, [pc, #16]	; (8206c <pmc_switch_mainck_to_xtal+0x4c>)
   8205c:	401a      	ands	r2, r3
   8205e:	4b04      	ldr	r3, [pc, #16]	; (82070 <pmc_switch_mainck_to_xtal+0x50>)
   82060:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82062:	620b      	str	r3, [r1, #32]
   82064:	4770      	bx	lr
   82066:	bf00      	nop
   82068:	400e0600 	.word	0x400e0600
   8206c:	fec8fffc 	.word	0xfec8fffc
   82070:	01370002 	.word	0x01370002

00082074 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82074:	4b02      	ldr	r3, [pc, #8]	; (82080 <pmc_osc_is_ready_mainck+0xc>)
   82076:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82078:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8207c:	4770      	bx	lr
   8207e:	bf00      	nop
   82080:	400e0600 	.word	0x400e0600

00082084 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82084:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82088:	4b01      	ldr	r3, [pc, #4]	; (82090 <pmc_disable_pllack+0xc>)
   8208a:	629a      	str	r2, [r3, #40]	; 0x28
   8208c:	4770      	bx	lr
   8208e:	bf00      	nop
   82090:	400e0600 	.word	0x400e0600

00082094 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82094:	4b02      	ldr	r3, [pc, #8]	; (820a0 <pmc_is_locked_pllack+0xc>)
   82096:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82098:	f000 0002 	and.w	r0, r0, #2
   8209c:	4770      	bx	lr
   8209e:	bf00      	nop
   820a0:	400e0600 	.word	0x400e0600

000820a4 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   820a4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   820a8:	4b05      	ldr	r3, [pc, #20]	; (820c0 <pmc_enable_periph_clk+0x1c>)
   820aa:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   820ae:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   820b2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   820b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   820ba:	2000      	movs	r0, #0
   820bc:	4770      	bx	lr
   820be:	bf00      	nop
   820c0:	400e0600 	.word	0x400e0600

000820c4 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   820c4:	4b02      	ldr	r3, [pc, #8]	; (820d0 <pmc_is_wakeup_clocks_restored+0xc>)
   820c6:	7818      	ldrb	r0, [r3, #0]
}
   820c8:	f080 0001 	eor.w	r0, r0, #1
   820cc:	4770      	bx	lr
   820ce:	bf00      	nop
   820d0:	20071620 	.word	0x20071620

000820d4 <twi_disable_interrupt>:
 * \param ul_sources Interrupts to be disabled.
 */
void twi_disable_interrupt(Twi *p_twi, uint32_t ul_sources)
{
	/* Disable the specified interrupts */
	p_twi->TWI_IDR = ul_sources;
   820d4:	6281      	str	r1, [r0, #40]	; 0x28
	/* Dummy read */
	p_twi->TWI_SR;
   820d6:	6a03      	ldr	r3, [r0, #32]
   820d8:	4770      	bx	lr

000820da <twi_get_interrupt_status>:
 *
 * \retval TWI interrupt status.
 */
uint32_t twi_get_interrupt_status(Twi *p_twi)
{
	return p_twi->TWI_SR;
   820da:	6a00      	ldr	r0, [r0, #32]
}
   820dc:	4770      	bx	lr

000820de <twi_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t twi_get_interrupt_mask(Twi *p_twi)
{
	return p_twi->TWI_IMR;
   820de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
   820e0:	4770      	bx	lr

000820e2 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   820e2:	6081      	str	r1, [r0, #8]
   820e4:	4770      	bx	lr

000820e6 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   820e6:	60c1      	str	r1, [r0, #12]
   820e8:	4770      	bx	lr

000820ea <uart_get_interrupt_mask>:
 *
 *  \return The interrupt mask value.
 */
uint32_t uart_get_interrupt_mask(Uart *p_uart)
{
	return p_uart->UART_IMR;
   820ea:	6900      	ldr	r0, [r0, #16]
}
   820ec:	4770      	bx	lr

000820ee <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   820ee:	6940      	ldr	r0, [r0, #20]
}
   820f0:	4770      	bx	lr

000820f2 <uart_reset_status>:
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
	p_uart->UART_CR = UART_CR_RSTSTA;
   820f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   820f6:	6003      	str	r3, [r0, #0]
   820f8:	4770      	bx	lr
	...

000820fc <udd_ctrl_init>:
	udd_enable_endpoint_interrupt(0);
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
   820fc:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   820fe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82102:	fab3 f383 	clz	r3, r3
   82106:	095b      	lsrs	r3, r3, #5
   82108:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8210a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8210c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82110:	2200      	movs	r2, #0
   82112:	4b0c      	ldr	r3, [pc, #48]	; (82144 <udd_ctrl_init+0x48>)
   82114:	701a      	strb	r2, [r3, #0]
	return flags;
   82116:	9b01      	ldr	r3, [sp, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   82118:	2101      	movs	r1, #1
   8211a:	4a0b      	ldr	r2, [pc, #44]	; (82148 <udd_ctrl_init+0x4c>)
   8211c:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   8211e:	b123      	cbz	r3, 8212a <udd_ctrl_init+0x2e>
		cpu_irq_enable();
   82120:	4b08      	ldr	r3, [pc, #32]	; (82144 <udd_ctrl_init+0x48>)
   82122:	7019      	strb	r1, [r3, #0]
   82124:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82128:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   8212a:	2202      	movs	r2, #2
   8212c:	4b07      	ldr	r3, [pc, #28]	; (8214c <udd_ctrl_init+0x50>)
   8212e:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   82130:	4a07      	ldr	r2, [pc, #28]	; (82150 <udd_ctrl_init+0x54>)
   82132:	2300      	movs	r3, #0
   82134:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82136:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   82138:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   8213a:	4a06      	ldr	r2, [pc, #24]	; (82154 <udd_ctrl_init+0x58>)
   8213c:	7013      	strb	r3, [r2, #0]
}
   8213e:	b002      	add	sp, #8
   82140:	4770      	bx	lr
   82142:	bf00      	nop
   82144:	2007026e 	.word	0x2007026e
   82148:	400ac220 	.word	0x400ac220
   8214c:	400ac160 	.word	0x400ac160
   82150:	20075908 	.word	0x20075908
   82154:	20071628 	.word	0x20071628

00082158 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   82158:	2205      	movs	r2, #5
   8215a:	4b03      	ldr	r3, [pc, #12]	; (82168 <udd_ctrl_stall_data+0x10>)
   8215c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8215e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82162:	4b02      	ldr	r3, [pc, #8]	; (8216c <udd_ctrl_stall_data+0x14>)
   82164:	601a      	str	r2, [r3, #0]
   82166:	4770      	bx	lr
   82168:	20071628 	.word	0x20071628
   8216c:	400ac1f0 	.word	0x400ac1f0

00082170 <udd_ctrl_send_zlp_in>:
}


static void udd_ctrl_send_zlp_in(void)
{
   82170:	b082      	sub	sp, #8
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   82172:	2203      	movs	r2, #3
   82174:	4b0f      	ldr	r3, [pc, #60]	; (821b4 <udd_ctrl_send_zlp_in+0x44>)
   82176:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82178:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8217c:	fab3 f383 	clz	r3, r3
   82180:	095b      	lsrs	r3, r3, #5
   82182:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82184:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82186:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8218a:	2200      	movs	r2, #0
   8218c:	4b0a      	ldr	r3, [pc, #40]	; (821b8 <udd_ctrl_send_zlp_in+0x48>)
   8218e:	701a      	strb	r2, [r3, #0]
	return flags;
   82190:	9801      	ldr	r0, [sp, #4]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   82192:	490a      	ldr	r1, [pc, #40]	; (821bc <udd_ctrl_send_zlp_in+0x4c>)
   82194:	2201      	movs	r2, #1
   82196:	600a      	str	r2, [r1, #0]
	udd_enable_in_send_interrupt(0);
   82198:	4b09      	ldr	r3, [pc, #36]	; (821c0 <udd_ctrl_send_zlp_in+0x50>)
   8219a:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8219c:	2208      	movs	r2, #8
   8219e:	600a      	str	r2, [r1, #0]
	udd_enable_nak_out_interrupt(0);
   821a0:	601a      	str	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   821a2:	b128      	cbz	r0, 821b0 <udd_ctrl_send_zlp_in+0x40>
		cpu_irq_enable();
   821a4:	2201      	movs	r2, #1
   821a6:	4b04      	ldr	r3, [pc, #16]	; (821b8 <udd_ctrl_send_zlp_in+0x48>)
   821a8:	701a      	strb	r2, [r3, #0]
   821aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   821ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   821b0:	b002      	add	sp, #8
   821b2:	4770      	bx	lr
   821b4:	20071628 	.word	0x20071628
   821b8:	2007026e 	.word	0x2007026e
   821bc:	400ac160 	.word	0x400ac160
   821c0:	400ac1f0 	.word	0x400ac1f0

000821c4 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   821c4:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   821c6:	4b02      	ldr	r3, [pc, #8]	; (821d0 <udd_ctrl_endofrequest+0xc>)
   821c8:	691b      	ldr	r3, [r3, #16]
   821ca:	b103      	cbz	r3, 821ce <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   821cc:	4798      	blx	r3
   821ce:	bd08      	pop	{r3, pc}
   821d0:	20075908 	.word	0x20075908

000821d4 <udd_ctrl_in_sent>:
{
   821d4:	b530      	push	{r4, r5, lr}
   821d6:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   821d8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   821dc:	fab3 f383 	clz	r3, r3
   821e0:	095b      	lsrs	r3, r3, #5
   821e2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   821e4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   821e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   821ea:	2200      	movs	r2, #0
   821ec:	4b4c      	ldr	r3, [pc, #304]	; (82320 <udd_ctrl_in_sent+0x14c>)
   821ee:	701a      	strb	r2, [r3, #0]
	return flags;
   821f0:	9b01      	ldr	r3, [sp, #4]
	udd_disable_in_send_interrupt(0);
   821f2:	2101      	movs	r1, #1
   821f4:	4a4b      	ldr	r2, [pc, #300]	; (82324 <udd_ctrl_in_sent+0x150>)
   821f6:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   821f8:	b123      	cbz	r3, 82204 <udd_ctrl_in_sent+0x30>
		cpu_irq_enable();
   821fa:	4b49      	ldr	r3, [pc, #292]	; (82320 <udd_ctrl_in_sent+0x14c>)
   821fc:	7019      	strb	r1, [r3, #0]
   821fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82202:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82204:	4b48      	ldr	r3, [pc, #288]	; (82328 <udd_ctrl_in_sent+0x154>)
   82206:	781b      	ldrb	r3, [r3, #0]
   82208:	2b03      	cmp	r3, #3
   8220a:	d057      	beq.n	822bc <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8220c:	4b47      	ldr	r3, [pc, #284]	; (8232c <udd_ctrl_in_sent+0x158>)
   8220e:	881b      	ldrh	r3, [r3, #0]
   82210:	4a47      	ldr	r2, [pc, #284]	; (82330 <udd_ctrl_in_sent+0x15c>)
   82212:	8994      	ldrh	r4, [r2, #12]
   82214:	1ae4      	subs	r4, r4, r3
   82216:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   82218:	b9c4      	cbnz	r4, 8224c <udd_ctrl_in_sent+0x78>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8221a:	4a46      	ldr	r2, [pc, #280]	; (82334 <udd_ctrl_in_sent+0x160>)
   8221c:	8811      	ldrh	r1, [r2, #0]
   8221e:	440b      	add	r3, r1
   82220:	b29b      	uxth	r3, r3
   82222:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   82224:	4a42      	ldr	r2, [pc, #264]	; (82330 <udd_ctrl_in_sent+0x15c>)
   82226:	88d2      	ldrh	r2, [r2, #6]
   82228:	429a      	cmp	r2, r3
   8222a:	d04c      	beq.n	822c6 <udd_ctrl_in_sent+0xf2>
					|| b_shortpacket) {
   8222c:	4b42      	ldr	r3, [pc, #264]	; (82338 <udd_ctrl_in_sent+0x164>)
   8222e:	781b      	ldrb	r3, [r3, #0]
   82230:	2b00      	cmp	r3, #0
   82232:	d148      	bne.n	822c6 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   82234:	4b3e      	ldr	r3, [pc, #248]	; (82330 <udd_ctrl_in_sent+0x15c>)
   82236:	695b      	ldr	r3, [r3, #20]
   82238:	2b00      	cmp	r3, #0
   8223a:	d061      	beq.n	82300 <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8223c:	4798      	blx	r3
   8223e:	2800      	cmp	r0, #0
   82240:	d05e      	beq.n	82300 <udd_ctrl_in_sent+0x12c>
			udd_ctrl_payload_buf_cnt = 0;
   82242:	2200      	movs	r2, #0
   82244:	4b39      	ldr	r3, [pc, #228]	; (8232c <udd_ctrl_in_sent+0x158>)
   82246:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   82248:	4b39      	ldr	r3, [pc, #228]	; (82330 <udd_ctrl_in_sent+0x15c>)
   8224a:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   8224c:	2c3f      	cmp	r4, #63	; 0x3f
   8224e:	d957      	bls.n	82300 <udd_ctrl_in_sent+0x12c>
		b_shortpacket = false;
   82250:	2200      	movs	r2, #0
   82252:	4b39      	ldr	r3, [pc, #228]	; (82338 <udd_ctrl_in_sent+0x164>)
   82254:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   82256:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82258:	4b35      	ldr	r3, [pc, #212]	; (82330 <udd_ctrl_in_sent+0x15c>)
   8225a:	689a      	ldr	r2, [r3, #8]
   8225c:	4b33      	ldr	r3, [pc, #204]	; (8232c <udd_ctrl_in_sent+0x158>)
   8225e:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82260:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82264:	fab3 f383 	clz	r3, r3
   82268:	095b      	lsrs	r3, r3, #5
   8226a:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   8226c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8226e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82272:	2100      	movs	r1, #0
   82274:	4b2a      	ldr	r3, [pc, #168]	; (82320 <udd_ctrl_in_sent+0x14c>)
   82276:	7019      	strb	r1, [r3, #0]
	return flags;
   82278:	9802      	ldr	r0, [sp, #8]
	if (Is_udd_out_received(0)) {
   8227a:	4b30      	ldr	r3, [pc, #192]	; (8233c <udd_ctrl_in_sent+0x168>)
   8227c:	681b      	ldr	r3, [r3, #0]
   8227e:	f013 0f02 	tst.w	r3, #2
   82282:	d141      	bne.n	82308 <udd_ctrl_in_sent+0x134>
	for (i = 0; i < nb_remain; i++) {
   82284:	b144      	cbz	r4, 82298 <udd_ctrl_in_sent+0xc4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82286:	442a      	add	r2, r5
   82288:	4b2d      	ldr	r3, [pc, #180]	; (82340 <udd_ctrl_in_sent+0x16c>)
		*ptr_dest++ = *ptr_src++;
   8228a:	f812 1b01 	ldrb.w	r1, [r2], #1
   8228e:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   82292:	b2d9      	uxtb	r1, r3
   82294:	42a1      	cmp	r1, r4
   82296:	d3f8      	bcc.n	8228a <udd_ctrl_in_sent+0xb6>
	udd_ctrl_payload_buf_cnt += nb_remain;
   82298:	4b24      	ldr	r3, [pc, #144]	; (8232c <udd_ctrl_in_sent+0x158>)
   8229a:	881a      	ldrh	r2, [r3, #0]
   8229c:	4414      	add	r4, r2
   8229e:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   822a0:	2301      	movs	r3, #1
   822a2:	4a28      	ldr	r2, [pc, #160]	; (82344 <udd_ctrl_in_sent+0x170>)
   822a4:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   822a6:	3290      	adds	r2, #144	; 0x90
   822a8:	6013      	str	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   822aa:	2800      	cmp	r0, #0
   822ac:	d036      	beq.n	8231c <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
   822ae:	461a      	mov	r2, r3
   822b0:	4b1b      	ldr	r3, [pc, #108]	; (82320 <udd_ctrl_in_sent+0x14c>)
   822b2:	701a      	strb	r2, [r3, #0]
   822b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   822b8:	b662      	cpsie	i
   822ba:	e02f      	b.n	8231c <udd_ctrl_in_sent+0x148>
		udd_ctrl_endofrequest();
   822bc:	4b22      	ldr	r3, [pc, #136]	; (82348 <udd_ctrl_in_sent+0x174>)
   822be:	4798      	blx	r3
		udd_ctrl_init();
   822c0:	4b22      	ldr	r3, [pc, #136]	; (8234c <udd_ctrl_in_sent+0x178>)
   822c2:	4798      	blx	r3
		return;
   822c4:	e02a      	b.n	8231c <udd_ctrl_in_sent+0x148>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   822c6:	2204      	movs	r2, #4
   822c8:	4b17      	ldr	r3, [pc, #92]	; (82328 <udd_ctrl_in_sent+0x154>)
   822ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   822cc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   822d0:	fab3 f383 	clz	r3, r3
   822d4:	095b      	lsrs	r3, r3, #5
   822d6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   822d8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   822da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   822de:	2200      	movs	r2, #0
   822e0:	4b0f      	ldr	r3, [pc, #60]	; (82320 <udd_ctrl_in_sent+0x14c>)
   822e2:	701a      	strb	r2, [r3, #0]
	return flags;
   822e4:	9a03      	ldr	r2, [sp, #12]
	udd_ack_nak_in(0);
   822e6:	2310      	movs	r3, #16
   822e8:	4916      	ldr	r1, [pc, #88]	; (82344 <udd_ctrl_in_sent+0x170>)
   822ea:	600b      	str	r3, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   822ec:	3190      	adds	r1, #144	; 0x90
   822ee:	600b      	str	r3, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
   822f0:	b1a2      	cbz	r2, 8231c <udd_ctrl_in_sent+0x148>
		cpu_irq_enable();
   822f2:	2201      	movs	r2, #1
   822f4:	4b0a      	ldr	r3, [pc, #40]	; (82320 <udd_ctrl_in_sent+0x14c>)
   822f6:	701a      	strb	r2, [r3, #0]
   822f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   822fc:	b662      	cpsie	i
   822fe:	e00d      	b.n	8231c <udd_ctrl_in_sent+0x148>
		b_shortpacket = true;
   82300:	2201      	movs	r2, #1
   82302:	4b0d      	ldr	r3, [pc, #52]	; (82338 <udd_ctrl_in_sent+0x164>)
   82304:	701a      	strb	r2, [r3, #0]
   82306:	e7a7      	b.n	82258 <udd_ctrl_in_sent+0x84>
	if (cpu_irq_is_enabled_flags(flags))
   82308:	b128      	cbz	r0, 82316 <udd_ctrl_in_sent+0x142>
		cpu_irq_enable();
   8230a:	2201      	movs	r2, #1
   8230c:	4b04      	ldr	r3, [pc, #16]	; (82320 <udd_ctrl_in_sent+0x14c>)
   8230e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   82310:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82314:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82316:	2204      	movs	r2, #4
   82318:	4b03      	ldr	r3, [pc, #12]	; (82328 <udd_ctrl_in_sent+0x154>)
   8231a:	701a      	strb	r2, [r3, #0]
}
   8231c:	b005      	add	sp, #20
   8231e:	bd30      	pop	{r4, r5, pc}
   82320:	2007026e 	.word	0x2007026e
   82324:	400ac220 	.word	0x400ac220
   82328:	20071628 	.word	0x20071628
   8232c:	20071624 	.word	0x20071624
   82330:	20075908 	.word	0x20075908
   82334:	20071626 	.word	0x20071626
   82338:	20071621 	.word	0x20071621
   8233c:	400ac130 	.word	0x400ac130
   82340:	20180000 	.word	0x20180000
   82344:	400ac160 	.word	0x400ac160
   82348:	000821c5 	.word	0x000821c5
   8234c:	000820fd 	.word	0x000820fd

00082350 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   82350:	7d03      	ldrb	r3, [r0, #20]
   82352:	f013 0f01 	tst.w	r3, #1
   82356:	d013      	beq.n	82380 <udd_ep_finish_job+0x30>
{
   82358:	b510      	push	{r4, lr}
   8235a:	460c      	mov	r4, r1
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   8235c:	7d03      	ldrb	r3, [r0, #20]
   8235e:	f36f 0300 	bfc	r3, #0, #1
   82362:	7503      	strb	r3, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   82364:	6803      	ldr	r3, [r0, #0]
   82366:	b153      	cbz	r3, 8237e <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   82368:	4906      	ldr	r1, [pc, #24]	; (82384 <udd_ep_finish_job+0x34>)
   8236a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   8236e:	f411 7f80 	tst.w	r1, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   82372:	bf18      	it	ne
   82374:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82378:	6881      	ldr	r1, [r0, #8]
   8237a:	4620      	mov	r0, r4
   8237c:	4798      	blx	r3
   8237e:	bd10      	pop	{r4, pc}
   82380:	4770      	bx	lr
   82382:	bf00      	nop
   82384:	400ac100 	.word	0x400ac100

00082388 <udd_ep_trans_done>:
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82388:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   8238a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8238e:	4a5f      	ldr	r2, [pc, #380]	; (8250c <udd_ep_trans_done+0x184>)
   82390:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   82394:	7d12      	ldrb	r2, [r2, #20]
   82396:	f012 0f01 	tst.w	r2, #1
   8239a:	f000 80b5 	beq.w	82508 <udd_ep_trans_done+0x180>
{
   8239e:	b5f0      	push	{r4, r5, r6, r7, lr}
   823a0:	b083      	sub	sp, #12
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   823a2:	460a      	mov	r2, r1
   823a4:	4959      	ldr	r1, [pc, #356]	; (8250c <udd_ep_trans_done+0x184>)
   823a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   823aa:	68d1      	ldr	r1, [r2, #12]
   823ac:	6892      	ldr	r2, [r2, #8]
   823ae:	4291      	cmp	r1, r2
   823b0:	d077      	beq.n	824a2 <udd_ep_trans_done+0x11a>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   823b2:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   823b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   823b8:	bf92      	itee	ls
   823ba:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   823bc:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   823c0:	2700      	movhi	r7, #0
		}
		if (Is_udd_endpoint_in(ep)) {
   823c2:	4c53      	ldr	r4, [pc, #332]	; (82510 <udd_ep_trans_done+0x188>)
   823c4:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   823c8:	f415 7f80 	tst.w	r5, #256	; 0x100
   823cc:	d014      	beq.n	823f8 <udd_ep_trans_done+0x70>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   823ce:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   823d2:	f3c5 1502 	ubfx	r5, r5, #4, #3
   823d6:	2408      	movs	r4, #8
   823d8:	40ac      	lsls	r4, r5
   823da:	3c01      	subs	r4, #1
   823dc:	4214      	tst	r4, r2
   823de:	d013      	beq.n	82408 <udd_ep_trans_done+0x80>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   823e0:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   823e4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   823e8:	4d48      	ldr	r5, [pc, #288]	; (8250c <udd_ep_trans_done+0x184>)
   823ea:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   823ee:	7d25      	ldrb	r5, [r4, #20]
   823f0:	f36f 0541 	bfc	r5, #1, #1
   823f4:	7525      	strb	r5, [r4, #20]
   823f6:	e007      	b.n	82408 <udd_ep_trans_done+0x80>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   823f8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   823fc:	f3c5 25c1 	ubfx	r5, r5, #11, #2
   82400:	2d01      	cmp	r5, #1
   82402:	d037      	beq.n	82474 <udd_ep_trans_done+0xec>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   82404:	f047 0714 	orr.w	r7, r7, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   82408:	4c42      	ldr	r4, [pc, #264]	; (82514 <udd_ep_trans_done+0x18c>)
   8240a:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   8240e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   82412:	4e3e      	ldr	r6, [pc, #248]	; (8250c <udd_ep_trans_done+0x184>)
   82414:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   82418:	686d      	ldr	r5, [r5, #4]
   8241a:	4429      	add	r1, r5
   8241c:	6061      	str	r1, [r4, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8241e:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82422:	fab1 f181 	clz	r1, r1
   82426:	0949      	lsrs	r1, r1, #5
   82428:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8242a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8242c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82430:	2500      	movs	r5, #0
   82432:	4939      	ldr	r1, [pc, #228]	; (82518 <udd_ep_trans_done+0x190>)
   82434:	700d      	strb	r5, [r1, #0]
	return flags;
   82436:	9d01      	ldr	r5, [sp, #4]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   82438:	68e1      	ldr	r1, [r4, #12]
   8243a:	f011 0f10 	tst.w	r1, #16
   8243e:	d122      	bne.n	82486 <udd_ep_trans_done+0xfe>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   82440:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   82444:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   82446:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8244a:	eb06 01c0 	add.w	r1, r6, r0, lsl #3
   8244e:	68c8      	ldr	r0, [r1, #12]
   82450:	4410      	add	r0, r2
   82452:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   82454:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   82456:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   8245a:	fa00 f303 	lsl.w	r3, r0, r3
   8245e:	4a2f      	ldr	r2, [pc, #188]	; (8251c <udd_ep_trans_done+0x194>)
   82460:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
   82462:	2d00      	cmp	r5, #0
   82464:	d04e      	beq.n	82504 <udd_ep_trans_done+0x17c>
		cpu_irq_enable();
   82466:	2201      	movs	r2, #1
   82468:	4b2b      	ldr	r3, [pc, #172]	; (82518 <udd_ep_trans_done+0x190>)
   8246a:	701a      	strb	r2, [r3, #0]
   8246c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82470:	b662      	cpsie	i
   82472:	e047      	b.n	82504 <udd_ep_trans_done+0x17c>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   82474:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   82478:	f3c5 1502 	ubfx	r5, r5, #4, #3
   8247c:	2408      	movs	r4, #8
   8247e:	40ac      	lsls	r4, r5
   82480:	42a2      	cmp	r2, r4
   82482:	d8c1      	bhi.n	82408 <udd_ep_trans_done+0x80>
   82484:	e7be      	b.n	82404 <udd_ep_trans_done+0x7c>
	if (cpu_irq_is_enabled_flags(flags))
   82486:	b12d      	cbz	r5, 82494 <udd_ep_trans_done+0x10c>
		cpu_irq_enable();
   82488:	2101      	movs	r1, #1
   8248a:	4a23      	ldr	r2, [pc, #140]	; (82518 <udd_ep_trans_done+0x190>)
   8248c:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8248e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82492:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   82494:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   82498:	491c      	ldr	r1, [pc, #112]	; (8250c <udd_ep_trans_done+0x184>)
   8249a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8249e:	68d1      	ldr	r1, [r2, #12]
   824a0:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   824a2:	4a1b      	ldr	r2, [pc, #108]	; (82510 <udd_ep_trans_done+0x188>)
   824a4:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   824a8:	f412 7f80 	tst.w	r2, #256	; 0x100
   824ac:	d021      	beq.n	824f2 <udd_ep_trans_done+0x16a>
		if (ptr_job->b_shortpacket) {
   824ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   824b2:	4916      	ldr	r1, [pc, #88]	; (8250c <udd_ep_trans_done+0x184>)
   824b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   824b8:	7d12      	ldrb	r2, [r2, #20]
   824ba:	f012 0f02 	tst.w	r2, #2
   824be:	d018      	beq.n	824f2 <udd_ep_trans_done+0x16a>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   824c0:	2201      	movs	r2, #1
   824c2:	4b17      	ldr	r3, [pc, #92]	; (82520 <udd_ep_trans_done+0x198>)
   824c4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   824c8:	3b30      	subs	r3, #48	; 0x30
   824ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   824ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   824d2:	bf1c      	itt	ne
   824d4:	4b13      	ldrne	r3, [pc, #76]	; (82524 <udd_ep_trans_done+0x19c>)
   824d6:	f843 2020 	strne.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   824da:	2201      	movs	r2, #1
   824dc:	4b12      	ldr	r3, [pc, #72]	; (82528 <udd_ep_trans_done+0x1a0>)
   824de:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   824e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   824e6:	fa02 f000 	lsl.w	r0, r2, r0
   824ea:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
   824ee:	6198      	str	r0, [r3, #24]
			return;
   824f0:	e008      	b.n	82504 <udd_ep_trans_done+0x17c>
   824f2:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   824f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   824f8:	2100      	movs	r1, #0
   824fa:	4804      	ldr	r0, [pc, #16]	; (8250c <udd_ep_trans_done+0x184>)
   824fc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   82500:	4b0a      	ldr	r3, [pc, #40]	; (8252c <udd_ep_trans_done+0x1a4>)
   82502:	4798      	blx	r3
}
   82504:	b003      	add	sp, #12
   82506:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82508:	4770      	bx	lr
   8250a:	bf00      	nop
   8250c:	2007162c 	.word	0x2007162c
   82510:	400ac100 	.word	0x400ac100
   82514:	400ac300 	.word	0x400ac300
   82518:	2007026e 	.word	0x2007026e
   8251c:	400ac000 	.word	0x400ac000
   82520:	400ac160 	.word	0x400ac160
   82524:	400ac190 	.word	0x400ac190
   82528:	400ac1f0 	.word	0x400ac1f0
   8252c:	00082351 	.word	0x00082351

00082530 <udd_sleep_mode>:
{
   82530:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
   82532:	4601      	mov	r1, r0
   82534:	bb28      	cbnz	r0, 82582 <udd_sleep_mode+0x52>
   82536:	4b24      	ldr	r3, [pc, #144]	; (825c8 <udd_sleep_mode+0x98>)
   82538:	781b      	ldrb	r3, [r3, #0]
   8253a:	b91b      	cbnz	r3, 82544 <udd_sleep_mode+0x14>
	udd_b_idle = b_idle;
   8253c:	4b22      	ldr	r3, [pc, #136]	; (825c8 <udd_sleep_mode+0x98>)
   8253e:	7019      	strb	r1, [r3, #0]
}
   82540:	b002      	add	sp, #8
   82542:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   82544:	4b21      	ldr	r3, [pc, #132]	; (825cc <udd_sleep_mode+0x9c>)
   82546:	789b      	ldrb	r3, [r3, #2]
   82548:	b903      	cbnz	r3, 8254c <udd_sleep_mode+0x1c>
   8254a:	e7fe      	b.n	8254a <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8254c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82550:	fab3 f383 	clz	r3, r3
   82554:	095b      	lsrs	r3, r3, #5
   82556:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   82558:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8255a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8255e:	2200      	movs	r2, #0
   82560:	4b1b      	ldr	r3, [pc, #108]	; (825d0 <udd_sleep_mode+0xa0>)
   82562:	701a      	strb	r2, [r3, #0]
	return flags;
   82564:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   82566:	4a19      	ldr	r2, [pc, #100]	; (825cc <udd_sleep_mode+0x9c>)
   82568:	7893      	ldrb	r3, [r2, #2]
   8256a:	3b01      	subs	r3, #1
   8256c:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8256e:	2800      	cmp	r0, #0
   82570:	d0e4      	beq.n	8253c <udd_sleep_mode+0xc>
		cpu_irq_enable();
   82572:	2201      	movs	r2, #1
   82574:	4b16      	ldr	r3, [pc, #88]	; (825d0 <udd_sleep_mode+0xa0>)
   82576:	701a      	strb	r2, [r3, #0]
   82578:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8257c:	b662      	cpsie	i
   8257e:	e7dd      	b.n	8253c <udd_sleep_mode+0xc>
   82580:	e7fe      	b.n	82580 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
   82582:	4b11      	ldr	r3, [pc, #68]	; (825c8 <udd_sleep_mode+0x98>)
   82584:	781b      	ldrb	r3, [r3, #0]
   82586:	2b00      	cmp	r3, #0
   82588:	d1d8      	bne.n	8253c <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
   8258a:	4b10      	ldr	r3, [pc, #64]	; (825cc <udd_sleep_mode+0x9c>)
   8258c:	789b      	ldrb	r3, [r3, #2]
   8258e:	2bff      	cmp	r3, #255	; 0xff
   82590:	d0f6      	beq.n	82580 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82592:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82596:	fab3 f383 	clz	r3, r3
   8259a:	095b      	lsrs	r3, r3, #5
   8259c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8259e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   825a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   825a4:	2200      	movs	r2, #0
   825a6:	4b0a      	ldr	r3, [pc, #40]	; (825d0 <udd_sleep_mode+0xa0>)
   825a8:	701a      	strb	r2, [r3, #0]
	return flags;
   825aa:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
   825ac:	4a07      	ldr	r2, [pc, #28]	; (825cc <udd_sleep_mode+0x9c>)
   825ae:	7893      	ldrb	r3, [r2, #2]
   825b0:	3301      	adds	r3, #1
   825b2:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
   825b4:	2800      	cmp	r0, #0
   825b6:	d0c1      	beq.n	8253c <udd_sleep_mode+0xc>
		cpu_irq_enable();
   825b8:	2201      	movs	r2, #1
   825ba:	4b05      	ldr	r3, [pc, #20]	; (825d0 <udd_sleep_mode+0xa0>)
   825bc:	701a      	strb	r2, [r3, #0]
   825be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   825c2:	b662      	cpsie	i
   825c4:	e7ba      	b.n	8253c <udd_sleep_mode+0xc>
   825c6:	bf00      	nop
   825c8:	20071622 	.word	0x20071622
   825cc:	20075900 	.word	0x20075900
   825d0:	2007026e 	.word	0x2007026e

000825d4 <udd_attach>:
{
   825d4:	b570      	push	{r4, r5, r6, lr}
   825d6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   825d8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   825dc:	fab3 f383 	clz	r3, r3
   825e0:	095b      	lsrs	r3, r3, #5
   825e2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   825e4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   825e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   825ea:	2200      	movs	r2, #0
   825ec:	4b19      	ldr	r3, [pc, #100]	; (82654 <udd_attach+0x80>)
   825ee:	701a      	strb	r2, [r3, #0]
	return flags;
   825f0:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
   825f2:	2001      	movs	r0, #1
   825f4:	4b18      	ldr	r3, [pc, #96]	; (82658 <udd_attach+0x84>)
   825f6:	4798      	blx	r3
	otg_unfreeze_clock();
   825f8:	4a18      	ldr	r2, [pc, #96]	; (8265c <udd_attach+0x88>)
   825fa:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   825fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   82602:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   82606:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   8260a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   8260e:	d0fa      	beq.n	82606 <udd_attach+0x32>
	udd_attach_device();
   82610:	4b12      	ldr	r3, [pc, #72]	; (8265c <udd_attach+0x88>)
   82612:	681a      	ldr	r2, [r3, #0]
   82614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   82618:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   8261a:	2608      	movs	r6, #8
   8261c:	619e      	str	r6, [r3, #24]
	udd_enable_suspend_interrupt();
   8261e:	2101      	movs	r1, #1
   82620:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   82622:	2210      	movs	r2, #16
   82624:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   82626:	2504      	movs	r5, #4
   82628:	619d      	str	r5, [r3, #24]
	udd_enable_msof_interrupt();
   8262a:	2002      	movs	r0, #2
   8262c:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
   8262e:	609e      	str	r6, [r3, #8]
	udd_ack_sof();
   82630:	609d      	str	r5, [r3, #8]
	udd_ack_msof();
   82632:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
   82634:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
   82636:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   82638:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8263c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82640:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
   82644:	b124      	cbz	r4, 82650 <udd_attach+0x7c>
		cpu_irq_enable();
   82646:	4b03      	ldr	r3, [pc, #12]	; (82654 <udd_attach+0x80>)
   82648:	7019      	strb	r1, [r3, #0]
   8264a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8264e:	b662      	cpsie	i
}
   82650:	b002      	add	sp, #8
   82652:	bd70      	pop	{r4, r5, r6, pc}
   82654:	2007026e 	.word	0x2007026e
   82658:	00082531 	.word	0x00082531
   8265c:	400ac000 	.word	0x400ac000

00082660 <udd_detach>:
{
   82660:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   82662:	4b0a      	ldr	r3, [pc, #40]	; (8268c <udd_detach+0x2c>)
   82664:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82668:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   8266c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_detach_device();
   82670:	681a      	ldr	r2, [r3, #0]
   82672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   82676:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   82678:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8267c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82680:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   82684:	2000      	movs	r0, #0
   82686:	4b02      	ldr	r3, [pc, #8]	; (82690 <udd_detach+0x30>)
   82688:	4798      	blx	r3
   8268a:	bd08      	pop	{r3, pc}
   8268c:	400ac000 	.word	0x400ac000
   82690:	00082531 	.word	0x00082531

00082694 <UOTGHS_Handler>:
{
   82694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82698:	b085      	sub	sp, #20
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8269a:	4b9a      	ldr	r3, [pc, #616]	; (82904 <UOTGHS_Handler+0x270>)
   8269c:	4798      	blx	r3
   8269e:	b920      	cbnz	r0, 826aa <UOTGHS_Handler+0x16>
   826a0:	4b99      	ldr	r3, [pc, #612]	; (82908 <UOTGHS_Handler+0x274>)
   826a2:	685b      	ldr	r3, [r3, #4]
   826a4:	f013 0f01 	tst.w	r3, #1
   826a8:	d00f      	beq.n	826ca <UOTGHS_Handler+0x36>
	if (Is_udd_sof()) {
   826aa:	4b97      	ldr	r3, [pc, #604]	; (82908 <UOTGHS_Handler+0x274>)
   826ac:	685b      	ldr	r3, [r3, #4]
   826ae:	f013 0f04 	tst.w	r3, #4
   826b2:	d014      	beq.n	826de <UOTGHS_Handler+0x4a>
		udd_ack_sof();
   826b4:	4b94      	ldr	r3, [pc, #592]	; (82908 <UOTGHS_Handler+0x274>)
   826b6:	2204      	movs	r2, #4
   826b8:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   826ba:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   826be:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   826c2:	d009      	beq.n	826d8 <UOTGHS_Handler+0x44>
}
   826c4:	b005      	add	sp, #20
   826c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("cpsid i" : : : "memory");
   826ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   826cc:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   826d0:	2200      	movs	r2, #0
   826d2:	4b8e      	ldr	r3, [pc, #568]	; (8290c <UOTGHS_Handler+0x278>)
   826d4:	701a      	strb	r2, [r3, #0]
		return;
   826d6:	e7f5      	b.n	826c4 <UOTGHS_Handler+0x30>
			udc_sof_notify();
   826d8:	4b8d      	ldr	r3, [pc, #564]	; (82910 <UOTGHS_Handler+0x27c>)
   826da:	4798      	blx	r3
   826dc:	e7f2      	b.n	826c4 <UOTGHS_Handler+0x30>
	if (Is_udd_msof()) {
   826de:	4b8a      	ldr	r3, [pc, #552]	; (82908 <UOTGHS_Handler+0x274>)
   826e0:	685b      	ldr	r3, [r3, #4]
   826e2:	f013 0f02 	tst.w	r3, #2
   826e6:	d133      	bne.n	82750 <UOTGHS_Handler+0xbc>
	if (!Is_udd_endpoint_interrupt(0)) {
   826e8:	4b87      	ldr	r3, [pc, #540]	; (82908 <UOTGHS_Handler+0x274>)
   826ea:	685b      	ldr	r3, [r3, #4]
   826ec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   826f0:	d026      	beq.n	82740 <UOTGHS_Handler+0xac>
	udd_disable_nak_in_interrupt(0);
   826f2:	4b88      	ldr	r3, [pc, #544]	; (82914 <UOTGHS_Handler+0x280>)
   826f4:	2210      	movs	r2, #16
   826f6:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   826f8:	2208      	movs	r2, #8
   826fa:	601a      	str	r2, [r3, #0]
	if (Is_udd_setup_received(0)) {
   826fc:	3bf0      	subs	r3, #240	; 0xf0
   826fe:	681b      	ldr	r3, [r3, #0]
   82700:	f013 0f04 	tst.w	r3, #4
   82704:	d12a      	bne.n	8275c <UOTGHS_Handler+0xc8>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   82706:	4b84      	ldr	r3, [pc, #528]	; (82918 <UOTGHS_Handler+0x284>)
   82708:	681b      	ldr	r3, [r3, #0]
   8270a:	f013 0f01 	tst.w	r3, #1
   8270e:	d005      	beq.n	8271c <UOTGHS_Handler+0x88>
   82710:	4b82      	ldr	r3, [pc, #520]	; (8291c <UOTGHS_Handler+0x288>)
   82712:	681b      	ldr	r3, [r3, #0]
   82714:	f013 0f01 	tst.w	r3, #1
   82718:	f040 8085 	bne.w	82826 <UOTGHS_Handler+0x192>
	if (Is_udd_out_received(0)) {
   8271c:	4b7e      	ldr	r3, [pc, #504]	; (82918 <UOTGHS_Handler+0x284>)
   8271e:	681b      	ldr	r3, [r3, #0]
   82720:	f013 0f02 	tst.w	r3, #2
   82724:	f040 8082 	bne.w	8282c <UOTGHS_Handler+0x198>
	if (Is_udd_nak_out(0)) {
   82728:	4b7b      	ldr	r3, [pc, #492]	; (82918 <UOTGHS_Handler+0x284>)
   8272a:	681b      	ldr	r3, [r3, #0]
   8272c:	f013 0f08 	tst.w	r3, #8
   82730:	f040 8130 	bne.w	82994 <UOTGHS_Handler+0x300>
	if (Is_udd_nak_in(0)) {
   82734:	4b78      	ldr	r3, [pc, #480]	; (82918 <UOTGHS_Handler+0x284>)
   82736:	681b      	ldr	r3, [r3, #0]
   82738:	f013 0f10 	tst.w	r3, #16
   8273c:	f040 813d 	bne.w	829ba <UOTGHS_Handler+0x326>
	for (i = 0; i < nb_data; i++) {
   82740:	4e77      	ldr	r6, [pc, #476]	; (82920 <UOTGHS_Handler+0x28c>)
   82742:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   82744:	4a70      	ldr	r2, [pc, #448]	; (82908 <UOTGHS_Handler+0x274>)
   82746:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8274a:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   8274e:	e17f      	b.n	82a50 <UOTGHS_Handler+0x3bc>
		udd_ack_msof();
   82750:	2202      	movs	r2, #2
   82752:	4b6d      	ldr	r3, [pc, #436]	; (82908 <UOTGHS_Handler+0x274>)
   82754:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   82756:	4b6e      	ldr	r3, [pc, #440]	; (82910 <UOTGHS_Handler+0x27c>)
   82758:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8275a:	e7b3      	b.n	826c4 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8275c:	4b71      	ldr	r3, [pc, #452]	; (82924 <UOTGHS_Handler+0x290>)
   8275e:	781b      	ldrb	r3, [r3, #0]
   82760:	2b00      	cmp	r3, #0
   82762:	d141      	bne.n	827e8 <UOTGHS_Handler+0x154>
	if (8 != udd_byte_count(0)) {
   82764:	4b6c      	ldr	r3, [pc, #432]	; (82918 <UOTGHS_Handler+0x284>)
   82766:	681b      	ldr	r3, [r3, #0]
   82768:	f3c3 530a 	ubfx	r3, r3, #20, #11
   8276c:	2b08      	cmp	r3, #8
   8276e:	d140      	bne.n	827f2 <UOTGHS_Handler+0x15e>
   82770:	4a6d      	ldr	r2, [pc, #436]	; (82928 <UOTGHS_Handler+0x294>)
   82772:	4b6e      	ldr	r3, [pc, #440]	; (8292c <UOTGHS_Handler+0x298>)
	for (i = 0; i < 8; i++) {
   82774:	486e      	ldr	r0, [pc, #440]	; (82930 <UOTGHS_Handler+0x29c>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   82776:	f813 1b01 	ldrb.w	r1, [r3], #1
   8277a:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   8277e:	4283      	cmp	r3, r0
   82780:	d1f9      	bne.n	82776 <UOTGHS_Handler+0xe2>
	if (udc_process_setup() == false) {
   82782:	4b6c      	ldr	r3, [pc, #432]	; (82934 <UOTGHS_Handler+0x2a0>)
   82784:	4798      	blx	r3
   82786:	2800      	cmp	r0, #0
   82788:	d039      	beq.n	827fe <UOTGHS_Handler+0x16a>
	udd_ack_setup_received(0);
   8278a:	2204      	movs	r2, #4
   8278c:	4b6a      	ldr	r3, [pc, #424]	; (82938 <UOTGHS_Handler+0x2a4>)
   8278e:	601a      	str	r2, [r3, #0]
	if (Udd_setup_is_in()) {
   82790:	4b6a      	ldr	r3, [pc, #424]	; (8293c <UOTGHS_Handler+0x2a8>)
   82792:	f993 3000 	ldrsb.w	r3, [r3]
   82796:	2b00      	cmp	r3, #0
   82798:	db37      	blt.n	8280a <UOTGHS_Handler+0x176>
		if (0 == udd_g_ctrlreq.req.wLength) {
   8279a:	4b68      	ldr	r3, [pc, #416]	; (8293c <UOTGHS_Handler+0x2a8>)
   8279c:	88db      	ldrh	r3, [r3, #6]
   8279e:	2b00      	cmp	r3, #0
   827a0:	d03e      	beq.n	82820 <UOTGHS_Handler+0x18c>
		udd_ctrl_prev_payload_buf_cnt = 0;
   827a2:	2200      	movs	r2, #0
   827a4:	4b66      	ldr	r3, [pc, #408]	; (82940 <UOTGHS_Handler+0x2ac>)
   827a6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   827a8:	4b66      	ldr	r3, [pc, #408]	; (82944 <UOTGHS_Handler+0x2b0>)
   827aa:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   827ac:	2101      	movs	r1, #1
   827ae:	4b5d      	ldr	r3, [pc, #372]	; (82924 <UOTGHS_Handler+0x290>)
   827b0:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   827b2:	2110      	movs	r1, #16
   827b4:	4b60      	ldr	r3, [pc, #384]	; (82938 <UOTGHS_Handler+0x2a4>)
   827b6:	6019      	str	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   827b8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   827bc:	fab3 f383 	clz	r3, r3
   827c0:	095b      	lsrs	r3, r3, #5
   827c2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   827c4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   827c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   827ca:	4b50      	ldr	r3, [pc, #320]	; (8290c <UOTGHS_Handler+0x278>)
   827cc:	701a      	strb	r2, [r3, #0]
	return flags;
   827ce:	9b01      	ldr	r3, [sp, #4]
		udd_enable_nak_in_interrupt(0);
   827d0:	4a5d      	ldr	r2, [pc, #372]	; (82948 <UOTGHS_Handler+0x2b4>)
   827d2:	6011      	str	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   827d4:	2b00      	cmp	r3, #0
   827d6:	f43f af75 	beq.w	826c4 <UOTGHS_Handler+0x30>
		cpu_irq_enable();
   827da:	2201      	movs	r2, #1
   827dc:	4b4b      	ldr	r3, [pc, #300]	; (8290c <UOTGHS_Handler+0x278>)
   827de:	701a      	strb	r2, [r3, #0]
   827e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   827e4:	b662      	cpsie	i
   827e6:	e76d      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ctrl_endofrequest();
   827e8:	4b58      	ldr	r3, [pc, #352]	; (8294c <UOTGHS_Handler+0x2b8>)
   827ea:	4798      	blx	r3
		udd_ctrl_init();
   827ec:	4b58      	ldr	r3, [pc, #352]	; (82950 <UOTGHS_Handler+0x2bc>)
   827ee:	4798      	blx	r3
   827f0:	e7b8      	b.n	82764 <UOTGHS_Handler+0xd0>
		udd_ctrl_stall_data();
   827f2:	4b58      	ldr	r3, [pc, #352]	; (82954 <UOTGHS_Handler+0x2c0>)
   827f4:	4798      	blx	r3
		udd_ack_setup_received(0);
   827f6:	2204      	movs	r2, #4
   827f8:	4b4f      	ldr	r3, [pc, #316]	; (82938 <UOTGHS_Handler+0x2a4>)
   827fa:	601a      	str	r2, [r3, #0]
   827fc:	e762      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ctrl_stall_data();
   827fe:	4b55      	ldr	r3, [pc, #340]	; (82954 <UOTGHS_Handler+0x2c0>)
   82800:	4798      	blx	r3
		udd_ack_setup_received(0);
   82802:	2204      	movs	r2, #4
   82804:	4b4c      	ldr	r3, [pc, #304]	; (82938 <UOTGHS_Handler+0x2a4>)
   82806:	601a      	str	r2, [r3, #0]
   82808:	e75c      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ctrl_prev_payload_buf_cnt = 0;
   8280a:	2300      	movs	r3, #0
   8280c:	4a4c      	ldr	r2, [pc, #304]	; (82940 <UOTGHS_Handler+0x2ac>)
   8280e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82810:	4a4c      	ldr	r2, [pc, #304]	; (82944 <UOTGHS_Handler+0x2b0>)
   82812:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   82814:	2202      	movs	r2, #2
   82816:	4b43      	ldr	r3, [pc, #268]	; (82924 <UOTGHS_Handler+0x290>)
   82818:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8281a:	4b4f      	ldr	r3, [pc, #316]	; (82958 <UOTGHS_Handler+0x2c4>)
   8281c:	4798      	blx	r3
   8281e:	e751      	b.n	826c4 <UOTGHS_Handler+0x30>
			udd_ctrl_send_zlp_in();
   82820:	4b4e      	ldr	r3, [pc, #312]	; (8295c <UOTGHS_Handler+0x2c8>)
   82822:	4798      	blx	r3
   82824:	e74e      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ctrl_in_sent();
   82826:	4b4c      	ldr	r3, [pc, #304]	; (82958 <UOTGHS_Handler+0x2c4>)
   82828:	4798      	blx	r3
   8282a:	e74b      	b.n	826c4 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8282c:	4b3d      	ldr	r3, [pc, #244]	; (82924 <UOTGHS_Handler+0x290>)
   8282e:	781b      	ldrb	r3, [r3, #0]
   82830:	2b01      	cmp	r3, #1
   82832:	d00b      	beq.n	8284c <UOTGHS_Handler+0x1b8>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   82834:	2b02      	cmp	r3, #2
   82836:	d004      	beq.n	82842 <UOTGHS_Handler+0x1ae>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   82838:	2b04      	cmp	r3, #4
   8283a:	d002      	beq.n	82842 <UOTGHS_Handler+0x1ae>
			udd_ctrl_stall_data();
   8283c:	4b45      	ldr	r3, [pc, #276]	; (82954 <UOTGHS_Handler+0x2c0>)
   8283e:	4798      	blx	r3
   82840:	e001      	b.n	82846 <UOTGHS_Handler+0x1b2>
			udd_ctrl_endofrequest();
   82842:	4b42      	ldr	r3, [pc, #264]	; (8294c <UOTGHS_Handler+0x2b8>)
   82844:	4798      	blx	r3
		udd_ctrl_init();
   82846:	4b42      	ldr	r3, [pc, #264]	; (82950 <UOTGHS_Handler+0x2bc>)
   82848:	4798      	blx	r3
   8284a:	e73b      	b.n	826c4 <UOTGHS_Handler+0x30>
	nb_data = udd_byte_count(0);
   8284c:	4b32      	ldr	r3, [pc, #200]	; (82918 <UOTGHS_Handler+0x284>)
   8284e:	6818      	ldr	r0, [r3, #0]
   82850:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   82854:	4b39      	ldr	r3, [pc, #228]	; (8293c <UOTGHS_Handler+0x2a8>)
   82856:	899b      	ldrh	r3, [r3, #12]
   82858:	4a3a      	ldr	r2, [pc, #232]	; (82944 <UOTGHS_Handler+0x2b0>)
   8285a:	8814      	ldrh	r4, [r2, #0]
   8285c:	1822      	adds	r2, r4, r0
   8285e:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82860:	bfbc      	itt	lt
   82862:	1b1b      	sublt	r3, r3, r4
   82864:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82866:	4b35      	ldr	r3, [pc, #212]	; (8293c <UOTGHS_Handler+0x2a8>)
   82868:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   8286a:	b178      	cbz	r0, 8288c <UOTGHS_Handler+0x1f8>
   8286c:	1e63      	subs	r3, r4, #1
   8286e:	441a      	add	r2, r3
   82870:	4b2e      	ldr	r3, [pc, #184]	; (8292c <UOTGHS_Handler+0x298>)
		*ptr_dest++ = *ptr_src++;
   82872:	f813 1b01 	ldrb.w	r1, [r3], #1
   82876:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   8287a:	b2d9      	uxtb	r1, r3
   8287c:	4281      	cmp	r1, r0
   8287e:	d3f8      	bcc.n	82872 <UOTGHS_Handler+0x1de>
	udd_ctrl_payload_buf_cnt += nb_data;
   82880:	4404      	add	r4, r0
   82882:	b2a4      	uxth	r4, r4
   82884:	4b2f      	ldr	r3, [pc, #188]	; (82944 <UOTGHS_Handler+0x2b0>)
   82886:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   82888:	2840      	cmp	r0, #64	; 0x40
   8288a:	d00c      	beq.n	828a6 <UOTGHS_Handler+0x212>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   8288c:	4b2b      	ldr	r3, [pc, #172]	; (8293c <UOTGHS_Handler+0x2a8>)
   8288e:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   82890:	695b      	ldr	r3, [r3, #20]
   82892:	b113      	cbz	r3, 8289a <UOTGHS_Handler+0x206>
			if (!udd_g_ctrlreq.over_under_run()) {
   82894:	4798      	blx	r3
   82896:	2800      	cmp	r0, #0
   82898:	d02e      	beq.n	828f8 <UOTGHS_Handler+0x264>
		udd_ack_out_received(0);
   8289a:	2202      	movs	r2, #2
   8289c:	4b26      	ldr	r3, [pc, #152]	; (82938 <UOTGHS_Handler+0x2a4>)
   8289e:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   828a0:	4b2e      	ldr	r3, [pc, #184]	; (8295c <UOTGHS_Handler+0x2c8>)
   828a2:	4798      	blx	r3
   828a4:	e70e      	b.n	826c4 <UOTGHS_Handler+0x30>
			|| (udd_g_ctrlreq.req.wLength <=
   828a6:	4b25      	ldr	r3, [pc, #148]	; (8293c <UOTGHS_Handler+0x2a8>)
   828a8:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   828aa:	4b25      	ldr	r3, [pc, #148]	; (82940 <UOTGHS_Handler+0x2ac>)
   828ac:	881b      	ldrh	r3, [r3, #0]
   828ae:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   828b0:	429a      	cmp	r2, r3
   828b2:	ddeb      	ble.n	8288c <UOTGHS_Handler+0x1f8>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   828b4:	4b21      	ldr	r3, [pc, #132]	; (8293c <UOTGHS_Handler+0x2a8>)
   828b6:	899b      	ldrh	r3, [r3, #12]
   828b8:	42a3      	cmp	r3, r4
   828ba:	d051      	beq.n	82960 <UOTGHS_Handler+0x2cc>
	udd_ack_out_received(0);
   828bc:	4b1e      	ldr	r3, [pc, #120]	; (82938 <UOTGHS_Handler+0x2a4>)
   828be:	2202      	movs	r2, #2
   828c0:	601a      	str	r2, [r3, #0]
	udd_ack_nak_in(0);
   828c2:	2210      	movs	r2, #16
   828c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   828c6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   828ca:	fab3 f383 	clz	r3, r3
   828ce:	095b      	lsrs	r3, r3, #5
   828d0:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   828d2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   828d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   828d8:	2100      	movs	r1, #0
   828da:	4b0c      	ldr	r3, [pc, #48]	; (8290c <UOTGHS_Handler+0x278>)
   828dc:	7019      	strb	r1, [r3, #0]
	return flags;
   828de:	9b02      	ldr	r3, [sp, #8]
	udd_enable_nak_in_interrupt(0);
   828e0:	4919      	ldr	r1, [pc, #100]	; (82948 <UOTGHS_Handler+0x2b4>)
   828e2:	600a      	str	r2, [r1, #0]
	if (cpu_irq_is_enabled_flags(flags))
   828e4:	2b00      	cmp	r3, #0
   828e6:	f43f aeed 	beq.w	826c4 <UOTGHS_Handler+0x30>
		cpu_irq_enable();
   828ea:	2201      	movs	r2, #1
   828ec:	4b07      	ldr	r3, [pc, #28]	; (8290c <UOTGHS_Handler+0x278>)
   828ee:	701a      	strb	r2, [r3, #0]
   828f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   828f4:	b662      	cpsie	i
   828f6:	e6e5      	b.n	826c4 <UOTGHS_Handler+0x30>
				udd_ctrl_stall_data();
   828f8:	4b16      	ldr	r3, [pc, #88]	; (82954 <UOTGHS_Handler+0x2c0>)
   828fa:	4798      	blx	r3
				udd_ack_out_received(0);
   828fc:	2202      	movs	r2, #2
   828fe:	4b0e      	ldr	r3, [pc, #56]	; (82938 <UOTGHS_Handler+0x2a4>)
   82900:	601a      	str	r2, [r3, #0]
   82902:	e6df      	b.n	826c4 <UOTGHS_Handler+0x30>
   82904:	000820c5 	.word	0x000820c5
   82908:	400ac000 	.word	0x400ac000
   8290c:	2007026e 	.word	0x2007026e
   82910:	00081659 	.word	0x00081659
   82914:	400ac220 	.word	0x400ac220
   82918:	400ac130 	.word	0x400ac130
   8291c:	400ac1c0 	.word	0x400ac1c0
   82920:	400ac134 	.word	0x400ac134
   82924:	20071628 	.word	0x20071628
   82928:	20075907 	.word	0x20075907
   8292c:	20180000 	.word	0x20180000
   82930:	20180008 	.word	0x20180008
   82934:	00081699 	.word	0x00081699
   82938:	400ac160 	.word	0x400ac160
   8293c:	20075908 	.word	0x20075908
   82940:	20071626 	.word	0x20071626
   82944:	20071624 	.word	0x20071624
   82948:	400ac1f0 	.word	0x400ac1f0
   8294c:	000821c5 	.word	0x000821c5
   82950:	000820fd 	.word	0x000820fd
   82954:	00082159 	.word	0x00082159
   82958:	000821d5 	.word	0x000821d5
   8295c:	00082171 	.word	0x00082171
		if (!udd_g_ctrlreq.over_under_run) {
   82960:	4ba5      	ldr	r3, [pc, #660]	; (82bf8 <UOTGHS_Handler+0x564>)
   82962:	695b      	ldr	r3, [r3, #20]
   82964:	b153      	cbz	r3, 8297c <UOTGHS_Handler+0x2e8>
		if (!udd_g_ctrlreq.over_under_run()) {
   82966:	4798      	blx	r3
   82968:	b170      	cbz	r0, 82988 <UOTGHS_Handler+0x2f4>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8296a:	49a4      	ldr	r1, [pc, #656]	; (82bfc <UOTGHS_Handler+0x568>)
   8296c:	4aa4      	ldr	r2, [pc, #656]	; (82c00 <UOTGHS_Handler+0x56c>)
   8296e:	880b      	ldrh	r3, [r1, #0]
   82970:	8810      	ldrh	r0, [r2, #0]
   82972:	4403      	add	r3, r0
   82974:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82976:	2300      	movs	r3, #0
   82978:	8013      	strh	r3, [r2, #0]
   8297a:	e79f      	b.n	828bc <UOTGHS_Handler+0x228>
			udd_ctrl_stall_data();
   8297c:	4ba1      	ldr	r3, [pc, #644]	; (82c04 <UOTGHS_Handler+0x570>)
   8297e:	4798      	blx	r3
			udd_ack_out_received(0);
   82980:	2202      	movs	r2, #2
   82982:	4ba1      	ldr	r3, [pc, #644]	; (82c08 <UOTGHS_Handler+0x574>)
   82984:	601a      	str	r2, [r3, #0]
   82986:	e69d      	b.n	826c4 <UOTGHS_Handler+0x30>
			udd_ctrl_stall_data();
   82988:	4b9e      	ldr	r3, [pc, #632]	; (82c04 <UOTGHS_Handler+0x570>)
   8298a:	4798      	blx	r3
			udd_ack_out_received(0);
   8298c:	2202      	movs	r2, #2
   8298e:	4b9e      	ldr	r3, [pc, #632]	; (82c08 <UOTGHS_Handler+0x574>)
   82990:	601a      	str	r2, [r3, #0]
   82992:	e697      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ack_nak_out(0);
   82994:	2208      	movs	r2, #8
   82996:	4b9c      	ldr	r3, [pc, #624]	; (82c08 <UOTGHS_Handler+0x574>)
   82998:	601a      	str	r2, [r3, #0]
	if (Is_udd_in_send(0))
   8299a:	3b30      	subs	r3, #48	; 0x30
   8299c:	681b      	ldr	r3, [r3, #0]
   8299e:	f013 0f01 	tst.w	r3, #1
   829a2:	f47f ae8f 	bne.w	826c4 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   829a6:	4b99      	ldr	r3, [pc, #612]	; (82c0c <UOTGHS_Handler+0x578>)
   829a8:	781b      	ldrb	r3, [r3, #0]
   829aa:	2b03      	cmp	r3, #3
   829ac:	f47f ae8a 	bne.w	826c4 <UOTGHS_Handler+0x30>
		udd_enable_stall_handshake(0);
   829b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   829b4:	4b96      	ldr	r3, [pc, #600]	; (82c10 <UOTGHS_Handler+0x57c>)
   829b6:	601a      	str	r2, [r3, #0]
   829b8:	e684      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ack_nak_in(0);
   829ba:	2210      	movs	r2, #16
   829bc:	4b92      	ldr	r3, [pc, #584]	; (82c08 <UOTGHS_Handler+0x574>)
   829be:	601a      	str	r2, [r3, #0]
	if (Is_udd_out_received(0))
   829c0:	3b30      	subs	r3, #48	; 0x30
   829c2:	681b      	ldr	r3, [r3, #0]
   829c4:	f013 0f02 	tst.w	r3, #2
   829c8:	f47f ae7c 	bne.w	826c4 <UOTGHS_Handler+0x30>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   829cc:	4b8f      	ldr	r3, [pc, #572]	; (82c0c <UOTGHS_Handler+0x578>)
   829ce:	781b      	ldrb	r3, [r3, #0]
   829d0:	2b01      	cmp	r3, #1
   829d2:	d007      	beq.n	829e4 <UOTGHS_Handler+0x350>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   829d4:	2b04      	cmp	r3, #4
   829d6:	f47f ae75 	bne.w	826c4 <UOTGHS_Handler+0x30>
		udd_enable_stall_handshake(0);
   829da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   829de:	4b8c      	ldr	r3, [pc, #560]	; (82c10 <UOTGHS_Handler+0x57c>)
   829e0:	601a      	str	r2, [r3, #0]
   829e2:	e66f      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ctrl_send_zlp_in();
   829e4:	4b8b      	ldr	r3, [pc, #556]	; (82c14 <UOTGHS_Handler+0x580>)
   829e6:	4798      	blx	r3
   829e8:	e66c      	b.n	826c4 <UOTGHS_Handler+0x30>
			if (udd_endpoint_dma_get_status(ep)
   829ea:	4b8b      	ldr	r3, [pc, #556]	; (82c18 <UOTGHS_Handler+0x584>)
   829ec:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   829f0:	68da      	ldr	r2, [r3, #12]
   829f2:	f012 0f01 	tst.w	r2, #1
   829f6:	f47f ae65 	bne.w	826c4 <UOTGHS_Handler+0x30>
			udd_disable_endpoint_dma_interrupt(ep);
   829fa:	4a88      	ldr	r2, [pc, #544]	; (82c1c <UOTGHS_Handler+0x588>)
   829fc:	6151      	str	r1, [r2, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   829fe:	68dd      	ldr	r5, [r3, #12]
			if (nb_remaining) {
   82a00:	0c2d      	lsrs	r5, r5, #16
   82a02:	d008      	beq.n	82a16 <UOTGHS_Handler+0x382>
				ptr_job->buf_cnt -= nb_remaining;
   82a04:	4b86      	ldr	r3, [pc, #536]	; (82c20 <UOTGHS_Handler+0x58c>)
   82a06:	0079      	lsls	r1, r7, #1
   82a08:	19cc      	adds	r4, r1, r7
   82a0a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   82a0e:	68e2      	ldr	r2, [r4, #12]
   82a10:	1b52      	subs	r2, r2, r5
   82a12:	60e2      	str	r2, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   82a14:	60a2      	str	r2, [r4, #8]
			udd_ep_trans_done(ep);
   82a16:	4b83      	ldr	r3, [pc, #524]	; (82c24 <UOTGHS_Handler+0x590>)
   82a18:	4798      	blx	r3
   82a1a:	e653      	b.n	826c4 <UOTGHS_Handler+0x30>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
					&& Is_udd_in_send(ep)) {
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   82a1c:	4b82      	ldr	r3, [pc, #520]	; (82c28 <UOTGHS_Handler+0x594>)
   82a1e:	2201      	movs	r2, #1
   82a20:	f849 2003 	str.w	r2, [r9, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   82a24:	4978      	ldr	r1, [pc, #480]	; (82c08 <UOTGHS_Handler+0x574>)
   82a26:	f849 2001 	str.w	r2, [r9, r1]
				udd_ack_fifocon(ep);
   82a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82a2e:	f849 2003 	str.w	r2, [r9, r3]
		ptr_job = &udd_ep_job[ep - 1];
   82a32:	eb07 0747 	add.w	r7, r7, r7, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   82a36:	4602      	mov	r2, r0
   82a38:	2100      	movs	r1, #0
   82a3a:	4879      	ldr	r0, [pc, #484]	; (82c20 <UOTGHS_Handler+0x58c>)
   82a3c:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   82a40:	4b7a      	ldr	r3, [pc, #488]	; (82c2c <UOTGHS_Handler+0x598>)
   82a42:	4798      	blx	r3
   82a44:	e63e      	b.n	826c4 <UOTGHS_Handler+0x30>
   82a46:	3301      	adds	r3, #1
   82a48:	3604      	adds	r6, #4
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82a4a:	2b04      	cmp	r3, #4
   82a4c:	f000 8100 	beq.w	82c50 <UOTGHS_Handler+0x5bc>
   82a50:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   82a52:	461d      	mov	r5, r3
   82a54:	1e5f      	subs	r7, r3, #1
   82a56:	46b8      	mov	r8, r7
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   82a58:	6914      	ldr	r4, [r2, #16]
   82a5a:	fa0e f107 	lsl.w	r1, lr, r7
   82a5e:	420c      	tst	r4, r1
   82a60:	d002      	beq.n	82a68 <UOTGHS_Handler+0x3d4>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   82a62:	6854      	ldr	r4, [r2, #4]
   82a64:	4221      	tst	r1, r4
   82a66:	d1c0      	bne.n	829ea <UOTGHS_Handler+0x356>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   82a68:	6911      	ldr	r1, [r2, #16]
   82a6a:	fa0c f505 	lsl.w	r5, ip, r5
   82a6e:	4229      	tst	r1, r5
   82a70:	d0e9      	beq.n	82a46 <UOTGHS_Handler+0x3b2>
   82a72:	ea4f 0983 	mov.w	r9, r3, lsl #2
   82a76:	f106 0490 	add.w	r4, r6, #144	; 0x90
			if (Is_udd_in_send_interrupt_enabled(ep)
   82a7a:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
   82a7e:	f011 0f01 	tst.w	r1, #1
   82a82:	d003      	beq.n	82a8c <UOTGHS_Handler+0x3f8>
					&& Is_udd_in_send(ep)) {
   82a84:	6831      	ldr	r1, [r6, #0]
   82a86:	f011 0f01 	tst.w	r1, #1
   82a8a:	d1c7      	bne.n	82a1c <UOTGHS_Handler+0x388>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   82a8c:	6821      	ldr	r1, [r4, #0]
   82a8e:	f411 5f80 	tst.w	r1, #4096	; 0x1000
   82a92:	d0d8      	beq.n	82a46 <UOTGHS_Handler+0x3b2>
					&& (0 == udd_nb_busy_bank(ep))) {
   82a94:	6831      	ldr	r1, [r6, #0]
   82a96:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   82a9a:	d1d4      	bne.n	82a46 <UOTGHS_Handler+0x3b2>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   82a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82aa0:	4b61      	ldr	r3, [pc, #388]	; (82c28 <UOTGHS_Handler+0x594>)
   82aa2:	f849 2003 	str.w	r2, [r9, r3]
				udd_disable_endpoint_interrupt(ep);
   82aa6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   82aaa:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   82aac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   82ab0:	4b5b      	ldr	r3, [pc, #364]	; (82c20 <UOTGHS_Handler+0x58c>)
   82ab2:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   82ab6:	f898 2014 	ldrb.w	r2, [r8, #20]
   82aba:	f36f 0282 	bfc	r2, #2, #1
   82abe:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   82ac2:	4a5b      	ldr	r2, [pc, #364]	; (82c30 <UOTGHS_Handler+0x59c>)
   82ac4:	f859 3002 	ldr.w	r3, [r9, r2]
   82ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   82acc:	f849 3002 	str.w	r3, [r9, r2]
				udd_enable_stall_handshake(ep);
   82ad0:	4b4f      	ldr	r3, [pc, #316]	; (82c10 <UOTGHS_Handler+0x57c>)
   82ad2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82ad6:	f849 2003 	str.w	r2, [r9, r3]
				udd_reset_data_toggle(ep);
   82ada:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82ade:	f849 2003 	str.w	r2, [r9, r3]
   82ae2:	e5ef      	b.n	826c4 <UOTGHS_Handler+0x30>
		udd_ack_reset();
   82ae4:	4c4d      	ldr	r4, [pc, #308]	; (82c1c <UOTGHS_Handler+0x588>)
   82ae6:	2308      	movs	r3, #8
   82ae8:	60a3      	str	r3, [r4, #8]
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   82aea:	4e4d      	ldr	r6, [pc, #308]	; (82c20 <UOTGHS_Handler+0x58c>)
   82aec:	2201      	movs	r2, #1
   82aee:	4611      	mov	r1, r2
   82af0:	4630      	mov	r0, r6
   82af2:	4d4e      	ldr	r5, [pc, #312]	; (82c2c <UOTGHS_Handler+0x598>)
   82af4:	47a8      	blx	r5
   82af6:	2202      	movs	r2, #2
   82af8:	2101      	movs	r1, #1
   82afa:	f106 0018 	add.w	r0, r6, #24
   82afe:	47a8      	blx	r5
   82b00:	2203      	movs	r2, #3
   82b02:	2101      	movs	r1, #1
   82b04:	f106 0030 	add.w	r0, r6, #48	; 0x30
   82b08:	47a8      	blx	r5
		udc_reset();
   82b0a:	4b4a      	ldr	r3, [pc, #296]	; (82c34 <UOTGHS_Handler+0x5a0>)
   82b0c:	4798      	blx	r3
	udd_configure_address(0);
   82b0e:	6823      	ldr	r3, [r4, #0]
   82b10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82b14:	6023      	str	r3, [r4, #0]
	udd_enable_address();
   82b16:	6823      	ldr	r3, [r4, #0]
   82b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b1c:	6023      	str	r3, [r4, #0]
	udd_configure_endpoint(0,
   82b1e:	4a44      	ldr	r2, [pc, #272]	; (82c30 <UOTGHS_Handler+0x59c>)
   82b20:	6813      	ldr	r3, [r2, #0]
   82b22:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   82b26:	f023 031c 	bic.w	r3, r3, #28
   82b2a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   82b2e:	6013      	str	r3, [r2, #0]
	udd_allocate_memory(0);
   82b30:	6813      	ldr	r3, [r2, #0]
   82b32:	f043 0302 	orr.w	r3, r3, #2
   82b36:	6013      	str	r3, [r2, #0]
	udd_enable_endpoint(0);
   82b38:	69e3      	ldr	r3, [r4, #28]
   82b3a:	f043 0301 	orr.w	r3, r3, #1
   82b3e:	61e3      	str	r3, [r4, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82b40:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82b44:	fab3 f383 	clz	r3, r3
   82b48:	095b      	lsrs	r3, r3, #5
   82b4a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   82b4c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82b4e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82b52:	2200      	movs	r2, #0
   82b54:	4b38      	ldr	r3, [pc, #224]	; (82c38 <UOTGHS_Handler+0x5a4>)
   82b56:	701a      	strb	r2, [r3, #0]
	return flags;
   82b58:	9a03      	ldr	r2, [sp, #12]
	udd_enable_setup_received_interrupt(0);
   82b5a:	4b2d      	ldr	r3, [pc, #180]	; (82c10 <UOTGHS_Handler+0x57c>)
   82b5c:	2104      	movs	r1, #4
   82b5e:	6019      	str	r1, [r3, #0]
	udd_enable_out_received_interrupt(0);
   82b60:	2102      	movs	r1, #2
   82b62:	6019      	str	r1, [r3, #0]
	udd_enable_endpoint_interrupt(0);
   82b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82b68:	61a3      	str	r3, [r4, #24]
	if (cpu_irq_is_enabled_flags(flags))
   82b6a:	b12a      	cbz	r2, 82b78 <UOTGHS_Handler+0x4e4>
		cpu_irq_enable();
   82b6c:	2201      	movs	r2, #1
   82b6e:	4b32      	ldr	r3, [pc, #200]	; (82c38 <UOTGHS_Handler+0x5a4>)
   82b70:	701a      	strb	r2, [r3, #0]
   82b72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82b76:	b662      	cpsie	i
		udd_ctrl_init();
   82b78:	4b30      	ldr	r3, [pc, #192]	; (82c3c <UOTGHS_Handler+0x5a8>)
   82b7a:	4798      	blx	r3
		goto udd_interrupt_end;
   82b7c:	e5a2      	b.n	826c4 <UOTGHS_Handler+0x30>
		otg_unfreeze_clock();
   82b7e:	4b27      	ldr	r3, [pc, #156]	; (82c1c <UOTGHS_Handler+0x588>)
   82b80:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82b84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82b88:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_disable_suspend_interrupt();
   82b8c:	2201      	movs	r2, #1
   82b8e:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   82b90:	2210      	movs	r2, #16
   82b92:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   82b94:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82b9c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   82ba0:	2000      	movs	r0, #0
   82ba2:	4b27      	ldr	r3, [pc, #156]	; (82c40 <UOTGHS_Handler+0x5ac>)
   82ba4:	4798      	blx	r3
		goto udd_interrupt_end;
   82ba6:	e58d      	b.n	826c4 <UOTGHS_Handler+0x30>
	if (Is_otg_vbus_transition()) {
   82ba8:	4b1c      	ldr	r3, [pc, #112]	; (82c1c <UOTGHS_Handler+0x588>)
   82baa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82bae:	f013 0f02 	tst.w	r3, #2
   82bb2:	f43f ad87 	beq.w	826c4 <UOTGHS_Handler+0x30>
		otg_unfreeze_clock();
   82bb6:	4b19      	ldr	r3, [pc, #100]	; (82c1c <UOTGHS_Handler+0x588>)
   82bb8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82bc0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   82bc4:	2202      	movs	r2, #2
   82bc6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   82bca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82bd2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		if (Is_otg_vbus_high()) {
   82bd6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82bda:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   82bde:	bf14      	ite	ne
   82be0:	4b18      	ldrne	r3, [pc, #96]	; (82c44 <UOTGHS_Handler+0x5b0>)
			udd_detach();
   82be2:	4b19      	ldreq	r3, [pc, #100]	; (82c48 <UOTGHS_Handler+0x5b4>)
   82be4:	4798      	blx	r3
		UDC_VBUS_EVENT(Is_otg_vbus_high());
   82be6:	4b0d      	ldr	r3, [pc, #52]	; (82c1c <UOTGHS_Handler+0x588>)
   82be8:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
   82bec:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   82bf0:	4b16      	ldr	r3, [pc, #88]	; (82c4c <UOTGHS_Handler+0x5b8>)
   82bf2:	4798      	blx	r3
		goto udd_interrupt_end;
   82bf4:	e566      	b.n	826c4 <UOTGHS_Handler+0x30>
   82bf6:	bf00      	nop
   82bf8:	20075908 	.word	0x20075908
   82bfc:	20071626 	.word	0x20071626
   82c00:	20071624 	.word	0x20071624
   82c04:	00082159 	.word	0x00082159
   82c08:	400ac160 	.word	0x400ac160
   82c0c:	20071628 	.word	0x20071628
   82c10:	400ac1f0 	.word	0x400ac1f0
   82c14:	00082171 	.word	0x00082171
   82c18:	400ac300 	.word	0x400ac300
   82c1c:	400ac000 	.word	0x400ac000
   82c20:	2007162c 	.word	0x2007162c
   82c24:	00082389 	.word	0x00082389
   82c28:	400ac220 	.word	0x400ac220
   82c2c:	00082351 	.word	0x00082351
   82c30:	400ac100 	.word	0x400ac100
   82c34:	00081611 	.word	0x00081611
   82c38:	2007026e 	.word	0x2007026e
   82c3c:	000820fd 	.word	0x000820fd
   82c40:	00082531 	.word	0x00082531
   82c44:	000825d5 	.word	0x000825d5
   82c48:	00082661 	.word	0x00082661
   82c4c:	000838e9 	.word	0x000838e9
	if (Is_udd_reset()) {
   82c50:	4b19      	ldr	r3, [pc, #100]	; (82cb8 <UOTGHS_Handler+0x624>)
   82c52:	685b      	ldr	r3, [r3, #4]
   82c54:	f013 0f08 	tst.w	r3, #8
   82c58:	f47f af44 	bne.w	82ae4 <UOTGHS_Handler+0x450>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   82c5c:	4b16      	ldr	r3, [pc, #88]	; (82cb8 <UOTGHS_Handler+0x624>)
   82c5e:	691b      	ldr	r3, [r3, #16]
   82c60:	f013 0f01 	tst.w	r3, #1
   82c64:	d004      	beq.n	82c70 <UOTGHS_Handler+0x5dc>
   82c66:	4b14      	ldr	r3, [pc, #80]	; (82cb8 <UOTGHS_Handler+0x624>)
   82c68:	685b      	ldr	r3, [r3, #4]
   82c6a:	f013 0f01 	tst.w	r3, #1
   82c6e:	d186      	bne.n	82b7e <UOTGHS_Handler+0x4ea>
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   82c70:	4b11      	ldr	r3, [pc, #68]	; (82cb8 <UOTGHS_Handler+0x624>)
   82c72:	691b      	ldr	r3, [r3, #16]
   82c74:	f013 0f10 	tst.w	r3, #16
   82c78:	d096      	beq.n	82ba8 <UOTGHS_Handler+0x514>
   82c7a:	4b0f      	ldr	r3, [pc, #60]	; (82cb8 <UOTGHS_Handler+0x624>)
   82c7c:	685b      	ldr	r3, [r3, #4]
   82c7e:	f013 0f10 	tst.w	r3, #16
   82c82:	d091      	beq.n	82ba8 <UOTGHS_Handler+0x514>
		otg_unfreeze_clock();
   82c84:	4a0c      	ldr	r2, [pc, #48]	; (82cb8 <UOTGHS_Handler+0x624>)
   82c86:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   82c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   82c8e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
   82c92:	4613      	mov	r3, r2
   82c94:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   82c98:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   82c9c:	d103      	bne.n	82ca6 <UOTGHS_Handler+0x612>
			if (Is_udd_suspend()) {
   82c9e:	685a      	ldr	r2, [r3, #4]
   82ca0:	f012 0f01 	tst.w	r2, #1
   82ca4:	d0f6      	beq.n	82c94 <UOTGHS_Handler+0x600>
		udd_disable_wake_up_interrupt();
   82ca6:	4b04      	ldr	r3, [pc, #16]	; (82cb8 <UOTGHS_Handler+0x624>)
   82ca8:	2210      	movs	r2, #16
   82caa:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   82cac:	2001      	movs	r0, #1
   82cae:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   82cb0:	4b02      	ldr	r3, [pc, #8]	; (82cbc <UOTGHS_Handler+0x628>)
   82cb2:	4798      	blx	r3
		goto udd_interrupt_end;
   82cb4:	e506      	b.n	826c4 <UOTGHS_Handler+0x30>
   82cb6:	bf00      	nop
   82cb8:	400ac000 	.word	0x400ac000
   82cbc:	00082531 	.word	0x00082531

00082cc0 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   82cc0:	4b03      	ldr	r3, [pc, #12]	; (82cd0 <udd_is_high_speed+0x10>)
   82cc2:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
}
   82cc6:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   82cca:	bf18      	it	ne
   82ccc:	2001      	movne	r0, #1
   82cce:	4770      	bx	lr
   82cd0:	400ac000 	.word	0x400ac000

00082cd4 <udd_set_address>:
	udd_disable_address();
   82cd4:	4b08      	ldr	r3, [pc, #32]	; (82cf8 <udd_set_address+0x24>)
   82cd6:	681a      	ldr	r2, [r3, #0]
   82cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   82cdc:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   82cde:	681a      	ldr	r2, [r3, #0]
   82ce0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82ce4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82ce8:	4302      	orrs	r2, r0
   82cea:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   82cec:	681a      	ldr	r2, [r3, #0]
   82cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82cf2:	601a      	str	r2, [r3, #0]
   82cf4:	4770      	bx	lr
   82cf6:	bf00      	nop
   82cf8:	400ac000 	.word	0x400ac000

00082cfc <udd_getaddress>:
	return udd_get_configured_address();
   82cfc:	4b02      	ldr	r3, [pc, #8]	; (82d08 <udd_getaddress+0xc>)
   82cfe:	6818      	ldr	r0, [r3, #0]
}
   82d00:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82d04:	4770      	bx	lr
   82d06:	bf00      	nop
   82d08:	400ac000 	.word	0x400ac000

00082d0c <udd_get_frame_number>:
	return udd_frame_number();
   82d0c:	4b02      	ldr	r3, [pc, #8]	; (82d18 <udd_get_frame_number+0xc>)
   82d0e:	6a18      	ldr	r0, [r3, #32]
}
   82d10:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   82d14:	4770      	bx	lr
   82d16:	bf00      	nop
   82d18:	400ac000 	.word	0x400ac000

00082d1c <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   82d1c:	4b02      	ldr	r3, [pc, #8]	; (82d28 <udd_get_micro_frame_number+0xc>)
   82d1e:	6a18      	ldr	r0, [r3, #32]
}
   82d20:	f3c0 000d 	ubfx	r0, r0, #0, #14
   82d24:	4770      	bx	lr
   82d26:	bf00      	nop
   82d28:	400ac000 	.word	0x400ac000

00082d2c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   82d2c:	4b01      	ldr	r3, [pc, #4]	; (82d34 <udd_set_setup_payload+0x8>)
   82d2e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   82d30:	8199      	strh	r1, [r3, #12]
   82d32:	4770      	bx	lr
   82d34:	20075908 	.word	0x20075908

00082d38 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82d38:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   82d3c:	2a03      	cmp	r2, #3
   82d3e:	d900      	bls.n	82d42 <udd_ep_free+0xa>
   82d40:	4770      	bx	lr
{
   82d42:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   82d44:	4810      	ldr	r0, [pc, #64]	; (82d88 <udd_ep_free+0x50>)
   82d46:	69c3      	ldr	r3, [r0, #28]
   82d48:	2101      	movs	r1, #1
   82d4a:	fa01 f402 	lsl.w	r4, r1, r2
   82d4e:	ea23 0304 	bic.w	r3, r3, r4
   82d52:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
   82d54:	f500 7080 	add.w	r0, r0, #256	; 0x100
   82d58:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   82d5c:	f023 0302 	bic.w	r3, r3, #2
   82d60:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82d64:	1e56      	subs	r6, r2, #1
   82d66:	4c09      	ldr	r4, [pc, #36]	; (82d8c <udd_ep_free+0x54>)
   82d68:	fa06 f501 	lsl.w	r5, r6, r1
   82d6c:	19a8      	adds	r0, r5, r6
   82d6e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   82d72:	4b07      	ldr	r3, [pc, #28]	; (82d90 <udd_ep_free+0x58>)
   82d74:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   82d76:	4435      	add	r5, r6
   82d78:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   82d7c:	7d23      	ldrb	r3, [r4, #20]
   82d7e:	f36f 0382 	bfc	r3, #2, #1
   82d82:	7523      	strb	r3, [r4, #20]
   82d84:	bd70      	pop	{r4, r5, r6, pc}
   82d86:	bf00      	nop
   82d88:	400ac000 	.word	0x400ac000
   82d8c:	2007162c 	.word	0x2007162c
   82d90:	00082351 	.word	0x00082351

00082d94 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
   82d94:	f000 000f 	and.w	r0, r0, #15
   82d98:	4b02      	ldr	r3, [pc, #8]	; (82da4 <udd_ep_is_halted+0x10>)
   82d9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   82d9e:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   82da2:	4770      	bx	lr
   82da4:	400ac1c0 	.word	0x400ac1c0

00082da8 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82da8:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   82dac:	2b03      	cmp	r3, #3
   82dae:	d85d      	bhi.n	82e6c <udd_ep_set_halt+0xc4>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   82db0:	4a35      	ldr	r2, [pc, #212]	; (82e88 <udd_ep_set_halt+0xe0>)
   82db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82db6:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   82dba:	d159      	bne.n	82e70 <udd_ep_set_halt+0xc8>
{
   82dbc:	b410      	push	{r4}
   82dbe:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82dc0:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82dc2:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   82dc6:	4a31      	ldr	r2, [pc, #196]	; (82e8c <udd_ep_set_halt+0xe4>)
   82dc8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   82dcc:	7d12      	ldrb	r2, [r2, #20]
   82dce:	f012 0f04 	tst.w	r2, #4
   82dd2:	d14f      	bne.n	82e74 <udd_ep_set_halt+0xcc>
	if (ptr_job->busy == true) {
   82dd4:	f012 0f01 	tst.w	r2, #1
   82dd8:	d150      	bne.n	82e7c <udd_ep_set_halt+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82dda:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82dde:	fab2 f282 	clz	r2, r2
   82de2:	0952      	lsrs	r2, r2, #5
   82de4:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82de6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82de8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82dec:	2400      	movs	r4, #0
   82dee:	4a28      	ldr	r2, [pc, #160]	; (82e90 <udd_ep_set_halt+0xe8>)
   82df0:	7014      	strb	r4, [r2, #0]
	return flags;
   82df2:	9c01      	ldr	r4, [sp, #4]
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82df4:	f010 0f80 	tst.w	r0, #128	; 0x80
   82df8:	d118      	bne.n	82e2c <udd_ep_set_halt+0x84>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   82dfa:	4926      	ldr	r1, [pc, #152]	; (82e94 <udd_ep_set_halt+0xec>)
   82dfc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   82e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   82e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_ack_stall(ep_index);
   82e08:	2140      	movs	r1, #64	; 0x40
   82e0a:	4a23      	ldr	r2, [pc, #140]	; (82e98 <udd_ep_set_halt+0xf0>)
   82e0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   82e10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   82e14:	3290      	adds	r2, #144	; 0x90
   82e16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   82e1a:	2c00      	cmp	r4, #0
   82e1c:	d032      	beq.n	82e84 <udd_ep_set_halt+0xdc>
		cpu_irq_enable();
   82e1e:	2001      	movs	r0, #1
   82e20:	4b1b      	ldr	r3, [pc, #108]	; (82e90 <udd_ep_set_halt+0xe8>)
   82e22:	7018      	strb	r0, [r3, #0]
   82e24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82e28:	b662      	cpsie	i
   82e2a:	e024      	b.n	82e76 <udd_ep_set_halt+0xce>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82e2c:	4a1b      	ldr	r2, [pc, #108]	; (82e9c <udd_ep_set_halt+0xf4>)
   82e2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   82e32:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   82e36:	d0e0      	beq.n	82dfa <udd_ep_set_halt+0x52>
		ptr_job->stall_requested = true;
   82e38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82e3c:	4a13      	ldr	r2, [pc, #76]	; (82e8c <udd_ep_set_halt+0xe4>)
   82e3e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   82e42:	7d0a      	ldrb	r2, [r1, #20]
   82e44:	f042 0204 	orr.w	r2, r2, #4
   82e48:	750a      	strb	r2, [r1, #20]
		udd_enable_bank_interrupt(ep_index);
   82e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82e4e:	4914      	ldr	r1, [pc, #80]	; (82ea0 <udd_ep_set_halt+0xf8>)
   82e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   82e54:	fa02 f303 	lsl.w	r3, r2, r3
   82e58:	4a12      	ldr	r2, [pc, #72]	; (82ea4 <udd_ep_set_halt+0xfc>)
   82e5a:	6193      	str	r3, [r2, #24]
	if (cpu_irq_is_enabled_flags(flags))
   82e5c:	b184      	cbz	r4, 82e80 <udd_ep_set_halt+0xd8>
		cpu_irq_enable();
   82e5e:	2001      	movs	r0, #1
   82e60:	4b0b      	ldr	r3, [pc, #44]	; (82e90 <udd_ep_set_halt+0xe8>)
   82e62:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   82e64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82e68:	b662      	cpsie	i
   82e6a:	e004      	b.n	82e76 <udd_ep_set_halt+0xce>
		return false;
   82e6c:	2000      	movs	r0, #0
   82e6e:	4770      	bx	lr
		return true; // Already STALL
   82e70:	2001      	movs	r0, #1
   82e72:	4770      	bx	lr
   82e74:	2001      	movs	r0, #1
}
   82e76:	b003      	add	sp, #12
   82e78:	bc10      	pop	{r4}
   82e7a:	4770      	bx	lr
		return false; // Job on going, stall impossible
   82e7c:	2000      	movs	r0, #0
   82e7e:	e7fa      	b.n	82e76 <udd_ep_set_halt+0xce>
		return true;
   82e80:	2001      	movs	r0, #1
   82e82:	e7f8      	b.n	82e76 <udd_ep_set_halt+0xce>
	return true;
   82e84:	2001      	movs	r0, #1
   82e86:	e7f6      	b.n	82e76 <udd_ep_set_halt+0xce>
   82e88:	400ac1c0 	.word	0x400ac1c0
   82e8c:	2007162c 	.word	0x2007162c
   82e90:	2007026e 	.word	0x2007026e
   82e94:	400ac100 	.word	0x400ac100
   82e98:	400ac160 	.word	0x400ac160
   82e9c:	400ac130 	.word	0x400ac130
   82ea0:	400ac1f0 	.word	0x400ac1f0
   82ea4:	400ac000 	.word	0x400ac000

00082ea8 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82ea8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
   82eac:	2803      	cmp	r0, #3
   82eae:	d851      	bhi.n	82f54 <udd_ep_clear_halt+0xac>
{
   82eb0:	b510      	push	{r4, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82eb2:	1e43      	subs	r3, r0, #1
	if (ptr_job->stall_requested) {
   82eb4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   82eb8:	4a2c      	ldr	r2, [pc, #176]	; (82f6c <udd_ep_clear_halt+0xc4>)
   82eba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   82ebe:	7d12      	ldrb	r2, [r2, #20]
   82ec0:	f012 0f04 	tst.w	r2, #4
   82ec4:	d048      	beq.n	82f58 <udd_ep_clear_halt+0xb0>
		ptr_job->stall_requested = false;
   82ec6:	460a      	mov	r2, r1
   82ec8:	4928      	ldr	r1, [pc, #160]	; (82f6c <udd_ep_clear_halt+0xc4>)
   82eca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82ece:	7d11      	ldrb	r1, [r2, #20]
   82ed0:	f36f 0182 	bfc	r1, #2, #1
   82ed4:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   82ed6:	0082      	lsls	r2, r0, #2
   82ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82edc:	4c24      	ldr	r4, [pc, #144]	; (82f70 <udd_ep_clear_halt+0xc8>)
   82ede:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   82ee2:	4081      	lsls	r1, r0
   82ee4:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
   82ee8:	6161      	str	r1, [r4, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   82eea:	4922      	ldr	r1, [pc, #136]	; (82f74 <udd_ep_clear_halt+0xcc>)
   82eec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82ef0:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82ef4:	d014      	beq.n	82f20 <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
   82ef6:	4920      	ldr	r1, [pc, #128]	; (82f78 <udd_ep_clear_halt+0xd0>)
   82ef8:	5851      	ldr	r1, [r2, r1]
   82efa:	f011 0f40 	tst.w	r1, #64	; 0x40
   82efe:	d006      	beq.n	82f0e <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
   82f00:	2040      	movs	r0, #64	; 0x40
   82f02:	491e      	ldr	r1, [pc, #120]	; (82f7c <udd_ep_clear_halt+0xd4>)
   82f04:	5050      	str	r0, [r2, r1]
			udd_reset_data_toggle(ep_index);
   82f06:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82f0a:	3190      	adds	r1, #144	; 0x90
   82f0c:	5050      	str	r0, [r2, r1]
		udd_disable_stall_handshake(ep_index);
   82f0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   82f12:	4917      	ldr	r1, [pc, #92]	; (82f70 <udd_ep_clear_halt+0xc8>)
   82f14:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   82f16:	481a      	ldr	r0, [pc, #104]	; (82f80 <udd_ep_clear_halt+0xd8>)
   82f18:	5811      	ldr	r1, [r2, r0]
   82f1a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   82f1e:	5011      	str	r1, [r2, r0]
		if (ptr_job->busy == true) {
   82f20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   82f24:	4911      	ldr	r1, [pc, #68]	; (82f6c <udd_ep_clear_halt+0xc4>)
   82f26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82f2a:	7d12      	ldrb	r2, [r2, #20]
   82f2c:	f012 0f01 	tst.w	r2, #1
   82f30:	d101      	bne.n	82f36 <udd_ep_clear_halt+0x8e>
	return true;
   82f32:	2001      	movs	r0, #1
   82f34:	bd10      	pop	{r4, pc}
			ptr_job->busy = false;
   82f36:	4608      	mov	r0, r1
   82f38:	0059      	lsls	r1, r3, #1
   82f3a:	18ca      	adds	r2, r1, r3
   82f3c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   82f40:	7d14      	ldrb	r4, [r2, #20]
   82f42:	f36f 0400 	bfc	r4, #0, #1
   82f46:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
   82f48:	440b      	add	r3, r1
   82f4a:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
   82f4e:	4798      	blx	r3
	return true;
   82f50:	2001      	movs	r0, #1
   82f52:	bd10      	pop	{r4, pc}
		return false;
   82f54:	2000      	movs	r0, #0
   82f56:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   82f58:	0082      	lsls	r2, r0, #2
   82f5a:	4906      	ldr	r1, [pc, #24]	; (82f74 <udd_ep_clear_halt+0xcc>)
   82f5c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82f60:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82f64:	d1c7      	bne.n	82ef6 <udd_ep_clear_halt+0x4e>
	return true;
   82f66:	2001      	movs	r0, #1
}
   82f68:	bd10      	pop	{r4, pc}
   82f6a:	bf00      	nop
   82f6c:	2007162c 	.word	0x2007162c
   82f70:	400ac220 	.word	0x400ac220
   82f74:	400ac1c0 	.word	0x400ac1c0
   82f78:	400ac130 	.word	0x400ac130
   82f7c:	400ac160 	.word	0x400ac160
   82f80:	400ac100 	.word	0x400ac100

00082f84 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   82f84:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   82f88:	2803      	cmp	r0, #3
   82f8a:	d864      	bhi.n	83056 <udd_ep_run+0xd2>
{
   82f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   82f8e:	b083      	sub	sp, #12
	if ((!Is_udd_endpoint_enabled(ep))
   82f90:	4c36      	ldr	r4, [pc, #216]	; (8306c <udd_ep_run+0xe8>)
   82f92:	69e5      	ldr	r5, [r4, #28]
   82f94:	2401      	movs	r4, #1
   82f96:	4084      	lsls	r4, r0
   82f98:	422c      	tst	r4, r5
   82f9a:	d05e      	beq.n	8305a <udd_ep_run+0xd6>
			|| Is_udd_endpoint_stall_requested(ep)
   82f9c:	4c34      	ldr	r4, [pc, #208]	; (83070 <udd_ep_run+0xec>)
   82f9e:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   82fa2:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   82fa6:	d15b      	bne.n	83060 <udd_ep_run+0xdc>
	ptr_job = &udd_ep_job[ep - 1];
   82fa8:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   82faa:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   82fae:	4d31      	ldr	r5, [pc, #196]	; (83074 <udd_ep_run+0xf0>)
   82fb0:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   82fb4:	7d2d      	ldrb	r5, [r5, #20]
   82fb6:	f015 0f04 	tst.w	r5, #4
   82fba:	d153      	bne.n	83064 <udd_ep_run+0xe0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   82fbc:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   82fc0:	fab5 f585 	clz	r5, r5
   82fc4:	096d      	lsrs	r5, r5, #5
   82fc6:	9501      	str	r5, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   82fc8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   82fca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82fce:	2600      	movs	r6, #0
   82fd0:	4d29      	ldr	r5, [pc, #164]	; (83078 <udd_ep_run+0xf4>)
   82fd2:	702e      	strb	r6, [r5, #0]
	return flags;
   82fd4:	9f01      	ldr	r7, [sp, #4]
	if (ptr_job->busy == true) {
   82fd6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82fda:	4e26      	ldr	r6, [pc, #152]	; (83074 <udd_ep_run+0xf0>)
   82fdc:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   82fe0:	7d2d      	ldrb	r5, [r5, #20]
   82fe2:	f015 0f01 	tst.w	r5, #1
   82fe6:	d009      	beq.n	82ffc <udd_ep_run+0x78>
	if (cpu_irq_is_enabled_flags(flags))
   82fe8:	2f00      	cmp	r7, #0
   82fea:	d03d      	beq.n	83068 <udd_ep_run+0xe4>
		cpu_irq_enable();
   82fec:	2201      	movs	r2, #1
   82fee:	4b22      	ldr	r3, [pc, #136]	; (83078 <udd_ep_run+0xf4>)
   82ff0:	701a      	strb	r2, [r3, #0]
   82ff2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82ff6:	b662      	cpsie	i
		return false; // Job already on going
   82ff8:	2000      	movs	r0, #0
   82ffa:	e02f      	b.n	8305c <udd_ep_run+0xd8>
	ptr_job->busy = true;
   82ffc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   83000:	4e1c      	ldr	r6, [pc, #112]	; (83074 <udd_ep_run+0xf0>)
   83002:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   83006:	7d2e      	ldrb	r6, [r5, #20]
   83008:	f046 0601 	orr.w	r6, r6, #1
   8300c:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8300e:	b12f      	cbz	r7, 8301c <udd_ep_run+0x98>
		cpu_irq_enable();
   83010:	2601      	movs	r6, #1
   83012:	4d19      	ldr	r5, [pc, #100]	; (83078 <udd_ep_run+0xf4>)
   83014:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83016:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8301a:	b662      	cpsie	i
	ptr_job->buf = buf;
   8301c:	4f15      	ldr	r7, [pc, #84]	; (83074 <udd_ep_run+0xf0>)
   8301e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   83022:	00ed      	lsls	r5, r5, #3
   83024:	197e      	adds	r6, r7, r5
   83026:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   83028:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   8302a:	2200      	movs	r2, #0
   8302c:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   8302e:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   83030:	9a08      	ldr	r2, [sp, #32]
   83032:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83034:	b911      	cbnz	r1, 8303c <udd_ep_run+0xb8>
   83036:	fab3 f183 	clz	r1, r3
   8303a:	0949      	lsrs	r1, r1, #5
   8303c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   83040:	4b0c      	ldr	r3, [pc, #48]	; (83074 <udd_ep_run+0xf0>)
   83042:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   83046:	7d23      	ldrb	r3, [r4, #20]
   83048:	f361 0341 	bfi	r3, r1, #1, #1
   8304c:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   8304e:	4b0b      	ldr	r3, [pc, #44]	; (8307c <udd_ep_run+0xf8>)
   83050:	4798      	blx	r3
	return true;
   83052:	2001      	movs	r0, #1
   83054:	e002      	b.n	8305c <udd_ep_run+0xd8>
		return false;
   83056:	2000      	movs	r0, #0
   83058:	4770      	bx	lr
		return false; // Endpoint is halted
   8305a:	2000      	movs	r0, #0
}
   8305c:	b003      	add	sp, #12
   8305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   83060:	2000      	movs	r0, #0
   83062:	e7fb      	b.n	8305c <udd_ep_run+0xd8>
   83064:	2000      	movs	r0, #0
   83066:	e7f9      	b.n	8305c <udd_ep_run+0xd8>
		return false; // Job already on going
   83068:	2000      	movs	r0, #0
   8306a:	e7f7      	b.n	8305c <udd_ep_run+0xd8>
   8306c:	400ac000 	.word	0x400ac000
   83070:	400ac1c0 	.word	0x400ac1c0
   83074:	2007162c 	.word	0x2007162c
   83078:	2007026e 	.word	0x2007026e
   8307c:	00082389 	.word	0x00082389

00083080 <udd_ep_alloc>:
{
   83080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83084:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   83086:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   8308a:	2c03      	cmp	r4, #3
   8308c:	f200 80df 	bhi.w	8324e <udd_ep_alloc+0x1ce>
	if (Is_udd_endpoint_enabled(ep)) {
   83090:	4b74      	ldr	r3, [pc, #464]	; (83264 <udd_ep_alloc+0x1e4>)
   83092:	69dd      	ldr	r5, [r3, #28]
   83094:	2301      	movs	r3, #1
   83096:	40a3      	lsls	r3, r4
   83098:	402b      	ands	r3, r5
   8309a:	f040 80dd 	bne.w	83258 <udd_ep_alloc+0x1d8>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8309e:	f011 0503 	ands.w	r5, r1, #3
   830a2:	f000 80db 	beq.w	8325c <udd_ep_alloc+0x1dc>
   830a6:	2d02      	cmp	r5, #2
   830a8:	d920      	bls.n	830ec <udd_ep_alloc+0x6c>
   830aa:	2d03      	cmp	r5, #3
   830ac:	f040 80d6 	bne.w	8325c <udd_ep_alloc+0x1dc>
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   830b0:	f04f 0e00 	mov.w	lr, #0
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   830b4:	4e6c      	ldr	r6, [pc, #432]	; (83268 <udd_ep_alloc+0x1e8>)
   830b6:	eb06 0584 	add.w	r5, r6, r4, lsl #2
   830ba:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
   830be:	f427 57cb 	bic.w	r7, r7, #6496	; 0x1960
   830c2:	f027 071c 	bic.w	r7, r7, #28
   830c6:	02c9      	lsls	r1, r1, #11
   830c8:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   830cc:	b240      	sxtb	r0, r0
   830ce:	2800      	cmp	r0, #0
   830d0:	bfb8      	it	lt
   830d2:	f44f 7380 	movlt.w	r3, #256	; 0x100
   830d6:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
   830da:	b280      	uxth	r0, r0
   830dc:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
   830e0:	d307      	bcc.n	830f2 <udd_ep_alloc+0x72>
   830e2:	2a08      	cmp	r2, #8
   830e4:	d924      	bls.n	83130 <udd_ep_alloc+0xb0>
   830e6:	0052      	lsls	r2, r2, #1
   830e8:	3a01      	subs	r2, #1
   830ea:	e004      	b.n	830f6 <udd_ep_alloc+0x76>
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   830ec:	f04f 0e01 	mov.w	lr, #1
   830f0:	e7e0      	b.n	830b4 <udd_ep_alloc+0x34>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   830f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
   830f6:	fab2 f282 	clz	r2, r2
   830fa:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
   830fe:	4319      	orrs	r1, r3
   83100:	f1c2 031c 	rsb	r3, r2, #28
   83104:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
   83108:	f423 63d0 	bic.w	r3, r3, #1664	; 0x680
   8310c:	f023 0303 	bic.w	r3, r3, #3
   83110:	04db      	lsls	r3, r3, #19
   83112:	0cdb      	lsrs	r3, r3, #19
   83114:	433b      	orrs	r3, r7
   83116:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	ep_allocated = 1 << ep;
   8311a:	2701      	movs	r7, #1
   8311c:	40a7      	lsls	r7, r4
   8311e:	b2bf      	uxth	r7, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   83120:	2c02      	cmp	r4, #2
   83122:	d81c      	bhi.n	8315e <udd_ep_alloc+0xde>
   83124:	4a51      	ldr	r2, [pc, #324]	; (8326c <udd_ep_alloc+0x1ec>)
   83126:	2303      	movs	r3, #3
		if (Is_udd_endpoint_enabled(i)) {
   83128:	484e      	ldr	r0, [pc, #312]	; (83264 <udd_ep_alloc+0x1e4>)
   8312a:	f04f 0e01 	mov.w	lr, #1
   8312e:	e006      	b.n	8313e <udd_ep_alloc+0xbe>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   83130:	220f      	movs	r2, #15
   83132:	e7e0      	b.n	830f6 <udd_ep_alloc+0x76>
   83134:	3b01      	subs	r3, #1
   83136:	3a04      	subs	r2, #4
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   83138:	b2d9      	uxtb	r1, r3
   8313a:	428c      	cmp	r4, r1
   8313c:	d20f      	bcs.n	8315e <udd_ep_alloc+0xde>
		if (Is_udd_endpoint_enabled(i)) {
   8313e:	69c6      	ldr	r6, [r0, #28]
   83140:	fa0e f103 	lsl.w	r1, lr, r3
   83144:	420e      	tst	r6, r1
   83146:	d0f5      	beq.n	83134 <udd_ep_alloc+0xb4>
			ep_allocated |= 1 << i;
   83148:	430f      	orrs	r7, r1
   8314a:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   8314c:	69c6      	ldr	r6, [r0, #28]
   8314e:	ea26 0101 	bic.w	r1, r6, r1
   83152:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   83154:	6811      	ldr	r1, [r2, #0]
   83156:	f021 0102 	bic.w	r1, r1, #2
   8315a:	6011      	str	r1, [r2, #0]
   8315c:	e7ea      	b.n	83134 <udd_ep_alloc+0xb4>
   8315e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   83162:	4e43      	ldr	r6, [pc, #268]	; (83270 <udd_ep_alloc+0x1f0>)
   83164:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
			bool b_restart = ptr_job->busy;
   83168:	f8df 9104 	ldr.w	r9, [pc, #260]	; 83270 <udd_ep_alloc+0x1f0>
			udd_enable_endpoint(i);
   8316c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 83264 <udd_ep_alloc+0x1e4>
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   83170:	f8df a100 	ldr.w	sl, [pc, #256]	; 83274 <udd_ep_alloc+0x1f4>
   83174:	e01d      	b.n	831b2 <udd_ep_alloc+0x132>
				if (NULL == ptr_job->call_trans) {
   83176:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   8317a:	4a3d      	ldr	r2, [pc, #244]	; (83270 <udd_ep_alloc+0x1f0>)
   8317c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   83180:	2c00      	cmp	r4, #0
   83182:	d06d      	beq.n	83260 <udd_ep_alloc+0x1e0>
				if (Is_udd_endpoint_in(i)) {
   83184:	682b      	ldr	r3, [r5, #0]
   83186:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
   8318a:	bf18      	it	ne
   8318c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   83190:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   83194:	4b36      	ldr	r3, [pc, #216]	; (83270 <udd_ep_alloc+0x1f0>)
   83196:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8319a:	4602      	mov	r2, r0
   8319c:	68c9      	ldr	r1, [r1, #12]
   8319e:	2001      	movs	r0, #1
   831a0:	47a0      	blx	r4
				return false;
   831a2:	2300      	movs	r3, #0
   831a4:	e054      	b.n	83250 <udd_ep_alloc+0x1d0>
   831a6:	3401      	adds	r4, #1
   831a8:	3504      	adds	r5, #4
   831aa:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   831ac:	b2e3      	uxtb	r3, r4
   831ae:	2b03      	cmp	r3, #3
   831b0:	d84b      	bhi.n	8324a <udd_ep_alloc+0x1ca>
   831b2:	b2e0      	uxtb	r0, r4
		if (ep_allocated & (1 << i)) {
   831b4:	fa47 f304 	asr.w	r3, r7, r4
   831b8:	f013 0f01 	tst.w	r3, #1
   831bc:	d0f3      	beq.n	831a6 <udd_ep_alloc+0x126>
   831be:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
   831c0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   831c4:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   831c8:	f893 e014 	ldrb.w	lr, [r3, #20]
   831cc:	f00e 0201 	and.w	r2, lr, #1
			ptr_job->busy = false;
   831d0:	f36f 0e00 	bfc	lr, #0, #1
   831d4:	f883 e014 	strb.w	lr, [r3, #20]
			udd_allocate_memory(i);
   831d8:	682b      	ldr	r3, [r5, #0]
   831da:	f043 0302 	orr.w	r3, r3, #2
   831de:	602b      	str	r3, [r5, #0]
			udd_enable_endpoint(i);
   831e0:	f8d8 e01c 	ldr.w	lr, [r8, #28]
   831e4:	2301      	movs	r3, #1
   831e6:	40a3      	lsls	r3, r4
   831e8:	ea43 030e 	orr.w	r3, r3, lr
   831ec:	f8c8 301c 	str.w	r3, [r8, #28]
			if (!Is_udd_endpoint_configured(i)) {
   831f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   831f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   831f6:	d0be      	beq.n	83176 <udd_ep_alloc+0xf6>
			udd_enable_endpoint_bank_autoswitch(i);
   831f8:	682b      	ldr	r3, [r5, #0]
   831fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   831fe:	602b      	str	r3, [r5, #0]
			if (b_restart) {
   83200:	2a00      	cmp	r2, #0
   83202:	d0d0      	beq.n	831a6 <udd_ep_alloc+0x126>
				ptr_job->buf_cnt -= ptr_job->buf_load;
   83204:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   83208:	f856 2c08 	ldr.w	r2, [r6, #-8]
   8320c:	1a9a      	subs	r2, r3, r2
   8320e:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   83212:	682b      	ldr	r3, [r5, #0]
   83214:	f413 7f80 	tst.w	r3, #256	; 0x100
   83218:	bf18      	it	ne
   8321a:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
   8321e:	f856 bc10 	ldr.w	fp, [r6, #-16]
   83222:	f856 cc14 	ldr.w	ip, [r6, #-20]
						ptr_job->b_shortpacket,
   83226:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   8322a:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
   8322e:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   83230:	f856 3c18 	ldr.w	r3, [r6, #-24]
   83234:	9300      	str	r3, [sp, #0]
   83236:	ebab 0302 	sub.w	r3, fp, r2
   8323a:	4462      	add	r2, ip
   8323c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   83240:	47d0      	blx	sl
				if (!b_restart) {
   83242:	4603      	mov	r3, r0
   83244:	2800      	cmp	r0, #0
   83246:	d1ae      	bne.n	831a6 <udd_ep_alloc+0x126>
   83248:	e002      	b.n	83250 <udd_ep_alloc+0x1d0>
	return true;
   8324a:	2301      	movs	r3, #1
   8324c:	e000      	b.n	83250 <udd_ep_alloc+0x1d0>
		return false;
   8324e:	2300      	movs	r3, #0
}
   83250:	4618      	mov	r0, r3
   83252:	b003      	add	sp, #12
   83254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   83258:	2300      	movs	r3, #0
   8325a:	e7f9      	b.n	83250 <udd_ep_alloc+0x1d0>
		return false;
   8325c:	2300      	movs	r3, #0
   8325e:	e7f7      	b.n	83250 <udd_ep_alloc+0x1d0>
					return false;
   83260:	2300      	movs	r3, #0
   83262:	e7f5      	b.n	83250 <udd_ep_alloc+0x1d0>
   83264:	400ac000 	.word	0x400ac000
   83268:	400ac100 	.word	0x400ac100
   8326c:	400ac10c 	.word	0x400ac10c
   83270:	2007162c 	.word	0x2007162c
   83274:	00082f85 	.word	0x00082f85

00083278 <udd_ep_abort>:
{
   83278:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8327a:	f000 020f 	and.w	r2, r0, #15
		udd_disable_endpoint_dma_interrupt(ep_index);
   8327e:	1e54      	subs	r4, r2, #1
   83280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   83284:	40a3      	lsls	r3, r4
   83286:	4916      	ldr	r1, [pc, #88]	; (832e0 <udd_ep_abort+0x68>)
   83288:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   8328a:	4b16      	ldr	r3, [pc, #88]	; (832e4 <udd_ep_abort+0x6c>)
   8328c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83290:	2500      	movs	r5, #0
   83292:	609d      	str	r5, [r3, #8]
	udd_disable_endpoint_interrupt(ep_index);
   83294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83298:	4093      	lsls	r3, r2
   8329a:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   8329c:	f010 0f80 	tst.w	r0, #128	; 0x80
   832a0:	d108      	bne.n	832b4 <udd_ep_abort+0x3c>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   832a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   832a6:	2101      	movs	r1, #1
   832a8:	480f      	ldr	r0, [pc, #60]	; (832e8 <udd_ep_abort+0x70>)
   832aa:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   832ae:	4b0f      	ldr	r3, [pc, #60]	; (832ec <udd_ep_abort+0x74>)
   832b0:	4798      	blx	r3
   832b2:	bd70      	pop	{r4, r5, r6, pc}
		while(udd_nb_busy_bank(ep_index)) {
   832b4:	0093      	lsls	r3, r2, #2
   832b6:	480e      	ldr	r0, [pc, #56]	; (832f0 <udd_ep_abort+0x78>)
   832b8:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   832ba:	4d0e      	ldr	r5, [pc, #56]	; (832f4 <udd_ep_abort+0x7c>)
   832bc:	441d      	add	r5, r3
   832be:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   832c2:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   832c6:	4419      	add	r1, r3
   832c8:	e004      	b.n	832d4 <udd_ep_abort+0x5c>
			udd_kill_last_in_bank(ep_index);
   832ca:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
   832cc:	680b      	ldr	r3, [r1, #0]
   832ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   832d2:	d1fb      	bne.n	832cc <udd_ep_abort+0x54>
		while(udd_nb_busy_bank(ep_index)) {
   832d4:	6803      	ldr	r3, [r0, #0]
   832d6:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   832da:	d1f6      	bne.n	832ca <udd_ep_abort+0x52>
   832dc:	e7e1      	b.n	832a2 <udd_ep_abort+0x2a>
   832de:	bf00      	nop
   832e0:	400ac000 	.word	0x400ac000
   832e4:	400ac300 	.word	0x400ac300
   832e8:	2007162c 	.word	0x2007162c
   832ec:	00082351 	.word	0x00082351
   832f0:	400ac130 	.word	0x400ac130
   832f4:	400ac1f0 	.word	0x400ac1f0

000832f8 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   832f8:	4a05      	ldr	r2, [pc, #20]	; (83310 <udd_test_mode_j+0x18>)
   832fa:	6813      	ldr	r3, [r2, #0]
   832fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   83300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83304:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_j();
   83306:	6813      	ldr	r3, [r2, #0]
   83308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8330c:	6013      	str	r3, [r2, #0]
   8330e:	4770      	bx	lr
   83310:	400ac000 	.word	0x400ac000

00083314 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   83314:	4a05      	ldr	r2, [pc, #20]	; (8332c <udd_test_mode_k+0x18>)
   83316:	6813      	ldr	r3, [r2, #0]
   83318:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   8331c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83320:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_k();
   83322:	6813      	ldr	r3, [r2, #0]
   83324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   83328:	6013      	str	r3, [r2, #0]
   8332a:	4770      	bx	lr
   8332c:	400ac000 	.word	0x400ac000

00083330 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   83330:	4a03      	ldr	r2, [pc, #12]	; (83340 <udd_test_mode_se0_nak+0x10>)
   83332:	6813      	ldr	r3, [r2, #0]
   83334:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   83338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8333c:	6013      	str	r3, [r2, #0]
   8333e:	4770      	bx	lr
   83340:	400ac000 	.word	0x400ac000

00083344 <udd_test_mode_packet>:
{
   83344:	b430      	push	{r4, r5}
   83346:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   83348:	466c      	mov	r4, sp
   8334a:	4d1f      	ldr	r5, [pc, #124]	; (833c8 <udd_test_mode_packet+0x84>)
   8334c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8334e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83358:	e895 0003 	ldmia.w	r5, {r0, r1}
   8335c:	f844 0b04 	str.w	r0, [r4], #4
   83360:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   83362:	4a1a      	ldr	r2, [pc, #104]	; (833cc <udd_test_mode_packet+0x88>)
   83364:	69d3      	ldr	r3, [r2, #28]
   83366:	f023 0301 	bic.w	r3, r3, #1
   8336a:	61d3      	str	r3, [r2, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   8336c:	4918      	ldr	r1, [pc, #96]	; (833d0 <udd_test_mode_packet+0x8c>)
   8336e:	680b      	ldr	r3, [r1, #0]
   83370:	f423 53cb 	bic.w	r3, r3, #6496	; 0x1960
   83374:	f023 031c 	bic.w	r3, r3, #28
   83378:	f443 5389 	orr.w	r3, r3, #4384	; 0x1120
   8337c:	f043 0310 	orr.w	r3, r3, #16
   83380:	600b      	str	r3, [r1, #0]
	udd_allocate_memory(0);
   83382:	680b      	ldr	r3, [r1, #0]
   83384:	f043 0302 	orr.w	r3, r3, #2
   83388:	600b      	str	r3, [r1, #0]
	udd_enable_endpoint(0);
   8338a:	69d3      	ldr	r3, [r2, #28]
   8338c:	f043 0301 	orr.w	r3, r3, #1
   83390:	61d3      	str	r3, [r2, #28]
	udd_enable_hs_test_mode();
   83392:	6813      	ldr	r3, [r2, #0]
   83394:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   83398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8339c:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_packet();
   8339e:	6813      	ldr	r3, [r2, #0]
   833a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   833a4:	6013      	str	r3, [r2, #0]
   833a6:	4a0b      	ldr	r2, [pc, #44]	; (833d4 <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   833a8:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   833aa:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   833ae:	f813 1b01 	ldrb.w	r1, [r3], #1
   833b2:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   833b6:	4283      	cmp	r3, r0
   833b8:	d1f9      	bne.n	833ae <udd_test_mode_packet+0x6a>
	udd_ack_fifocon(0);
   833ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   833be:	4b06      	ldr	r3, [pc, #24]	; (833d8 <udd_test_mode_packet+0x94>)
   833c0:	601a      	str	r2, [r3, #0]
}
   833c2:	b00e      	add	sp, #56	; 0x38
   833c4:	bc30      	pop	{r4, r5}
   833c6:	4770      	bx	lr
   833c8:	0008a69c 	.word	0x0008a69c
   833cc:	400ac000 	.word	0x400ac000
   833d0:	400ac100 	.word	0x400ac100
   833d4:	2017ffff 	.word	0x2017ffff
   833d8:	400ac220 	.word	0x400ac220

000833dc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   833dc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   833de:	010b      	lsls	r3, r1, #4
   833e0:	4293      	cmp	r3, r2
   833e2:	d914      	bls.n	8340e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   833e4:	00c9      	lsls	r1, r1, #3
   833e6:	084b      	lsrs	r3, r1, #1
   833e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   833ec:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   833f0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   833f2:	1e5c      	subs	r4, r3, #1
   833f4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   833f8:	428c      	cmp	r4, r1
   833fa:	d901      	bls.n	83400 <usart_set_async_baudrate+0x24>
		return 1;
   833fc:	2001      	movs	r0, #1
   833fe:	e017      	b.n	83430 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   83400:	6841      	ldr	r1, [r0, #4]
   83402:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   83406:	6041      	str	r1, [r0, #4]
   83408:	e00c      	b.n	83424 <usart_set_async_baudrate+0x48>
		return 1;
   8340a:	2001      	movs	r0, #1
   8340c:	e010      	b.n	83430 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8340e:	0859      	lsrs	r1, r3, #1
   83410:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   83414:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   83418:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8341a:	1e5c      	subs	r4, r3, #1
   8341c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   83420:	428c      	cmp	r4, r1
   83422:	d8f2      	bhi.n	8340a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   83424:	0412      	lsls	r2, r2, #16
   83426:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   8342a:	431a      	orrs	r2, r3
   8342c:	6202      	str	r2, [r0, #32]

	return 0;
   8342e:	2000      	movs	r0, #0
}
   83430:	bc10      	pop	{r4}
   83432:	4770      	bx	lr

00083434 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83434:	4b08      	ldr	r3, [pc, #32]	; (83458 <usart_reset+0x24>)
   83436:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   8343a:	2300      	movs	r3, #0
   8343c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   8343e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   83440:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83442:	2388      	movs	r3, #136	; 0x88
   83444:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83446:	2324      	movs	r3, #36	; 0x24
   83448:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   8344a:	f44f 7380 	mov.w	r3, #256	; 0x100
   8344e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   83450:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   83454:	6003      	str	r3, [r0, #0]
   83456:	4770      	bx	lr
   83458:	55534100 	.word	0x55534100

0008345c <usart_init_rs232>:
{
   8345c:	b570      	push	{r4, r5, r6, lr}
   8345e:	4605      	mov	r5, r0
   83460:	460c      	mov	r4, r1
   83462:	4616      	mov	r6, r2
	usart_reset(p_usart);
   83464:	4b0f      	ldr	r3, [pc, #60]	; (834a4 <usart_init_rs232+0x48>)
   83466:	4798      	blx	r3
	ul_reg_val = 0;
   83468:	2200      	movs	r2, #0
   8346a:	4b0f      	ldr	r3, [pc, #60]	; (834a8 <usart_init_rs232+0x4c>)
   8346c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8346e:	b1a4      	cbz	r4, 8349a <usart_init_rs232+0x3e>
   83470:	4632      	mov	r2, r6
   83472:	6821      	ldr	r1, [r4, #0]
   83474:	4628      	mov	r0, r5
   83476:	4b0d      	ldr	r3, [pc, #52]	; (834ac <usart_init_rs232+0x50>)
   83478:	4798      	blx	r3
   8347a:	4602      	mov	r2, r0
   8347c:	b978      	cbnz	r0, 8349e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8347e:	6863      	ldr	r3, [r4, #4]
   83480:	68a1      	ldr	r1, [r4, #8]
   83482:	430b      	orrs	r3, r1
   83484:	6921      	ldr	r1, [r4, #16]
   83486:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   83488:	68e1      	ldr	r1, [r4, #12]
   8348a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8348c:	4906      	ldr	r1, [pc, #24]	; (834a8 <usart_init_rs232+0x4c>)
   8348e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   83490:	6869      	ldr	r1, [r5, #4]
   83492:	430b      	orrs	r3, r1
   83494:	606b      	str	r3, [r5, #4]
}
   83496:	4610      	mov	r0, r2
   83498:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   8349a:	2201      	movs	r2, #1
   8349c:	e7fb      	b.n	83496 <usart_init_rs232+0x3a>
   8349e:	2201      	movs	r2, #1
   834a0:	e7f9      	b.n	83496 <usart_init_rs232+0x3a>
   834a2:	bf00      	nop
   834a4:	00083435 	.word	0x00083435
   834a8:	20071674 	.word	0x20071674
   834ac:	000833dd 	.word	0x000833dd

000834b0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   834b0:	2340      	movs	r3, #64	; 0x40
   834b2:	6003      	str	r3, [r0, #0]
   834b4:	4770      	bx	lr

000834b6 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   834b6:	2380      	movs	r3, #128	; 0x80
   834b8:	6003      	str	r3, [r0, #0]
   834ba:	4770      	bx	lr

000834bc <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   834bc:	2310      	movs	r3, #16
   834be:	6003      	str	r3, [r0, #0]
   834c0:	4770      	bx	lr

000834c2 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   834c2:	2320      	movs	r3, #32
   834c4:	6003      	str	r3, [r0, #0]
   834c6:	4770      	bx	lr

000834c8 <usart_set_rx_timeout>:
	p_usart->US_RTOR = timeout;
   834c8:	6241      	str	r1, [r0, #36]	; 0x24
   834ca:	4770      	bx	lr

000834cc <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   834cc:	6081      	str	r1, [r0, #8]
   834ce:	4770      	bx	lr

000834d0 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   834d0:	60c1      	str	r1, [r0, #12]
   834d2:	4770      	bx	lr

000834d4 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   834d4:	6900      	ldr	r0, [r0, #16]
}
   834d6:	4770      	bx	lr

000834d8 <usart_get_status>:
	return p_usart->US_CSR;
   834d8:	6940      	ldr	r0, [r0, #20]
}
   834da:	4770      	bx	lr

000834dc <usart_reset_status>:
	p_usart->US_CR = US_CR_RSTSTA;
   834dc:	f44f 7380 	mov.w	r3, #256	; 0x100
   834e0:	6003      	str	r3, [r0, #0]
   834e2:	4770      	bx	lr

000834e4 <usart_start_rx_timeout>:
	p_usart->US_CR = US_CR_STTTO;
   834e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   834e8:	6003      	str	r3, [r0, #0]
   834ea:	4770      	bx	lr

000834ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   834ec:	e7fe      	b.n	834ec <Dummy_Handler>
	...

000834f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   834f0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   834f2:	4b1c      	ldr	r3, [pc, #112]	; (83564 <Reset_Handler+0x74>)
   834f4:	4a1c      	ldr	r2, [pc, #112]	; (83568 <Reset_Handler+0x78>)
   834f6:	429a      	cmp	r2, r3
   834f8:	d010      	beq.n	8351c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   834fa:	4b1c      	ldr	r3, [pc, #112]	; (8356c <Reset_Handler+0x7c>)
   834fc:	4a19      	ldr	r2, [pc, #100]	; (83564 <Reset_Handler+0x74>)
   834fe:	429a      	cmp	r2, r3
   83500:	d20c      	bcs.n	8351c <Reset_Handler+0x2c>
   83502:	3b01      	subs	r3, #1
   83504:	1a9b      	subs	r3, r3, r2
   83506:	f023 0303 	bic.w	r3, r3, #3
   8350a:	3304      	adds	r3, #4
   8350c:	4413      	add	r3, r2
   8350e:	4916      	ldr	r1, [pc, #88]	; (83568 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   83510:	f851 0b04 	ldr.w	r0, [r1], #4
   83514:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   83518:	429a      	cmp	r2, r3
   8351a:	d1f9      	bne.n	83510 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8351c:	4b14      	ldr	r3, [pc, #80]	; (83570 <Reset_Handler+0x80>)
   8351e:	4a15      	ldr	r2, [pc, #84]	; (83574 <Reset_Handler+0x84>)
   83520:	429a      	cmp	r2, r3
   83522:	d20a      	bcs.n	8353a <Reset_Handler+0x4a>
   83524:	3b01      	subs	r3, #1
   83526:	1a9b      	subs	r3, r3, r2
   83528:	f023 0303 	bic.w	r3, r3, #3
   8352c:	3304      	adds	r3, #4
   8352e:	4413      	add	r3, r2
		*pDest++ = 0;
   83530:	2100      	movs	r1, #0
   83532:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   83536:	4293      	cmp	r3, r2
   83538:	d1fb      	bne.n	83532 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8353a:	4b0f      	ldr	r3, [pc, #60]	; (83578 <Reset_Handler+0x88>)
   8353c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   83540:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83544:	490d      	ldr	r1, [pc, #52]	; (8357c <Reset_Handler+0x8c>)
   83546:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83548:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8354c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83550:	d203      	bcs.n	8355a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83552:	688b      	ldr	r3, [r1, #8]
   83554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83558:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8355a:	4b09      	ldr	r3, [pc, #36]	; (83580 <Reset_Handler+0x90>)
   8355c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8355e:	4b09      	ldr	r3, [pc, #36]	; (83584 <Reset_Handler+0x94>)
   83560:	4798      	blx	r3
   83562:	e7fe      	b.n	83562 <Reset_Handler+0x72>
   83564:	20070000 	.word	0x20070000
   83568:	0008ac1c 	.word	0x0008ac1c
   8356c:	20070c58 	.word	0x20070c58
   83570:	2007598c 	.word	0x2007598c
   83574:	20070c58 	.word	0x20070c58
   83578:	00080000 	.word	0x00080000
   8357c:	e000ed00 	.word	0xe000ed00
   83580:	00085c0d 	.word	0x00085c0d
   83584:	00085939 	.word	0x00085939

00083588 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83588:	4b3d      	ldr	r3, [pc, #244]	; (83680 <SystemCoreClockUpdate+0xf8>)
   8358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8358c:	f003 0303 	and.w	r3, r3, #3
   83590:	2b03      	cmp	r3, #3
   83592:	d80e      	bhi.n	835b2 <SystemCoreClockUpdate+0x2a>
   83594:	e8df f003 	tbb	[pc, r3]
   83598:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8359c:	4b39      	ldr	r3, [pc, #228]	; (83684 <SystemCoreClockUpdate+0xfc>)
   8359e:	695b      	ldr	r3, [r3, #20]
   835a0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   835a4:	bf14      	ite	ne
   835a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   835aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   835ae:	4b36      	ldr	r3, [pc, #216]	; (83688 <SystemCoreClockUpdate+0x100>)
   835b0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   835b2:	4b33      	ldr	r3, [pc, #204]	; (83680 <SystemCoreClockUpdate+0xf8>)
   835b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   835b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   835ba:	2b70      	cmp	r3, #112	; 0x70
   835bc:	d057      	beq.n	8366e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   835be:	4b30      	ldr	r3, [pc, #192]	; (83680 <SystemCoreClockUpdate+0xf8>)
   835c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   835c2:	4931      	ldr	r1, [pc, #196]	; (83688 <SystemCoreClockUpdate+0x100>)
   835c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   835c8:	680b      	ldr	r3, [r1, #0]
   835ca:	40d3      	lsrs	r3, r2
   835cc:	600b      	str	r3, [r1, #0]
   835ce:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   835d0:	4b2b      	ldr	r3, [pc, #172]	; (83680 <SystemCoreClockUpdate+0xf8>)
   835d2:	6a1b      	ldr	r3, [r3, #32]
   835d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   835d8:	d003      	beq.n	835e2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   835da:	4a2c      	ldr	r2, [pc, #176]	; (8368c <SystemCoreClockUpdate+0x104>)
   835dc:	4b2a      	ldr	r3, [pc, #168]	; (83688 <SystemCoreClockUpdate+0x100>)
   835de:	601a      	str	r2, [r3, #0]
   835e0:	e7e7      	b.n	835b2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   835e2:	4a2b      	ldr	r2, [pc, #172]	; (83690 <SystemCoreClockUpdate+0x108>)
   835e4:	4b28      	ldr	r3, [pc, #160]	; (83688 <SystemCoreClockUpdate+0x100>)
   835e6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   835e8:	4b25      	ldr	r3, [pc, #148]	; (83680 <SystemCoreClockUpdate+0xf8>)
   835ea:	6a1b      	ldr	r3, [r3, #32]
   835ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   835f0:	2b10      	cmp	r3, #16
   835f2:	d005      	beq.n	83600 <SystemCoreClockUpdate+0x78>
   835f4:	2b20      	cmp	r3, #32
   835f6:	d1dc      	bne.n	835b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   835f8:	4a24      	ldr	r2, [pc, #144]	; (8368c <SystemCoreClockUpdate+0x104>)
   835fa:	4b23      	ldr	r3, [pc, #140]	; (83688 <SystemCoreClockUpdate+0x100>)
   835fc:	601a      	str	r2, [r3, #0]
				break;
   835fe:	e7d8      	b.n	835b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   83600:	4a24      	ldr	r2, [pc, #144]	; (83694 <SystemCoreClockUpdate+0x10c>)
   83602:	4b21      	ldr	r3, [pc, #132]	; (83688 <SystemCoreClockUpdate+0x100>)
   83604:	601a      	str	r2, [r3, #0]
				break;
   83606:	e7d4      	b.n	835b2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83608:	4b1d      	ldr	r3, [pc, #116]	; (83680 <SystemCoreClockUpdate+0xf8>)
   8360a:	6a1b      	ldr	r3, [r3, #32]
   8360c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   83610:	d00c      	beq.n	8362c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83612:	4a1e      	ldr	r2, [pc, #120]	; (8368c <SystemCoreClockUpdate+0x104>)
   83614:	4b1c      	ldr	r3, [pc, #112]	; (83688 <SystemCoreClockUpdate+0x100>)
   83616:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83618:	4b19      	ldr	r3, [pc, #100]	; (83680 <SystemCoreClockUpdate+0xf8>)
   8361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8361c:	f003 0303 	and.w	r3, r3, #3
   83620:	2b02      	cmp	r3, #2
   83622:	d016      	beq.n	83652 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83624:	4a1c      	ldr	r2, [pc, #112]	; (83698 <SystemCoreClockUpdate+0x110>)
   83626:	4b18      	ldr	r3, [pc, #96]	; (83688 <SystemCoreClockUpdate+0x100>)
   83628:	601a      	str	r2, [r3, #0]
   8362a:	e7c2      	b.n	835b2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8362c:	4a18      	ldr	r2, [pc, #96]	; (83690 <SystemCoreClockUpdate+0x108>)
   8362e:	4b16      	ldr	r3, [pc, #88]	; (83688 <SystemCoreClockUpdate+0x100>)
   83630:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83632:	4b13      	ldr	r3, [pc, #76]	; (83680 <SystemCoreClockUpdate+0xf8>)
   83634:	6a1b      	ldr	r3, [r3, #32]
   83636:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8363a:	2b10      	cmp	r3, #16
   8363c:	d005      	beq.n	8364a <SystemCoreClockUpdate+0xc2>
   8363e:	2b20      	cmp	r3, #32
   83640:	d1ea      	bne.n	83618 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   83642:	4a12      	ldr	r2, [pc, #72]	; (8368c <SystemCoreClockUpdate+0x104>)
   83644:	4b10      	ldr	r3, [pc, #64]	; (83688 <SystemCoreClockUpdate+0x100>)
   83646:	601a      	str	r2, [r3, #0]
				break;
   83648:	e7e6      	b.n	83618 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8364a:	4a12      	ldr	r2, [pc, #72]	; (83694 <SystemCoreClockUpdate+0x10c>)
   8364c:	4b0e      	ldr	r3, [pc, #56]	; (83688 <SystemCoreClockUpdate+0x100>)
   8364e:	601a      	str	r2, [r3, #0]
				break;
   83650:	e7e2      	b.n	83618 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83652:	4a0b      	ldr	r2, [pc, #44]	; (83680 <SystemCoreClockUpdate+0xf8>)
   83654:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83656:	6a92      	ldr	r2, [r2, #40]	; 0x28
   83658:	480b      	ldr	r0, [pc, #44]	; (83688 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8365a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8365e:	6803      	ldr	r3, [r0, #0]
   83660:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83664:	b2d2      	uxtb	r2, r2
   83666:	fbb3 f3f2 	udiv	r3, r3, r2
   8366a:	6003      	str	r3, [r0, #0]
   8366c:	e7a1      	b.n	835b2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8366e:	4a06      	ldr	r2, [pc, #24]	; (83688 <SystemCoreClockUpdate+0x100>)
   83670:	6813      	ldr	r3, [r2, #0]
   83672:	490a      	ldr	r1, [pc, #40]	; (8369c <SystemCoreClockUpdate+0x114>)
   83674:	fba1 1303 	umull	r1, r3, r1, r3
   83678:	085b      	lsrs	r3, r3, #1
   8367a:	6013      	str	r3, [r2, #0]
   8367c:	4770      	bx	lr
   8367e:	bf00      	nop
   83680:	400e0600 	.word	0x400e0600
   83684:	400e1a10 	.word	0x400e1a10
   83688:	20070270 	.word	0x20070270
   8368c:	00b71b00 	.word	0x00b71b00
   83690:	003d0900 	.word	0x003d0900
   83694:	007a1200 	.word	0x007a1200
   83698:	0e4e1c00 	.word	0x0e4e1c00
   8369c:	aaaaaaab 	.word	0xaaaaaaab

000836a0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   836a0:	4b0a      	ldr	r3, [pc, #40]	; (836cc <_sbrk+0x2c>)
   836a2:	681b      	ldr	r3, [r3, #0]
   836a4:	b153      	cbz	r3, 836bc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   836a6:	4b09      	ldr	r3, [pc, #36]	; (836cc <_sbrk+0x2c>)
   836a8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   836aa:	181a      	adds	r2, r3, r0
   836ac:	4908      	ldr	r1, [pc, #32]	; (836d0 <_sbrk+0x30>)
   836ae:	4291      	cmp	r1, r2
   836b0:	db08      	blt.n	836c4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   836b2:	4610      	mov	r0, r2
   836b4:	4a05      	ldr	r2, [pc, #20]	; (836cc <_sbrk+0x2c>)
   836b6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   836b8:	4618      	mov	r0, r3
   836ba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   836bc:	4a05      	ldr	r2, [pc, #20]	; (836d4 <_sbrk+0x34>)
   836be:	4b03      	ldr	r3, [pc, #12]	; (836cc <_sbrk+0x2c>)
   836c0:	601a      	str	r2, [r3, #0]
   836c2:	e7f0      	b.n	836a6 <_sbrk+0x6>
		return (caddr_t) -1;	
   836c4:	f04f 30ff 	mov.w	r0, #4294967295
}
   836c8:	4770      	bx	lr
   836ca:	bf00      	nop
   836cc:	20071678 	.word	0x20071678
   836d0:	20087ffc 	.word	0x20087ffc
   836d4:	20077990 	.word	0x20077990

000836d8 <usart_echo_rx_task>:
}

/*-----------------------------------------------------------*/

static void usart_echo_rx_task(void *pvParameters)
{
   836d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   836da:	4607      	mov	r7, r0
	/* The (already open) USART port is passed in as the task parameter. */
	usart_port = (freertos_usart_if)pvParameters;
	uint8_t poot = 0;
	uint8_t local[RX_BUFFER_SIZE];
	for (;;) {
		memset(rx_buffer, 0x00, sizeof(rx_buffer));
   836dc:	4c24      	ldr	r4, [pc, #144]	; (83770 <usart_echo_rx_task+0x98>)
   836de:	4e25      	ldr	r6, [pc, #148]	; (83774 <usart_echo_rx_task+0x9c>)

		received = freertos_usart_serial_read_packet(usart_port, rx_buffer,
   836e0:	4d25      	ldr	r5, [pc, #148]	; (83778 <usart_echo_rx_task+0xa0>)
   836e2:	e002      	b.n	836ea <usart_echo_rx_task+0x12>
		memcpy(local,rx_buffer,1);
		poot = local[0];
		switch(poot)
		{
			case 'b':
				SmState = STATE_MOVING_REVERSE;
   836e4:	2205      	movs	r2, #5
   836e6:	4b25      	ldr	r3, [pc, #148]	; (8377c <usart_echo_rx_task+0xa4>)
   836e8:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0x00, sizeof(rx_buffer));
   836ea:	224f      	movs	r2, #79	; 0x4f
   836ec:	2100      	movs	r1, #0
   836ee:	4620      	mov	r0, r4
   836f0:	47b0      	blx	r6
		received = freertos_usart_serial_read_packet(usart_port, rx_buffer,
   836f2:	f04f 33ff 	mov.w	r3, #4294967295
   836f6:	2201      	movs	r2, #1
   836f8:	4621      	mov	r1, r4
   836fa:	4638      	mov	r0, r7
   836fc:	47a8      	blx	r5
		switch(poot)
   836fe:	7823      	ldrb	r3, [r4, #0]
   83700:	3b62      	subs	r3, #98	; 0x62
   83702:	2b10      	cmp	r3, #16
   83704:	d830      	bhi.n	83768 <usart_echo_rx_task+0x90>
   83706:	a201      	add	r2, pc, #4	; (adr r2, 8370c <usart_echo_rx_task+0x34>)
   83708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8370c:	000836e5 	.word	0x000836e5
   83710:	00083769 	.word	0x00083769
   83714:	00083769 	.word	0x00083769
   83718:	00083769 	.word	0x00083769
   8371c:	00083751 	.word	0x00083751
   83720:	00083769 	.word	0x00083769
   83724:	00083769 	.word	0x00083769
   83728:	00083769 	.word	0x00083769
   8372c:	00083769 	.word	0x00083769
   83730:	00083769 	.word	0x00083769
   83734:	00083759 	.word	0x00083759
   83738:	00083769 	.word	0x00083769
   8373c:	00083769 	.word	0x00083769
   83740:	00083769 	.word	0x00083769
   83744:	00083769 	.word	0x00083769
   83748:	00083769 	.word	0x00083769
   8374c:	00083761 	.word	0x00083761
				break;
			case 'f':
				SmState = STATE_MOVING_FORWARD;
   83750:	2202      	movs	r2, #2
   83752:	4b0a      	ldr	r3, [pc, #40]	; (8377c <usart_echo_rx_task+0xa4>)
   83754:	701a      	strb	r2, [r3, #0]
				break;
   83756:	e7c8      	b.n	836ea <usart_echo_rx_task+0x12>
			case 'l':
				SmState = STATE_TURNING_LEFT;
   83758:	2203      	movs	r2, #3
   8375a:	4b08      	ldr	r3, [pc, #32]	; (8377c <usart_echo_rx_task+0xa4>)
   8375c:	701a      	strb	r2, [r3, #0]
				break;
   8375e:	e7c4      	b.n	836ea <usart_echo_rx_task+0x12>
			case 'r':
				SmState = STATE_TURNING_RIGHT;
   83760:	2204      	movs	r2, #4
   83762:	4b06      	ldr	r3, [pc, #24]	; (8377c <usart_echo_rx_task+0xa4>)
   83764:	701a      	strb	r2, [r3, #0]
				break;
   83766:	e7c0      	b.n	836ea <usart_echo_rx_task+0x12>
			default:
				SmState = STATE_STANDBY;
   83768:	2201      	movs	r2, #1
   8376a:	4b04      	ldr	r3, [pc, #16]	; (8377c <usart_echo_rx_task+0xa4>)
   8376c:	701a      	strb	r2, [r3, #0]
				break;
   8376e:	e7bc      	b.n	836ea <usart_echo_rx_task+0x12>
   83770:	2007171c 	.word	0x2007171c
   83774:	00085d49 	.word	0x00085d49
   83778:	00080de9 	.word	0x00080de9
   8377c:	200758c4 	.word	0x200758c4

00083780 <usart_echo_tx_task>:
{
   83780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83784:	b085      	sub	sp, #20
   83786:	4606      	mov	r6, r0
	vSemaphoreCreateBinary(notification_semaphore);
   83788:	2203      	movs	r2, #3
   8378a:	2100      	movs	r1, #0
   8378c:	2001      	movs	r0, #1
   8378e:	4b23      	ldr	r3, [pc, #140]	; (8381c <usart_echo_tx_task+0x9c>)
   83790:	4798      	blx	r3
   83792:	4605      	mov	r5, r0
   83794:	2800      	cmp	r0, #0
   83796:	d03b      	beq.n	83810 <usart_echo_tx_task+0x90>
   83798:	2300      	movs	r3, #0
   8379a:	461a      	mov	r2, r3
   8379c:	4619      	mov	r1, r3
   8379e:	4c20      	ldr	r4, [pc, #128]	; (83820 <usart_echo_tx_task+0xa0>)
   837a0:	47a0      	blx	r4
	xSemaphoreTake(notification_semaphore, 0);
   837a2:	2100      	movs	r1, #0
   837a4:	4628      	mov	r0, r5
   837a6:	4b1f      	ldr	r3, [pc, #124]	; (83824 <usart_echo_tx_task+0xa4>)
   837a8:	4798      	blx	r3
	char result_txt[5] = "0000";
   837aa:	4b1f      	ldr	r3, [pc, #124]	; (83828 <usart_echo_tx_task+0xa8>)
   837ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   837b0:	9002      	str	r0, [sp, #8]
   837b2:	f88d 100c 	strb.w	r1, [sp, #12]
		taskENTER_CRITICAL();
   837b6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 83854 <usart_echo_tx_task+0xd4>
		sprintf(result_txt,"%lu;",result_adc);
   837ba:	f8df 809c 	ldr.w	r8, [pc, #156]	; 83858 <usart_echo_tx_task+0xd8>
   837be:	4f1b      	ldr	r7, [pc, #108]	; (8382c <usart_echo_tx_task+0xac>)
   837c0:	e007      	b.n	837d2 <usart_echo_tx_task+0x52>
		xSemaphoreTake(notification_semaphore, time_out_definition * 2);
   837c2:	21c8      	movs	r1, #200	; 0xc8
   837c4:	4628      	mov	r0, r5
   837c6:	4b17      	ldr	r3, [pc, #92]	; (83824 <usart_echo_tx_task+0xa4>)
   837c8:	4798      	blx	r3
		vTaskDelay(500);
   837ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   837ce:	4b18      	ldr	r3, [pc, #96]	; (83830 <usart_echo_tx_task+0xb0>)
   837d0:	4798      	blx	r3
		taskENTER_CRITICAL();
   837d2:	47c8      	blx	r9
		sprintf(result_txt,"%lu;",result_adc);
   837d4:	f8d8 2000 	ldr.w	r2, [r8]
   837d8:	4639      	mov	r1, r7
   837da:	a802      	add	r0, sp, #8
   837dc:	4b15      	ldr	r3, [pc, #84]	; (83834 <usart_echo_tx_task+0xb4>)
   837de:	4798      	blx	r3
		taskEXIT_CRITICAL();
   837e0:	4b15      	ldr	r3, [pc, #84]	; (83838 <usart_echo_tx_task+0xb8>)
   837e2:	4798      	blx	r3
		strcpy((char *) local_buffer,
   837e4:	4c15      	ldr	r4, [pc, #84]	; (8383c <usart_echo_tx_task+0xbc>)
   837e6:	a902      	add	r1, sp, #8
   837e8:	4620      	mov	r0, r4
   837ea:	4b15      	ldr	r3, [pc, #84]	; (83840 <usart_echo_tx_task+0xc0>)
   837ec:	4798      	blx	r3
		returned_status = freertos_usart_write_packet_async(usart_port,
   837ee:	4620      	mov	r0, r4
   837f0:	4b14      	ldr	r3, [pc, #80]	; (83844 <usart_echo_tx_task+0xc4>)
   837f2:	4798      	blx	r3
   837f4:	9500      	str	r5, [sp, #0]
   837f6:	2364      	movs	r3, #100	; 0x64
   837f8:	4602      	mov	r2, r0
   837fa:	4621      	mov	r1, r4
   837fc:	4630      	mov	r0, r6
   837fe:	4c12      	ldr	r4, [pc, #72]	; (83848 <usart_echo_tx_task+0xc8>)
   83800:	47a0      	blx	r4
		configASSERT(returned_status == STATUS_OK);
   83802:	2800      	cmp	r0, #0
   83804:	d0dd      	beq.n	837c2 <usart_echo_tx_task+0x42>
   83806:	21a5      	movs	r1, #165	; 0xa5
   83808:	4810      	ldr	r0, [pc, #64]	; (8384c <usart_echo_tx_task+0xcc>)
   8380a:	4b11      	ldr	r3, [pc, #68]	; (83850 <usart_echo_tx_task+0xd0>)
   8380c:	4798      	blx	r3
   8380e:	e7d8      	b.n	837c2 <usart_echo_tx_task+0x42>
	configASSERT(notification_semaphore);
   83810:	218f      	movs	r1, #143	; 0x8f
   83812:	480e      	ldr	r0, [pc, #56]	; (8384c <usart_echo_tx_task+0xcc>)
   83814:	4b0e      	ldr	r3, [pc, #56]	; (83850 <usart_echo_tx_task+0xd0>)
   83816:	4798      	blx	r3
   83818:	e7c3      	b.n	837a2 <usart_echo_tx_task+0x22>
   8381a:	bf00      	nop
   8381c:	00083f89 	.word	0x00083f89
   83820:	00084021 	.word	0x00084021
   83824:	00084501 	.word	0x00084501
   83828:	0008a764 	.word	0x0008a764
   8382c:	0008a704 	.word	0x0008a704
   83830:	00084dd1 	.word	0x00084dd1
   83834:	00085de5 	.word	0x00085de5
   83838:	00083afd 	.word	0x00083afd
   8383c:	2007167c 	.word	0x2007167c
   83840:	00085e31 	.word	0x00085e31
   83844:	00085eed 	.word	0x00085eed
   83848:	00080d5d 	.word	0x00080d5d
   8384c:	0008a70c 	.word	0x0008a70c
   83850:	00085a0d 	.word	0x00085a0d
   83854:	00083ab5 	.word	0x00083ab5
   83858:	20075920 	.word	0x20075920

0008385c <create_usart_echo_test_tasks>:
{
   8385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83860:	b08c      	sub	sp, #48	; 0x30
   83862:	4686      	mov	lr, r0
   83864:	4688      	mov	r8, r1
   83866:	4617      	mov	r7, r2
	freertos_peripheral_options_t driver_options = {
   83868:	4c16      	ldr	r4, [pc, #88]	; (838c4 <create_usart_echo_test_tasks+0x68>)
   8386a:	ae08      	add	r6, sp, #32
   8386c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   83870:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const sam_usart_opt_t usart_settings = {
   83874:	ad02      	add	r5, sp, #8
   83876:	3410      	adds	r4, #16
   83878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8387a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   8387c:	e894 0003 	ldmia.w	r4, {r0, r1}
   83880:	e885 0003 	stmia.w	r5, {r0, r1}
	freertos_usart = freertos_usart_serial_init(usart_base,
   83884:	4632      	mov	r2, r6
   83886:	a902      	add	r1, sp, #8
   83888:	4670      	mov	r0, lr
   8388a:	4b0f      	ldr	r3, [pc, #60]	; (838c8 <create_usart_echo_test_tasks+0x6c>)
   8388c:	4798      	blx	r3
	configASSERT(freertos_usart);
   8388e:	4605      	mov	r5, r0
   83890:	b198      	cbz	r0, 838ba <create_usart_echo_test_tasks+0x5e>
	xTaskCreate(usart_echo_tx_task, (const signed char *const) "Tx",
   83892:	2600      	movs	r6, #0
   83894:	9601      	str	r6, [sp, #4]
   83896:	9700      	str	r7, [sp, #0]
   83898:	462b      	mov	r3, r5
   8389a:	4642      	mov	r2, r8
   8389c:	490b      	ldr	r1, [pc, #44]	; (838cc <create_usart_echo_test_tasks+0x70>)
   8389e:	480c      	ldr	r0, [pc, #48]	; (838d0 <create_usart_echo_test_tasks+0x74>)
   838a0:	4c0c      	ldr	r4, [pc, #48]	; (838d4 <create_usart_echo_test_tasks+0x78>)
   838a2:	47a0      	blx	r4
	xTaskCreate(usart_echo_rx_task, (const signed char *const) "Rx",
   838a4:	9601      	str	r6, [sp, #4]
   838a6:	3701      	adds	r7, #1
   838a8:	9700      	str	r7, [sp, #0]
   838aa:	462b      	mov	r3, r5
   838ac:	4642      	mov	r2, r8
   838ae:	490a      	ldr	r1, [pc, #40]	; (838d8 <create_usart_echo_test_tasks+0x7c>)
   838b0:	480a      	ldr	r0, [pc, #40]	; (838dc <create_usart_echo_test_tasks+0x80>)
   838b2:	47a0      	blx	r4
}
   838b4:	b00c      	add	sp, #48	; 0x30
   838b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT(freertos_usart);
   838ba:	2175      	movs	r1, #117	; 0x75
   838bc:	4808      	ldr	r0, [pc, #32]	; (838e0 <create_usart_echo_test_tasks+0x84>)
   838be:	4b09      	ldr	r3, [pc, #36]	; (838e4 <create_usart_echo_test_tasks+0x88>)
   838c0:	4798      	blx	r3
   838c2:	e7e6      	b.n	83892 <create_usart_echo_test_tasks+0x36>
   838c4:	0008a6d4 	.word	0x0008a6d4
   838c8:	00080b69 	.word	0x00080b69
   838cc:	0008a6fc 	.word	0x0008a6fc
   838d0:	00083781 	.word	0x00083781
   838d4:	000848bd 	.word	0x000848bd
   838d8:	0008a700 	.word	0x0008a700
   838dc:	000836d9 	.word	0x000836d9
   838e0:	0008a70c 	.word	0x0008a70c
   838e4:	00085a0d 	.word	0x00085a0d

000838e8 <cli_vbus_event>:
/*-----------------------------------------------------------*/

#endif

void cli_vbus_event(bool b_vbus_high)
{
   838e8:	b508      	push	{r3, lr}
	if (b_vbus_high == true) {
   838ea:	b910      	cbnz	r0, 838f2 <cli_vbus_event+0xa>
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   838ec:	4b02      	ldr	r3, [pc, #8]	; (838f8 <cli_vbus_event+0x10>)
   838ee:	4798      	blx	r3
   838f0:	bd08      	pop	{r3, pc}
	udd_attach();
   838f2:	4b02      	ldr	r3, [pc, #8]	; (838fc <cli_vbus_event+0x14>)
   838f4:	4798      	blx	r3
   838f6:	bd08      	pop	{r3, pc}
   838f8:	00082661 	.word	0x00082661
   838fc:	000825d5 	.word	0x000825d5

00083900 <cli_cdc_enable>:

bool cli_cdc_enable(uint8_t port)
{
	(void) port;

	cdc_connected = true;
   83900:	2001      	movs	r0, #1
   83902:	4b01      	ldr	r3, [pc, #4]	; (83908 <cli_cdc_enable+0x8>)
   83904:	7018      	strb	r0, [r3, #0]
	return true;
}
   83906:	4770      	bx	lr
   83908:	2007176b 	.word	0x2007176b

0008390c <cli_cdc_rx_notify>:

/*-----------------------------------------------------------*/

void cli_cdc_rx_notify(uint8_t port)
{
   8390c:	b500      	push	{lr}
   8390e:	b083      	sub	sp, #12
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   83910:	2300      	movs	r3, #0
   83912:	9301      	str	r3, [sp, #4]

	(void) port;

	/* Sanity check the event semaphore before giving it to indicate to the
	 * task that data is available. */
	configASSERT(cdc_new_data_semaphore);
   83914:	4b0d      	ldr	r3, [pc, #52]	; (8394c <cli_cdc_rx_notify+0x40>)
   83916:	681b      	ldr	r3, [r3, #0]
   83918:	b18b      	cbz	r3, 8393e <cli_cdc_rx_notify+0x32>
	xSemaphoreGiveFromISR(cdc_new_data_semaphore,
   8391a:	a901      	add	r1, sp, #4
   8391c:	4b0b      	ldr	r3, [pc, #44]	; (8394c <cli_cdc_rx_notify+0x40>)
   8391e:	6818      	ldr	r0, [r3, #0]
   83920:	4b0b      	ldr	r3, [pc, #44]	; (83950 <cli_cdc_rx_notify+0x44>)
   83922:	4798      	blx	r3
			&xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
   83924:	9b01      	ldr	r3, [sp, #4]
   83926:	b13b      	cbz	r3, 83938 <cli_cdc_rx_notify+0x2c>
   83928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8392c:	4b09      	ldr	r3, [pc, #36]	; (83954 <cli_cdc_rx_notify+0x48>)
   8392e:	601a      	str	r2, [r3, #0]
   83930:	f3bf 8f4f 	dsb	sy
   83934:	f3bf 8f6f 	isb	sy
}
   83938:	b003      	add	sp, #12
   8393a:	f85d fb04 	ldr.w	pc, [sp], #4
	configASSERT(cdc_new_data_semaphore);
   8393e:	f240 1117 	movw	r1, #279	; 0x117
   83942:	4805      	ldr	r0, [pc, #20]	; (83958 <cli_cdc_rx_notify+0x4c>)
   83944:	4b05      	ldr	r3, [pc, #20]	; (8395c <cli_cdc_rx_notify+0x50>)
   83946:	4798      	blx	r3
   83948:	e7e7      	b.n	8391a <cli_cdc_rx_notify+0xe>
   8394a:	bf00      	nop
   8394c:	2007176c 	.word	0x2007176c
   83950:	000842c9 	.word	0x000842c9
   83954:	e000ed04 	.word	0xe000ed04
   83958:	0008a76c 	.word	0x0008a76c
   8395c:	00085a0d 	.word	0x00085a0d

00083960 <cli_cdc_disable>:

void cli_cdc_disable(uint8_t port)
{
	(void) port;

	cdc_connected = false;
   83960:	2200      	movs	r2, #0
   83962:	4b01      	ldr	r3, [pc, #4]	; (83968 <cli_cdc_disable+0x8>)
   83964:	701a      	strb	r2, [r3, #0]
   83966:	4770      	bx	lr
   83968:	2007176b 	.word	0x2007176b

0008396c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8396c:	f100 0308 	add.w	r3, r0, #8
   83970:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   83972:	f04f 32ff 	mov.w	r2, #4294967295
   83976:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83978:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8397a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   8397c:	2300      	movs	r3, #0
   8397e:	6003      	str	r3, [r0, #0]
   83980:	4770      	bx	lr

00083982 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   83982:	2300      	movs	r3, #0
   83984:	6103      	str	r3, [r0, #16]
   83986:	4770      	bx	lr

00083988 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   83988:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   8398a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   8398c:	689a      	ldr	r2, [r3, #8]
   8398e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   83990:	689a      	ldr	r2, [r3, #8]
   83992:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   83994:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   83996:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   83998:	6803      	ldr	r3, [r0, #0]
   8399a:	3301      	adds	r3, #1
   8399c:	6003      	str	r3, [r0, #0]
   8399e:	4770      	bx	lr

000839a0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   839a0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   839a2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   839a4:	f1b5 3fff 	cmp.w	r5, #4294967295
   839a8:	d002      	beq.n	839b0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   839aa:	f100 0208 	add.w	r2, r0, #8
   839ae:	e002      	b.n	839b6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
   839b0:	6902      	ldr	r2, [r0, #16]
   839b2:	e004      	b.n	839be <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   839b4:	461a      	mov	r2, r3
   839b6:	6853      	ldr	r3, [r2, #4]
   839b8:	681c      	ldr	r4, [r3, #0]
   839ba:	42a5      	cmp	r5, r4
   839bc:	d2fa      	bcs.n	839b4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   839be:	6853      	ldr	r3, [r2, #4]
   839c0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   839c2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   839c4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   839c6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   839c8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   839ca:	6803      	ldr	r3, [r0, #0]
   839cc:	3301      	adds	r3, #1
   839ce:	6003      	str	r3, [r0, #0]
}
   839d0:	bc30      	pop	{r4, r5}
   839d2:	4770      	bx	lr

000839d4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   839d4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   839d6:	6842      	ldr	r2, [r0, #4]
   839d8:	6881      	ldr	r1, [r0, #8]
   839da:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   839dc:	6882      	ldr	r2, [r0, #8]
   839de:	6841      	ldr	r1, [r0, #4]
   839e0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   839e2:	685a      	ldr	r2, [r3, #4]
   839e4:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   839e6:	bf04      	itt	eq
   839e8:	6882      	ldreq	r2, [r0, #8]
   839ea:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   839ec:	2200      	movs	r2, #0
   839ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   839f0:	681a      	ldr	r2, [r3, #0]
   839f2:	3a01      	subs	r2, #1
   839f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   839f6:	6818      	ldr	r0, [r3, #0]
}
   839f8:	4770      	bx	lr
	...

000839fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   839fc:	4806      	ldr	r0, [pc, #24]	; (83a18 <prvPortStartFirstTask+0x1c>)
   839fe:	6800      	ldr	r0, [r0, #0]
   83a00:	6800      	ldr	r0, [r0, #0]
   83a02:	f380 8808 	msr	MSP, r0
   83a06:	b662      	cpsie	i
   83a08:	b661      	cpsie	f
   83a0a:	f3bf 8f4f 	dsb	sy
   83a0e:	f3bf 8f6f 	isb	sy
   83a12:	df00      	svc	0
   83a14:	bf00      	nop
   83a16:	0000      	.short	0x0000
   83a18:	e000ed08 	.word	0xe000ed08

00083a1c <prvTaskExitError>:
{
   83a1c:	b500      	push	{lr}
   83a1e:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0UL;
   83a20:	2300      	movs	r3, #0
   83a22:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
   83a24:	4b0b      	ldr	r3, [pc, #44]	; (83a54 <prvTaskExitError+0x38>)
   83a26:	681b      	ldr	r3, [r3, #0]
   83a28:	f1b3 3fff 	cmp.w	r3, #4294967295
   83a2c:	d003      	beq.n	83a36 <prvTaskExitError+0x1a>
   83a2e:	21cb      	movs	r1, #203	; 0xcb
   83a30:	4809      	ldr	r0, [pc, #36]	; (83a58 <prvTaskExitError+0x3c>)
   83a32:	4b0a      	ldr	r3, [pc, #40]	; (83a5c <prvTaskExitError+0x40>)
   83a34:	4798      	blx	r3

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   83a36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   83a3a:	f383 8811 	msr	BASEPRI, r3
   83a3e:	f3bf 8f6f 	isb	sy
   83a42:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
   83a46:	9b01      	ldr	r3, [sp, #4]
   83a48:	2b00      	cmp	r3, #0
   83a4a:	d0fc      	beq.n	83a46 <prvTaskExitError+0x2a>
}
   83a4c:	b003      	add	sp, #12
   83a4e:	f85d fb04 	ldr.w	pc, [sp], #4
   83a52:	bf00      	nop
   83a54:	20070274 	.word	0x20070274
   83a58:	0008a7cc 	.word	0x0008a7cc
   83a5c:	00085a0d 	.word	0x00085a0d

00083a60 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   83a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   83a64:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   83a68:	f021 0101 	bic.w	r1, r1, #1
   83a6c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   83a70:	4b03      	ldr	r3, [pc, #12]	; (83a80 <pxPortInitialiseStack+0x20>)
   83a72:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   83a76:	f840 2c20 	str.w	r2, [r0, #-32]
}
   83a7a:	3840      	subs	r0, #64	; 0x40
   83a7c:	4770      	bx	lr
   83a7e:	bf00      	nop
   83a80:	00083a1d 	.word	0x00083a1d
	...

00083a90 <SVC_Handler>:
	__asm volatile (
   83a90:	4b07      	ldr	r3, [pc, #28]	; (83ab0 <pxCurrentTCBConst2>)
   83a92:	6819      	ldr	r1, [r3, #0]
   83a94:	6808      	ldr	r0, [r1, #0]
   83a96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83a9a:	f380 8809 	msr	PSP, r0
   83a9e:	f3bf 8f6f 	isb	sy
   83aa2:	f04f 0000 	mov.w	r0, #0
   83aa6:	f380 8811 	msr	BASEPRI, r0
   83aaa:	f04e 0e0d 	orr.w	lr, lr, #13
   83aae:	4770      	bx	lr

00083ab0 <pxCurrentTCBConst2>:
   83ab0:	20075780 	.word	0x20075780

00083ab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   83ab4:	b508      	push	{r3, lr}
   83ab6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   83aba:	f383 8811 	msr	BASEPRI, r3
   83abe:	f3bf 8f6f 	isb	sy
   83ac2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   83ac6:	4a09      	ldr	r2, [pc, #36]	; (83aec <vPortEnterCritical+0x38>)
   83ac8:	6813      	ldr	r3, [r2, #0]
   83aca:	3301      	adds	r3, #1
   83acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   83ace:	2b01      	cmp	r3, #1
   83ad0:	d000      	beq.n	83ad4 <vPortEnterCritical+0x20>
   83ad2:	bd08      	pop	{r3, pc}
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   83ad4:	4b06      	ldr	r3, [pc, #24]	; (83af0 <vPortEnterCritical+0x3c>)
   83ad6:	681b      	ldr	r3, [r3, #0]
   83ad8:	f013 0fff 	tst.w	r3, #255	; 0xff
   83adc:	d0f9      	beq.n	83ad2 <vPortEnterCritical+0x1e>
   83ade:	f44f 71bb 	mov.w	r1, #374	; 0x176
   83ae2:	4804      	ldr	r0, [pc, #16]	; (83af4 <vPortEnterCritical+0x40>)
   83ae4:	4b04      	ldr	r3, [pc, #16]	; (83af8 <vPortEnterCritical+0x44>)
   83ae6:	4798      	blx	r3
	}
}
   83ae8:	e7f3      	b.n	83ad2 <vPortEnterCritical+0x1e>
   83aea:	bf00      	nop
   83aec:	20070274 	.word	0x20070274
   83af0:	e000ed04 	.word	0xe000ed04
   83af4:	0008a7cc 	.word	0x0008a7cc
   83af8:	00085a0d 	.word	0x00085a0d

00083afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   83afc:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
   83afe:	4b08      	ldr	r3, [pc, #32]	; (83b20 <vPortExitCritical+0x24>)
   83b00:	681b      	ldr	r3, [r3, #0]
   83b02:	b13b      	cbz	r3, 83b14 <vPortExitCritical+0x18>
	uxCriticalNesting--;
   83b04:	4a06      	ldr	r2, [pc, #24]	; (83b20 <vPortExitCritical+0x24>)
   83b06:	6813      	ldr	r3, [r2, #0]
   83b08:	3b01      	subs	r3, #1
   83b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   83b0c:	b90b      	cbnz	r3, 83b12 <vPortExitCritical+0x16>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   83b0e:	f383 8811 	msr	BASEPRI, r3
   83b12:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
   83b14:	f240 117d 	movw	r1, #381	; 0x17d
   83b18:	4802      	ldr	r0, [pc, #8]	; (83b24 <vPortExitCritical+0x28>)
   83b1a:	4b03      	ldr	r3, [pc, #12]	; (83b28 <vPortExitCritical+0x2c>)
   83b1c:	4798      	blx	r3
   83b1e:	e7f1      	b.n	83b04 <vPortExitCritical+0x8>
   83b20:	20070274 	.word	0x20070274
   83b24:	0008a7cc 	.word	0x0008a7cc
   83b28:	00085a0d 	.word	0x00085a0d
   83b2c:	00000000 	.word	0x00000000

00083b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   83b30:	f3ef 8009 	mrs	r0, PSP
   83b34:	f3bf 8f6f 	isb	sy
   83b38:	4b0d      	ldr	r3, [pc, #52]	; (83b70 <pxCurrentTCBConst>)
   83b3a:	681a      	ldr	r2, [r3, #0]
   83b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b40:	6010      	str	r0, [r2, #0]
   83b42:	e92d 4008 	stmdb	sp!, {r3, lr}
   83b46:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   83b4a:	f380 8811 	msr	BASEPRI, r0
   83b4e:	f001 f96b 	bl	84e28 <vTaskSwitchContext>
   83b52:	f04f 0000 	mov.w	r0, #0
   83b56:	f380 8811 	msr	BASEPRI, r0
   83b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   83b5e:	6819      	ldr	r1, [r3, #0]
   83b60:	6808      	ldr	r0, [r1, #0]
   83b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b66:	f380 8809 	msr	PSP, r0
   83b6a:	f3bf 8f6f 	isb	sy
   83b6e:	4770      	bx	lr

00083b70 <pxCurrentTCBConst>:
   83b70:	20075780 	.word	0x20075780

00083b74 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   83b74:	b508      	push	{r3, lr}
	__asm volatile
   83b76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   83b7a:	f383 8811 	msr	BASEPRI, r3
   83b7e:	f3bf 8f6f 	isb	sy
   83b82:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   83b86:	4b05      	ldr	r3, [pc, #20]	; (83b9c <SysTick_Handler+0x28>)
   83b88:	4798      	blx	r3
   83b8a:	b118      	cbz	r0, 83b94 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   83b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   83b90:	4b03      	ldr	r3, [pc, #12]	; (83ba0 <SysTick_Handler+0x2c>)
   83b92:	601a      	str	r2, [r3, #0]
	__asm volatile
   83b94:	2300      	movs	r3, #0
   83b96:	f383 8811 	msr	BASEPRI, r3
   83b9a:	bd08      	pop	{r3, pc}
   83b9c:	00084b79 	.word	0x00084b79
   83ba0:	e000ed04 	.word	0xe000ed04

00083ba4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
   83ba4:	4b05      	ldr	r3, [pc, #20]	; (83bbc <vPortSetupTimerInterrupt+0x18>)
   83ba6:	2200      	movs	r2, #0
   83ba8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
   83baa:	4905      	ldr	r1, [pc, #20]	; (83bc0 <vPortSetupTimerInterrupt+0x1c>)
   83bac:	600a      	str	r2, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   83bae:	4905      	ldr	r1, [pc, #20]	; (83bc4 <vPortSetupTimerInterrupt+0x20>)
   83bb0:	4a05      	ldr	r2, [pc, #20]	; (83bc8 <vPortSetupTimerInterrupt+0x24>)
   83bb2:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   83bb4:	2207      	movs	r2, #7
   83bb6:	601a      	str	r2, [r3, #0]
   83bb8:	4770      	bx	lr
   83bba:	bf00      	nop
   83bbc:	e000e010 	.word	0xe000e010
   83bc0:	e000e018 	.word	0xe000e018
   83bc4:	0001481f 	.word	0x0001481f
   83bc8:	e000e014 	.word	0xe000e014

00083bcc <xPortStartScheduler>:
{
   83bcc:	b510      	push	{r4, lr}
   83bce:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   83bd0:	4b2c      	ldr	r3, [pc, #176]	; (83c84 <xPortStartScheduler+0xb8>)
   83bd2:	781a      	ldrb	r2, [r3, #0]
   83bd4:	b2d2      	uxtb	r2, r2
   83bd6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   83bd8:	22ff      	movs	r2, #255	; 0xff
   83bda:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   83bdc:	781b      	ldrb	r3, [r3, #0]
   83bde:	b2db      	uxtb	r3, r3
   83be0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   83be4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   83be8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
   83bec:	4a26      	ldr	r2, [pc, #152]	; (83c88 <xPortStartScheduler+0xbc>)
   83bee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   83bf0:	2207      	movs	r2, #7
   83bf2:	4b26      	ldr	r3, [pc, #152]	; (83c8c <xPortStartScheduler+0xc0>)
   83bf4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83bf6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   83bfa:	f013 0f80 	tst.w	r3, #128	; 0x80
   83bfe:	d012      	beq.n	83c26 <xPortStartScheduler+0x5a>
   83c00:	2206      	movs	r2, #6
   83c02:	e000      	b.n	83c06 <xPortStartScheduler+0x3a>
   83c04:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   83c06:	f89d 3003 	ldrb.w	r3, [sp, #3]
   83c0a:	005b      	lsls	r3, r3, #1
   83c0c:	b2db      	uxtb	r3, r3
   83c0e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83c12:	f89d 3003 	ldrb.w	r3, [sp, #3]
   83c16:	1e51      	subs	r1, r2, #1
   83c18:	f013 0f80 	tst.w	r3, #128	; 0x80
   83c1c:	d1f2      	bne.n	83c04 <xPortStartScheduler+0x38>
   83c1e:	4b1b      	ldr	r3, [pc, #108]	; (83c8c <xPortStartScheduler+0xc0>)
   83c20:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   83c22:	2a03      	cmp	r2, #3
   83c24:	d00d      	beq.n	83c42 <xPortStartScheduler+0x76>
   83c26:	f44f 7197 	mov.w	r1, #302	; 0x12e
   83c2a:	4819      	ldr	r0, [pc, #100]	; (83c90 <xPortStartScheduler+0xc4>)
   83c2c:	4b19      	ldr	r3, [pc, #100]	; (83c94 <xPortStartScheduler+0xc8>)
   83c2e:	4798      	blx	r3
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
   83c30:	4b16      	ldr	r3, [pc, #88]	; (83c8c <xPortStartScheduler+0xc0>)
   83c32:	681b      	ldr	r3, [r3, #0]
   83c34:	2b03      	cmp	r3, #3
   83c36:	d004      	beq.n	83c42 <xPortStartScheduler+0x76>
   83c38:	f240 1137 	movw	r1, #311	; 0x137
   83c3c:	4814      	ldr	r0, [pc, #80]	; (83c90 <xPortStartScheduler+0xc4>)
   83c3e:	4b15      	ldr	r3, [pc, #84]	; (83c94 <xPortStartScheduler+0xc8>)
   83c40:	4798      	blx	r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   83c42:	4a12      	ldr	r2, [pc, #72]	; (83c8c <xPortStartScheduler+0xc0>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   83c44:	6813      	ldr	r3, [r2, #0]
   83c46:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   83c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   83c4c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   83c4e:	9b01      	ldr	r3, [sp, #4]
   83c50:	b2db      	uxtb	r3, r3
   83c52:	4a0c      	ldr	r2, [pc, #48]	; (83c84 <xPortStartScheduler+0xb8>)
   83c54:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   83c56:	4b10      	ldr	r3, [pc, #64]	; (83c98 <xPortStartScheduler+0xcc>)
   83c58:	681a      	ldr	r2, [r3, #0]
   83c5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   83c5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   83c60:	681a      	ldr	r2, [r3, #0]
   83c62:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   83c66:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   83c68:	4b0c      	ldr	r3, [pc, #48]	; (83c9c <xPortStartScheduler+0xd0>)
   83c6a:	4798      	blx	r3
	uxCriticalNesting = 0;
   83c6c:	2400      	movs	r4, #0
   83c6e:	4b0c      	ldr	r3, [pc, #48]	; (83ca0 <xPortStartScheduler+0xd4>)
   83c70:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   83c72:	4b0c      	ldr	r3, [pc, #48]	; (83ca4 <xPortStartScheduler+0xd8>)
   83c74:	4798      	blx	r3
	vTaskSwitchContext();
   83c76:	4b0c      	ldr	r3, [pc, #48]	; (83ca8 <xPortStartScheduler+0xdc>)
   83c78:	4798      	blx	r3
	prvTaskExitError();
   83c7a:	4b0c      	ldr	r3, [pc, #48]	; (83cac <xPortStartScheduler+0xe0>)
   83c7c:	4798      	blx	r3
}
   83c7e:	4620      	mov	r0, r4
   83c80:	b002      	add	sp, #8
   83c82:	bd10      	pop	{r4, pc}
   83c84:	e000e400 	.word	0xe000e400
   83c88:	20071770 	.word	0x20071770
   83c8c:	20071774 	.word	0x20071774
   83c90:	0008a7cc 	.word	0x0008a7cc
   83c94:	00085a0d 	.word	0x00085a0d
   83c98:	e000ed20 	.word	0xe000ed20
   83c9c:	00083ba5 	.word	0x00083ba5
   83ca0:	20070274 	.word	0x20070274
   83ca4:	000839fd 	.word	0x000839fd
   83ca8:	00084e29 	.word	0x00084e29
   83cac:	00083a1d 	.word	0x00083a1d

00083cb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   83cb0:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   83cb2:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   83cb6:	2b0f      	cmp	r3, #15
   83cb8:	d906      	bls.n	83cc8 <vPortValidateInterruptPriority+0x18>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   83cba:	4a0e      	ldr	r2, [pc, #56]	; (83cf4 <vPortValidateInterruptPriority+0x44>)
   83cbc:	5c9b      	ldrb	r3, [r3, r2]
   83cbe:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   83cc0:	4a0d      	ldr	r2, [pc, #52]	; (83cf8 <vPortValidateInterruptPriority+0x48>)
   83cc2:	7812      	ldrb	r2, [r2, #0]
   83cc4:	429a      	cmp	r2, r3
   83cc6:	d808      	bhi.n	83cda <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   83cc8:	4b0c      	ldr	r3, [pc, #48]	; (83cfc <vPortValidateInterruptPriority+0x4c>)
   83cca:	681b      	ldr	r3, [r3, #0]
   83ccc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   83cd0:	4a0b      	ldr	r2, [pc, #44]	; (83d00 <vPortValidateInterruptPriority+0x50>)
   83cd2:	6812      	ldr	r2, [r2, #0]
   83cd4:	4293      	cmp	r3, r2
   83cd6:	d806      	bhi.n	83ce6 <vPortValidateInterruptPriority+0x36>
   83cd8:	bd08      	pop	{r3, pc}
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   83cda:	f240 21a6 	movw	r1, #678	; 0x2a6
   83cde:	4809      	ldr	r0, [pc, #36]	; (83d04 <vPortValidateInterruptPriority+0x54>)
   83ce0:	4b09      	ldr	r3, [pc, #36]	; (83d08 <vPortValidateInterruptPriority+0x58>)
   83ce2:	4798      	blx	r3
   83ce4:	e7f0      	b.n	83cc8 <vPortValidateInterruptPriority+0x18>
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   83ce6:	f240 21b6 	movw	r1, #694	; 0x2b6
   83cea:	4806      	ldr	r0, [pc, #24]	; (83d04 <vPortValidateInterruptPriority+0x54>)
   83cec:	4b06      	ldr	r3, [pc, #24]	; (83d08 <vPortValidateInterruptPriority+0x58>)
   83cee:	4798      	blx	r3
	}
   83cf0:	e7f2      	b.n	83cd8 <vPortValidateInterruptPriority+0x28>
   83cf2:	bf00      	nop
   83cf4:	e000e3f0 	.word	0xe000e3f0
   83cf8:	20071770 	.word	0x20071770
   83cfc:	e000ed0c 	.word	0xe000ed0c
   83d00:	20071774 	.word	0x20071774
   83d04:	0008a7cc 	.word	0x0008a7cc
   83d08:	00085a0d 	.word	0x00085a0d

00083d0c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   83d0c:	b538      	push	{r3, r4, r5, lr}
   83d0e:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   83d10:	f010 0f07 	tst.w	r0, #7
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   83d14:	bf1c      	itt	ne
   83d16:	f020 0407 	bicne.w	r4, r0, #7
   83d1a:	3408      	addne	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   83d1c:	4b11      	ldr	r3, [pc, #68]	; (83d64 <pvPortMalloc+0x58>)
   83d1e:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   83d20:	4b11      	ldr	r3, [pc, #68]	; (83d68 <pvPortMalloc+0x5c>)
   83d22:	681b      	ldr	r3, [r3, #0]
   83d24:	b193      	cbz	r3, 83d4c <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   83d26:	4b11      	ldr	r3, [pc, #68]	; (83d6c <pvPortMalloc+0x60>)
   83d28:	681b      	ldr	r3, [r3, #0]
   83d2a:	441c      	add	r4, r3
   83d2c:	f643 72f7 	movw	r2, #16375	; 0x3ff7
   83d30:	4294      	cmp	r4, r2
   83d32:	d811      	bhi.n	83d58 <pvPortMalloc+0x4c>
   83d34:	42a3      	cmp	r3, r4
   83d36:	d20f      	bcs.n	83d58 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   83d38:	4a0b      	ldr	r2, [pc, #44]	; (83d68 <pvPortMalloc+0x5c>)
   83d3a:	6815      	ldr	r5, [r2, #0]
   83d3c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
   83d3e:	4b0b      	ldr	r3, [pc, #44]	; (83d6c <pvPortMalloc+0x60>)
   83d40:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   83d42:	4b0b      	ldr	r3, [pc, #44]	; (83d70 <pvPortMalloc+0x64>)
   83d44:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   83d46:	b14d      	cbz	r5, 83d5c <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
   83d48:	4628      	mov	r0, r5
   83d4a:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   83d4c:	4b09      	ldr	r3, [pc, #36]	; (83d74 <pvPortMalloc+0x68>)
   83d4e:	f023 0307 	bic.w	r3, r3, #7
   83d52:	4a05      	ldr	r2, [pc, #20]	; (83d68 <pvPortMalloc+0x5c>)
   83d54:	6013      	str	r3, [r2, #0]
   83d56:	e7e6      	b.n	83d26 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
   83d58:	4b05      	ldr	r3, [pc, #20]	; (83d70 <pvPortMalloc+0x64>)
   83d5a:	4798      	blx	r3
			vApplicationMallocFailedHook();
   83d5c:	4b06      	ldr	r3, [pc, #24]	; (83d78 <pvPortMalloc+0x6c>)
   83d5e:	4798      	blx	r3
   83d60:	2500      	movs	r5, #0
	return pvReturn;
   83d62:	e7f1      	b.n	83d48 <pvPortMalloc+0x3c>
   83d64:	00084b49 	.word	0x00084b49
   83d68:	20071778 	.word	0x20071778
   83d6c:	2007577c 	.word	0x2007577c
   83d70:	00084cb5 	.word	0x00084cb5
   83d74:	20071784 	.word	0x20071784
   83d78:	000859e9 	.word	0x000859e9

00083d7c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   83d7c:	b128      	cbz	r0, 83d8a <vPortFree+0xe>
{
   83d7e:	b508      	push	{r3, lr}
	configASSERT( pv == NULL );
   83d80:	2183      	movs	r1, #131	; 0x83
   83d82:	4802      	ldr	r0, [pc, #8]	; (83d8c <vPortFree+0x10>)
   83d84:	4b02      	ldr	r3, [pc, #8]	; (83d90 <vPortFree+0x14>)
   83d86:	4798      	blx	r3
   83d88:	bd08      	pop	{r3, pc}
   83d8a:	4770      	bx	lr
   83d8c:	0008a820 	.word	0x0008a820
   83d90:	00085a0d 	.word	0x00085a0d

00083d94 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   83d94:	b510      	push	{r4, lr}
   83d96:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83d98:	4b04      	ldr	r3, [pc, #16]	; (83dac <prvIsQueueEmpty+0x18>)
   83d9a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   83d9c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   83d9e:	4b04      	ldr	r3, [pc, #16]	; (83db0 <prvIsQueueEmpty+0x1c>)
   83da0:	4798      	blx	r3

	return xReturn;
}
   83da2:	fab4 f084 	clz	r0, r4
   83da6:	0940      	lsrs	r0, r0, #5
   83da8:	bd10      	pop	{r4, pc}
   83daa:	bf00      	nop
   83dac:	00083ab5 	.word	0x00083ab5
   83db0:	00083afd 	.word	0x00083afd

00083db4 <prvCopyDataToQueue>:
{
   83db4:	b570      	push	{r4, r5, r6, lr}
   83db6:	4604      	mov	r4, r0
   83db8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   83dba:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   83dbc:	6c02      	ldr	r2, [r0, #64]	; 0x40
   83dbe:	b95a      	cbnz	r2, 83dd8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83dc0:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
   83dc2:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83dc4:	b113      	cbz	r3, 83dcc <prvCopyDataToQueue+0x18>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   83dc6:	3501      	adds	r5, #1
   83dc8:	63a5      	str	r5, [r4, #56]	; 0x38
}
   83dca:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   83dcc:	6860      	ldr	r0, [r4, #4]
   83dce:	4b17      	ldr	r3, [pc, #92]	; (83e2c <prvCopyDataToQueue+0x78>)
   83dd0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   83dd2:	2300      	movs	r3, #0
   83dd4:	6063      	str	r3, [r4, #4]
   83dd6:	e7f6      	b.n	83dc6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
   83dd8:	b96e      	cbnz	r6, 83df6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   83dda:	6880      	ldr	r0, [r0, #8]
   83ddc:	4b14      	ldr	r3, [pc, #80]	; (83e30 <prvCopyDataToQueue+0x7c>)
   83dde:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   83de0:	68a3      	ldr	r3, [r4, #8]
   83de2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   83de4:	4413      	add	r3, r2
   83de6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83de8:	6862      	ldr	r2, [r4, #4]
   83dea:	4293      	cmp	r3, r2
   83dec:	d319      	bcc.n	83e22 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83dee:	6823      	ldr	r3, [r4, #0]
   83df0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   83df2:	2000      	movs	r0, #0
   83df4:	e7e7      	b.n	83dc6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83df6:	68c0      	ldr	r0, [r0, #12]
   83df8:	4b0d      	ldr	r3, [pc, #52]	; (83e30 <prvCopyDataToQueue+0x7c>)
   83dfa:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83dfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
   83dfe:	4252      	negs	r2, r2
   83e00:	68e3      	ldr	r3, [r4, #12]
   83e02:	4413      	add	r3, r2
   83e04:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83e06:	6821      	ldr	r1, [r4, #0]
   83e08:	428b      	cmp	r3, r1
   83e0a:	d202      	bcs.n	83e12 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   83e0c:	6863      	ldr	r3, [r4, #4]
   83e0e:	441a      	add	r2, r3
   83e10:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
   83e12:	2e02      	cmp	r6, #2
   83e14:	d001      	beq.n	83e1a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
   83e16:	2000      	movs	r0, #0
   83e18:	e7d5      	b.n	83dc6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   83e1a:	b125      	cbz	r5, 83e26 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
   83e1c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
   83e1e:	2000      	movs	r0, #0
   83e20:	e7d1      	b.n	83dc6 <prvCopyDataToQueue+0x12>
   83e22:	2000      	movs	r0, #0
   83e24:	e7cf      	b.n	83dc6 <prvCopyDataToQueue+0x12>
   83e26:	2000      	movs	r0, #0
   83e28:	e7cd      	b.n	83dc6 <prvCopyDataToQueue+0x12>
   83e2a:	bf00      	nop
   83e2c:	00085201 	.word	0x00085201
   83e30:	00085c5d 	.word	0x00085c5d

00083e34 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   83e34:	6c02      	ldr	r2, [r0, #64]	; 0x40
   83e36:	b172      	cbz	r2, 83e56 <prvCopyDataFromQueue+0x22>
{
   83e38:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83e3a:	68c3      	ldr	r3, [r0, #12]
   83e3c:	4413      	add	r3, r2
   83e3e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83e40:	6844      	ldr	r4, [r0, #4]
   83e42:	42a3      	cmp	r3, r4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83e44:	bf24      	itt	cs
   83e46:	6803      	ldrcs	r3, [r0, #0]
   83e48:	60c3      	strcs	r3, [r0, #12]
   83e4a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83e4c:	68c1      	ldr	r1, [r0, #12]
   83e4e:	4620      	mov	r0, r4
   83e50:	4b01      	ldr	r3, [pc, #4]	; (83e58 <prvCopyDataFromQueue+0x24>)
   83e52:	4798      	blx	r3
   83e54:	bd10      	pop	{r4, pc}
   83e56:	4770      	bx	lr
   83e58:	00085c5d 	.word	0x00085c5d

00083e5c <prvUnlockQueue>:
{
   83e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83e60:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
   83e62:	4b20      	ldr	r3, [pc, #128]	; (83ee4 <prvUnlockQueue+0x88>)
   83e64:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   83e66:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
   83e6a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   83e6c:	2c00      	cmp	r4, #0
   83e6e:	dd12      	ble.n	83e96 <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83e70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   83e72:	b183      	cbz	r3, 83e96 <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83e74:	f105 0724 	add.w	r7, r5, #36	; 0x24
   83e78:	4e1b      	ldr	r6, [pc, #108]	; (83ee8 <prvUnlockQueue+0x8c>)
						vTaskMissedYield();
   83e7a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 83ef0 <prvUnlockQueue+0x94>
   83e7e:	e004      	b.n	83e8a <prvUnlockQueue+0x2e>
   83e80:	3c01      	subs	r4, #1
   83e82:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   83e84:	b13c      	cbz	r4, 83e96 <prvUnlockQueue+0x3a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   83e88:	b12b      	cbz	r3, 83e96 <prvUnlockQueue+0x3a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83e8a:	4638      	mov	r0, r7
   83e8c:	47b0      	blx	r6
   83e8e:	2800      	cmp	r0, #0
   83e90:	d0f6      	beq.n	83e80 <prvUnlockQueue+0x24>
						vTaskMissedYield();
   83e92:	47c0      	blx	r8
   83e94:	e7f4      	b.n	83e80 <prvUnlockQueue+0x24>
		pxQueue->cTxLock = queueUNLOCKED;
   83e96:	23ff      	movs	r3, #255	; 0xff
   83e98:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   83e9c:	4b13      	ldr	r3, [pc, #76]	; (83eec <prvUnlockQueue+0x90>)
   83e9e:	4798      	blx	r3
	taskENTER_CRITICAL();
   83ea0:	4b10      	ldr	r3, [pc, #64]	; (83ee4 <prvUnlockQueue+0x88>)
   83ea2:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   83ea4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   83ea8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   83eaa:	2c00      	cmp	r4, #0
   83eac:	dd12      	ble.n	83ed4 <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83eae:	692b      	ldr	r3, [r5, #16]
   83eb0:	b183      	cbz	r3, 83ed4 <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83eb2:	f105 0710 	add.w	r7, r5, #16
   83eb6:	4e0c      	ldr	r6, [pc, #48]	; (83ee8 <prvUnlockQueue+0x8c>)
					vTaskMissedYield();
   83eb8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 83ef0 <prvUnlockQueue+0x94>
   83ebc:	e004      	b.n	83ec8 <prvUnlockQueue+0x6c>
   83ebe:	3c01      	subs	r4, #1
   83ec0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   83ec2:	b13c      	cbz	r4, 83ed4 <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83ec4:	692b      	ldr	r3, [r5, #16]
   83ec6:	b12b      	cbz	r3, 83ed4 <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83ec8:	4638      	mov	r0, r7
   83eca:	47b0      	blx	r6
   83ecc:	2800      	cmp	r0, #0
   83ece:	d0f6      	beq.n	83ebe <prvUnlockQueue+0x62>
					vTaskMissedYield();
   83ed0:	47c0      	blx	r8
   83ed2:	e7f4      	b.n	83ebe <prvUnlockQueue+0x62>
		pxQueue->cRxLock = queueUNLOCKED;
   83ed4:	23ff      	movs	r3, #255	; 0xff
   83ed6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
   83eda:	4b04      	ldr	r3, [pc, #16]	; (83eec <prvUnlockQueue+0x90>)
   83edc:	4798      	blx	r3
   83ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83ee2:	bf00      	nop
   83ee4:	00083ab5 	.word	0x00083ab5
   83ee8:	00084fa1 	.word	0x00084fa1
   83eec:	00083afd 	.word	0x00083afd
   83ef0:	00085115 	.word	0x00085115

00083ef4 <xQueueGenericReset>:
{
   83ef4:	b538      	push	{r3, r4, r5, lr}
   83ef6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   83ef8:	4604      	mov	r4, r0
   83efa:	b1d0      	cbz	r0, 83f32 <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
   83efc:	4b1b      	ldr	r3, [pc, #108]	; (83f6c <xQueueGenericReset+0x78>)
   83efe:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   83f00:	6822      	ldr	r2, [r4, #0]
   83f02:	6c21      	ldr	r1, [r4, #64]	; 0x40
   83f04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   83f06:	fb03 f301 	mul.w	r3, r3, r1
   83f0a:	18d0      	adds	r0, r2, r3
   83f0c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   83f0e:	2000      	movs	r0, #0
   83f10:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   83f12:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   83f14:	1a5b      	subs	r3, r3, r1
   83f16:	4413      	add	r3, r2
   83f18:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   83f1a:	23ff      	movs	r3, #255	; 0xff
   83f1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   83f20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
   83f24:	b9cd      	cbnz	r5, 83f5a <xQueueGenericReset+0x66>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83f26:	6923      	ldr	r3, [r4, #16]
   83f28:	b943      	cbnz	r3, 83f3c <xQueueGenericReset+0x48>
	taskEXIT_CRITICAL();
   83f2a:	4b11      	ldr	r3, [pc, #68]	; (83f70 <xQueueGenericReset+0x7c>)
   83f2c:	4798      	blx	r3
}
   83f2e:	2001      	movs	r0, #1
   83f30:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   83f32:	21fc      	movs	r1, #252	; 0xfc
   83f34:	480f      	ldr	r0, [pc, #60]	; (83f74 <xQueueGenericReset+0x80>)
   83f36:	4b10      	ldr	r3, [pc, #64]	; (83f78 <xQueueGenericReset+0x84>)
   83f38:	4798      	blx	r3
   83f3a:	e7df      	b.n	83efc <xQueueGenericReset+0x8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83f3c:	f104 0010 	add.w	r0, r4, #16
   83f40:	4b0e      	ldr	r3, [pc, #56]	; (83f7c <xQueueGenericReset+0x88>)
   83f42:	4798      	blx	r3
   83f44:	2800      	cmp	r0, #0
   83f46:	d0f0      	beq.n	83f2a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
   83f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   83f4c:	4b0c      	ldr	r3, [pc, #48]	; (83f80 <xQueueGenericReset+0x8c>)
   83f4e:	601a      	str	r2, [r3, #0]
   83f50:	f3bf 8f4f 	dsb	sy
   83f54:	f3bf 8f6f 	isb	sy
   83f58:	e7e7      	b.n	83f2a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   83f5a:	f104 0010 	add.w	r0, r4, #16
   83f5e:	4d09      	ldr	r5, [pc, #36]	; (83f84 <xQueueGenericReset+0x90>)
   83f60:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   83f62:	f104 0024 	add.w	r0, r4, #36	; 0x24
   83f66:	47a8      	blx	r5
   83f68:	e7df      	b.n	83f2a <xQueueGenericReset+0x36>
   83f6a:	bf00      	nop
   83f6c:	00083ab5 	.word	0x00083ab5
   83f70:	00083afd 	.word	0x00083afd
   83f74:	0008a870 	.word	0x0008a870
   83f78:	00085a0d 	.word	0x00085a0d
   83f7c:	00084fa1 	.word	0x00084fa1
   83f80:	e000ed04 	.word	0xe000ed04
   83f84:	0008396d 	.word	0x0008396d

00083f88 <xQueueGenericCreate>:
	{
   83f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f8a:	460d      	mov	r5, r1
   83f8c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   83f8e:	4606      	mov	r6, r0
   83f90:	b1a0      	cbz	r0, 83fbc <xQueueGenericCreate+0x34>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83f92:	fb05 f006 	mul.w	r0, r5, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   83f96:	3050      	adds	r0, #80	; 0x50
   83f98:	4b0c      	ldr	r3, [pc, #48]	; (83fcc <xQueueGenericCreate+0x44>)
   83f9a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   83f9c:	4604      	mov	r4, r0
   83f9e:	b158      	cbz	r0, 83fb8 <xQueueGenericCreate+0x30>
	if( uxItemSize == ( UBaseType_t ) 0 )
   83fa0:	b195      	cbz	r5, 83fc8 <xQueueGenericCreate+0x40>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   83fa2:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   83fa6:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
   83fa8:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   83faa:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   83fac:	2101      	movs	r1, #1
   83fae:	4620      	mov	r0, r4
   83fb0:	4b07      	ldr	r3, [pc, #28]	; (83fd0 <xQueueGenericCreate+0x48>)
   83fb2:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   83fb4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
   83fb8:	4620      	mov	r0, r4
   83fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   83fbc:	f240 116d 	movw	r1, #365	; 0x16d
   83fc0:	4804      	ldr	r0, [pc, #16]	; (83fd4 <xQueueGenericCreate+0x4c>)
   83fc2:	4b05      	ldr	r3, [pc, #20]	; (83fd8 <xQueueGenericCreate+0x50>)
   83fc4:	4798      	blx	r3
   83fc6:	e7e4      	b.n	83f92 <xQueueGenericCreate+0xa>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   83fc8:	6020      	str	r0, [r4, #0]
   83fca:	e7ed      	b.n	83fa8 <xQueueGenericCreate+0x20>
   83fcc:	00083d0d 	.word	0x00083d0d
   83fd0:	00083ef5 	.word	0x00083ef5
   83fd4:	0008a870 	.word	0x0008a870
   83fd8:	00085a0d 	.word	0x00085a0d

00083fdc <xQueueCreateCountingSemaphore>:
	{
   83fdc:	b538      	push	{r3, r4, r5, lr}
   83fde:	460d      	mov	r5, r1
		configASSERT( uxMaxCount != 0 );
   83fe0:	4604      	mov	r4, r0
   83fe2:	b158      	cbz	r0, 83ffc <xQueueCreateCountingSemaphore+0x20>
		configASSERT( uxInitialCount <= uxMaxCount );
   83fe4:	42ac      	cmp	r4, r5
   83fe6:	d30f      	bcc.n	84008 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
   83fe8:	2202      	movs	r2, #2
   83fea:	2100      	movs	r1, #0
   83fec:	4620      	mov	r0, r4
   83fee:	4b09      	ldr	r3, [pc, #36]	; (84014 <xQueueCreateCountingSemaphore+0x38>)
   83ff0:	4798      	blx	r3
		if( xHandle != NULL )
   83ff2:	4603      	mov	r3, r0
   83ff4:	b100      	cbz	r0, 83ff8 <xQueueCreateCountingSemaphore+0x1c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
   83ff6:	6385      	str	r5, [r0, #56]	; 0x38
	}
   83ff8:	4618      	mov	r0, r3
   83ffa:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( uxMaxCount != 0 );
   83ffc:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   84000:	4805      	ldr	r0, [pc, #20]	; (84018 <xQueueCreateCountingSemaphore+0x3c>)
   84002:	4b06      	ldr	r3, [pc, #24]	; (8401c <xQueueCreateCountingSemaphore+0x40>)
   84004:	4798      	blx	r3
   84006:	e7ed      	b.n	83fe4 <xQueueCreateCountingSemaphore+0x8>
		configASSERT( uxInitialCount <= uxMaxCount );
   84008:	f240 21c1 	movw	r1, #705	; 0x2c1
   8400c:	4802      	ldr	r0, [pc, #8]	; (84018 <xQueueCreateCountingSemaphore+0x3c>)
   8400e:	4b03      	ldr	r3, [pc, #12]	; (8401c <xQueueCreateCountingSemaphore+0x40>)
   84010:	4798      	blx	r3
   84012:	e7e9      	b.n	83fe8 <xQueueCreateCountingSemaphore+0xc>
   84014:	00083f89 	.word	0x00083f89
   84018:	0008a870 	.word	0x0008a870
   8401c:	00085a0d 	.word	0x00085a0d

00084020 <xQueueGenericSend>:
{
   84020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84024:	b085      	sub	sp, #20
   84026:	4689      	mov	r9, r1
   84028:	9201      	str	r2, [sp, #4]
   8402a:	461e      	mov	r6, r3
	configASSERT( pxQueue );
   8402c:	4604      	mov	r4, r0
   8402e:	b1a8      	cbz	r0, 8405c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   84030:	f1b9 0f00 	cmp.w	r9, #0
   84034:	d018      	beq.n	84068 <xQueueGenericSend+0x48>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   84036:	2e02      	cmp	r6, #2
   84038:	d01f      	beq.n	8407a <xQueueGenericSend+0x5a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   8403a:	4b56      	ldr	r3, [pc, #344]	; (84194 <xQueueGenericSend+0x174>)
   8403c:	4798      	blx	r3
   8403e:	b930      	cbnz	r0, 8404e <xQueueGenericSend+0x2e>
   84040:	9b01      	ldr	r3, [sp, #4]
   84042:	b123      	cbz	r3, 8404e <xQueueGenericSend+0x2e>
   84044:	f240 21e1 	movw	r1, #737	; 0x2e1
   84048:	4853      	ldr	r0, [pc, #332]	; (84198 <xQueueGenericSend+0x178>)
   8404a:	4b54      	ldr	r3, [pc, #336]	; (8419c <xQueueGenericSend+0x17c>)
   8404c:	4798      	blx	r3
{
   8404e:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
   84052:	4d53      	ldr	r5, [pc, #332]	; (841a0 <xQueueGenericSend+0x180>)
					vTaskInternalSetTimeOutState( &xTimeOut );
   84054:	4f53      	ldr	r7, [pc, #332]	; (841a4 <xQueueGenericSend+0x184>)
					portYIELD_WITHIN_API();
   84056:	f8df 8154 	ldr.w	r8, [pc, #340]	; 841ac <xQueueGenericSend+0x18c>
   8405a:	e04a      	b.n	840f2 <xQueueGenericSend+0xd2>
	configASSERT( pxQueue );
   8405c:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   84060:	484d      	ldr	r0, [pc, #308]	; (84198 <xQueueGenericSend+0x178>)
   84062:	4b4e      	ldr	r3, [pc, #312]	; (8419c <xQueueGenericSend+0x17c>)
   84064:	4798      	blx	r3
   84066:	e7e3      	b.n	84030 <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   84068:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8406a:	2b00      	cmp	r3, #0
   8406c:	d0e3      	beq.n	84036 <xQueueGenericSend+0x16>
   8406e:	f240 21dd 	movw	r1, #733	; 0x2dd
   84072:	4849      	ldr	r0, [pc, #292]	; (84198 <xQueueGenericSend+0x178>)
   84074:	4b49      	ldr	r3, [pc, #292]	; (8419c <xQueueGenericSend+0x17c>)
   84076:	4798      	blx	r3
   84078:	e7dd      	b.n	84036 <xQueueGenericSend+0x16>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   8407a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8407c:	2b01      	cmp	r3, #1
   8407e:	d0dc      	beq.n	8403a <xQueueGenericSend+0x1a>
   84080:	f240 21de 	movw	r1, #734	; 0x2de
   84084:	4844      	ldr	r0, [pc, #272]	; (84198 <xQueueGenericSend+0x178>)
   84086:	4b45      	ldr	r3, [pc, #276]	; (8419c <xQueueGenericSend+0x17c>)
   84088:	4798      	blx	r3
   8408a:	e7d6      	b.n	8403a <xQueueGenericSend+0x1a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8408c:	4632      	mov	r2, r6
   8408e:	4649      	mov	r1, r9
   84090:	4620      	mov	r0, r4
   84092:	4b45      	ldr	r3, [pc, #276]	; (841a8 <xQueueGenericSend+0x188>)
   84094:	4798      	blx	r3
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   84096:	6a63      	ldr	r3, [r4, #36]	; 0x24
   84098:	b973      	cbnz	r3, 840b8 <xQueueGenericSend+0x98>
					else if( xYieldRequired != pdFALSE )
   8409a:	b138      	cbz	r0, 840ac <xQueueGenericSend+0x8c>
						queueYIELD_IF_USING_PREEMPTION();
   8409c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   840a0:	4b42      	ldr	r3, [pc, #264]	; (841ac <xQueueGenericSend+0x18c>)
   840a2:	601a      	str	r2, [r3, #0]
   840a4:	f3bf 8f4f 	dsb	sy
   840a8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
   840ac:	4b40      	ldr	r3, [pc, #256]	; (841b0 <xQueueGenericSend+0x190>)
   840ae:	4798      	blx	r3
				return pdPASS;
   840b0:	2001      	movs	r0, #1
}
   840b2:	b005      	add	sp, #20
   840b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   840b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   840bc:	4b3d      	ldr	r3, [pc, #244]	; (841b4 <xQueueGenericSend+0x194>)
   840be:	4798      	blx	r3
   840c0:	2800      	cmp	r0, #0
   840c2:	d0f3      	beq.n	840ac <xQueueGenericSend+0x8c>
							queueYIELD_IF_USING_PREEMPTION();
   840c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   840c8:	4b38      	ldr	r3, [pc, #224]	; (841ac <xQueueGenericSend+0x18c>)
   840ca:	601a      	str	r2, [r3, #0]
   840cc:	f3bf 8f4f 	dsb	sy
   840d0:	f3bf 8f6f 	isb	sy
   840d4:	e7ea      	b.n	840ac <xQueueGenericSend+0x8c>
					taskEXIT_CRITICAL();
   840d6:	4b36      	ldr	r3, [pc, #216]	; (841b0 <xQueueGenericSend+0x190>)
   840d8:	4798      	blx	r3
					return errQUEUE_FULL;
   840da:	2000      	movs	r0, #0
   840dc:	e7e9      	b.n	840b2 <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
   840de:	a802      	add	r0, sp, #8
   840e0:	47b8      	blx	r7
   840e2:	e013      	b.n	8410c <xQueueGenericSend+0xec>
				prvUnlockQueue( pxQueue );
   840e4:	4620      	mov	r0, r4
   840e6:	4b34      	ldr	r3, [pc, #208]	; (841b8 <xQueueGenericSend+0x198>)
   840e8:	4798      	blx	r3
				( void ) xTaskResumeAll();
   840ea:	4b34      	ldr	r3, [pc, #208]	; (841bc <xQueueGenericSend+0x19c>)
   840ec:	4798      	blx	r3
   840ee:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
   840f2:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   840f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   840f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   840f8:	429a      	cmp	r2, r3
   840fa:	d3c7      	bcc.n	8408c <xQueueGenericSend+0x6c>
   840fc:	2e02      	cmp	r6, #2
   840fe:	d0c5      	beq.n	8408c <xQueueGenericSend+0x6c>
				if( xTicksToWait == ( TickType_t ) 0 )
   84100:	9b01      	ldr	r3, [sp, #4]
   84102:	2b00      	cmp	r3, #0
   84104:	d0e7      	beq.n	840d6 <xQueueGenericSend+0xb6>
				else if( xEntryTimeSet == pdFALSE )
   84106:	f1ba 0f00 	cmp.w	sl, #0
   8410a:	d0e8      	beq.n	840de <xQueueGenericSend+0xbe>
		taskEXIT_CRITICAL();
   8410c:	4b28      	ldr	r3, [pc, #160]	; (841b0 <xQueueGenericSend+0x190>)
   8410e:	4798      	blx	r3
		vTaskSuspendAll();
   84110:	4b2b      	ldr	r3, [pc, #172]	; (841c0 <xQueueGenericSend+0x1a0>)
   84112:	4798      	blx	r3
		prvLockQueue( pxQueue );
   84114:	47a8      	blx	r5
   84116:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8411a:	b25b      	sxtb	r3, r3
   8411c:	f1b3 3fff 	cmp.w	r3, #4294967295
   84120:	bf04      	itt	eq
   84122:	2300      	moveq	r3, #0
   84124:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   84128:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   8412c:	b25b      	sxtb	r3, r3
   8412e:	f1b3 3fff 	cmp.w	r3, #4294967295
   84132:	bf04      	itt	eq
   84134:	2300      	moveq	r3, #0
   84136:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   8413a:	4b1d      	ldr	r3, [pc, #116]	; (841b0 <xQueueGenericSend+0x190>)
   8413c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8413e:	a901      	add	r1, sp, #4
   84140:	a802      	add	r0, sp, #8
   84142:	4b20      	ldr	r3, [pc, #128]	; (841c4 <xQueueGenericSend+0x1a4>)
   84144:	4798      	blx	r3
   84146:	b9e8      	cbnz	r0, 84184 <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   84148:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   8414a:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   8414e:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   84152:	4b17      	ldr	r3, [pc, #92]	; (841b0 <xQueueGenericSend+0x190>)
   84154:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   84156:	45d3      	cmp	fp, sl
   84158:	d1c4      	bne.n	840e4 <xQueueGenericSend+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8415a:	9901      	ldr	r1, [sp, #4]
   8415c:	f104 0010 	add.w	r0, r4, #16
   84160:	4b19      	ldr	r3, [pc, #100]	; (841c8 <xQueueGenericSend+0x1a8>)
   84162:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   84164:	4620      	mov	r0, r4
   84166:	4b14      	ldr	r3, [pc, #80]	; (841b8 <xQueueGenericSend+0x198>)
   84168:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8416a:	4b14      	ldr	r3, [pc, #80]	; (841bc <xQueueGenericSend+0x19c>)
   8416c:	4798      	blx	r3
   8416e:	2800      	cmp	r0, #0
   84170:	d1bd      	bne.n	840ee <xQueueGenericSend+0xce>
					portYIELD_WITHIN_API();
   84172:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   84176:	f8c8 3000 	str.w	r3, [r8]
   8417a:	f3bf 8f4f 	dsb	sy
   8417e:	f3bf 8f6f 	isb	sy
   84182:	e7b4      	b.n	840ee <xQueueGenericSend+0xce>
			prvUnlockQueue( pxQueue );
   84184:	4620      	mov	r0, r4
   84186:	4b0c      	ldr	r3, [pc, #48]	; (841b8 <xQueueGenericSend+0x198>)
   84188:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8418a:	4b0c      	ldr	r3, [pc, #48]	; (841bc <xQueueGenericSend+0x19c>)
   8418c:	4798      	blx	r3
			return errQUEUE_FULL;
   8418e:	2000      	movs	r0, #0
   84190:	e78f      	b.n	840b2 <xQueueGenericSend+0x92>
   84192:	bf00      	nop
   84194:	00085121 	.word	0x00085121
   84198:	0008a870 	.word	0x0008a870
   8419c:	00085a0d 	.word	0x00085a0d
   841a0:	00083ab5 	.word	0x00083ab5
   841a4:	00085075 	.word	0x00085075
   841a8:	00083db5 	.word	0x00083db5
   841ac:	e000ed04 	.word	0xe000ed04
   841b0:	00083afd 	.word	0x00083afd
   841b4:	00084fa1 	.word	0x00084fa1
   841b8:	00083e5d 	.word	0x00083e5d
   841bc:	00084cb5 	.word	0x00084cb5
   841c0:	00084b49 	.word	0x00084b49
   841c4:	0008508d 	.word	0x0008508d
   841c8:	00084f19 	.word	0x00084f19

000841cc <xQueueCreateMutex>:
	{
   841cc:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   841ce:	4602      	mov	r2, r0
   841d0:	2100      	movs	r1, #0
   841d2:	2001      	movs	r0, #1
   841d4:	4b06      	ldr	r3, [pc, #24]	; (841f0 <xQueueCreateMutex+0x24>)
   841d6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   841d8:	4604      	mov	r4, r0
   841da:	b138      	cbz	r0, 841ec <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   841dc:	2100      	movs	r1, #0
   841de:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   841e0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   841e2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   841e4:	460b      	mov	r3, r1
   841e6:	460a      	mov	r2, r1
   841e8:	4d02      	ldr	r5, [pc, #8]	; (841f4 <xQueueCreateMutex+0x28>)
   841ea:	47a8      	blx	r5
	}
   841ec:	4620      	mov	r0, r4
   841ee:	bd38      	pop	{r3, r4, r5, pc}
   841f0:	00083f89 	.word	0x00083f89
   841f4:	00084021 	.word	0x00084021

000841f8 <xQueueGenericSendFromISR>:
{
   841f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   841fc:	460f      	mov	r7, r1
   841fe:	4691      	mov	r9, r2
   84200:	461e      	mov	r6, r3
	configASSERT( pxQueue );
   84202:	4604      	mov	r4, r0
   84204:	b1c8      	cbz	r0, 8423a <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   84206:	b1f7      	cbz	r7, 84246 <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   84208:	2e02      	cmp	r6, #2
   8420a:	d025      	beq.n	84258 <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   8420c:	4b29      	ldr	r3, [pc, #164]	; (842b4 <xQueueGenericSendFromISR+0xbc>)
   8420e:	4798      	blx	r3
	__asm volatile
   84210:	f3ef 8811 	mrs	r8, BASEPRI
   84214:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   84218:	f383 8811 	msr	BASEPRI, r3
   8421c:	f3bf 8f6f 	isb	sy
   84220:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   84224:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   84226:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   84228:	429a      	cmp	r2, r3
   8422a:	d31e      	bcc.n	8426a <xQueueGenericSendFromISR+0x72>
   8422c:	2e02      	cmp	r6, #2
   8422e:	d01c      	beq.n	8426a <xQueueGenericSendFromISR+0x72>
			xReturn = errQUEUE_FULL;
   84230:	2000      	movs	r0, #0
	__asm volatile
   84232:	f388 8811 	msr	BASEPRI, r8
}
   84236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
   8423a:	f240 31a2 	movw	r1, #930	; 0x3a2
   8423e:	481e      	ldr	r0, [pc, #120]	; (842b8 <xQueueGenericSendFromISR+0xc0>)
   84240:	4b1e      	ldr	r3, [pc, #120]	; (842bc <xQueueGenericSendFromISR+0xc4>)
   84242:	4798      	blx	r3
   84244:	e7df      	b.n	84206 <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   84246:	6c23      	ldr	r3, [r4, #64]	; 0x40
   84248:	2b00      	cmp	r3, #0
   8424a:	d0dd      	beq.n	84208 <xQueueGenericSendFromISR+0x10>
   8424c:	f240 31a3 	movw	r1, #931	; 0x3a3
   84250:	4819      	ldr	r0, [pc, #100]	; (842b8 <xQueueGenericSendFromISR+0xc0>)
   84252:	4b1a      	ldr	r3, [pc, #104]	; (842bc <xQueueGenericSendFromISR+0xc4>)
   84254:	4798      	blx	r3
   84256:	e7d7      	b.n	84208 <xQueueGenericSendFromISR+0x10>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   84258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8425a:	2b01      	cmp	r3, #1
   8425c:	d0d6      	beq.n	8420c <xQueueGenericSendFromISR+0x14>
   8425e:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   84262:	4815      	ldr	r0, [pc, #84]	; (842b8 <xQueueGenericSendFromISR+0xc0>)
   84264:	4b15      	ldr	r3, [pc, #84]	; (842bc <xQueueGenericSendFromISR+0xc4>)
   84266:	4798      	blx	r3
   84268:	e7d0      	b.n	8420c <xQueueGenericSendFromISR+0x14>
			const int8_t cTxLock = pxQueue->cTxLock;
   8426a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
   8426e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   84270:	4632      	mov	r2, r6
   84272:	4639      	mov	r1, r7
   84274:	4620      	mov	r0, r4
   84276:	4b12      	ldr	r3, [pc, #72]	; (842c0 <xQueueGenericSendFromISR+0xc8>)
   84278:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   8427a:	f1b5 3fff 	cmp.w	r5, #4294967295
   8427e:	d005      	beq.n	8428c <xQueueGenericSendFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   84280:	3501      	adds	r5, #1
   84282:	b26d      	sxtb	r5, r5
   84284:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
   84288:	2001      	movs	r0, #1
   8428a:	e7d2      	b.n	84232 <xQueueGenericSendFromISR+0x3a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8428c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8428e:	b90b      	cbnz	r3, 84294 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
   84290:	2001      	movs	r0, #1
   84292:	e7ce      	b.n	84232 <xQueueGenericSendFromISR+0x3a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   84294:	f104 0024 	add.w	r0, r4, #36	; 0x24
   84298:	4b0a      	ldr	r3, [pc, #40]	; (842c4 <xQueueGenericSendFromISR+0xcc>)
   8429a:	4798      	blx	r3
   8429c:	b130      	cbz	r0, 842ac <xQueueGenericSendFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
   8429e:	f1b9 0f00 	cmp.w	r9, #0
   842a2:	d005      	beq.n	842b0 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
   842a4:	2001      	movs	r0, #1
   842a6:	f8c9 0000 	str.w	r0, [r9]
   842aa:	e7c2      	b.n	84232 <xQueueGenericSendFromISR+0x3a>
			xReturn = pdPASS;
   842ac:	2001      	movs	r0, #1
   842ae:	e7c0      	b.n	84232 <xQueueGenericSendFromISR+0x3a>
   842b0:	2001      	movs	r0, #1
   842b2:	e7be      	b.n	84232 <xQueueGenericSendFromISR+0x3a>
   842b4:	00083cb1 	.word	0x00083cb1
   842b8:	0008a870 	.word	0x0008a870
   842bc:	00085a0d 	.word	0x00085a0d
   842c0:	00083db5 	.word	0x00083db5
   842c4:	00084fa1 	.word	0x00084fa1

000842c8 <xQueueGiveFromISR>:
{
   842c8:	b570      	push	{r4, r5, r6, lr}
   842ca:	460e      	mov	r6, r1
	configASSERT( pxQueue );
   842cc:	4604      	mov	r4, r0
   842ce:	b318      	cbz	r0, 84318 <xQueueGiveFromISR+0x50>
	configASSERT( pxQueue->uxItemSize == 0 );
   842d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   842d2:	bb3b      	cbnz	r3, 84324 <xQueueGiveFromISR+0x5c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   842d4:	6823      	ldr	r3, [r4, #0]
   842d6:	b35b      	cbz	r3, 84330 <xQueueGiveFromISR+0x68>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   842d8:	4b23      	ldr	r3, [pc, #140]	; (84368 <xQueueGiveFromISR+0xa0>)
   842da:	4798      	blx	r3
	__asm volatile
   842dc:	f3ef 8511 	mrs	r5, BASEPRI
   842e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   842e4:	f383 8811 	msr	BASEPRI, r3
   842e8:	f3bf 8f6f 	isb	sy
   842ec:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   842f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
   842f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   842f4:	429a      	cmp	r2, r3
   842f6:	d231      	bcs.n	8435c <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
   842f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   842fc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   842fe:	3201      	adds	r2, #1
   84300:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   84302:	f1b3 3fff 	cmp.w	r3, #4294967295
   84306:	d01c      	beq.n	84342 <xQueueGiveFromISR+0x7a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   84308:	3301      	adds	r3, #1
   8430a:	b25b      	sxtb	r3, r3
   8430c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   84310:	2001      	movs	r0, #1
	__asm volatile
   84312:	f385 8811 	msr	BASEPRI, r5
}
   84316:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
   84318:	f240 413f 	movw	r1, #1087	; 0x43f
   8431c:	4813      	ldr	r0, [pc, #76]	; (8436c <xQueueGiveFromISR+0xa4>)
   8431e:	4b14      	ldr	r3, [pc, #80]	; (84370 <xQueueGiveFromISR+0xa8>)
   84320:	4798      	blx	r3
   84322:	e7d5      	b.n	842d0 <xQueueGiveFromISR+0x8>
	configASSERT( pxQueue->uxItemSize == 0 );
   84324:	f240 4143 	movw	r1, #1091	; 0x443
   84328:	4810      	ldr	r0, [pc, #64]	; (8436c <xQueueGiveFromISR+0xa4>)
   8432a:	4b11      	ldr	r3, [pc, #68]	; (84370 <xQueueGiveFromISR+0xa8>)
   8432c:	4798      	blx	r3
   8432e:	e7d1      	b.n	842d4 <xQueueGiveFromISR+0xc>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   84330:	6863      	ldr	r3, [r4, #4]
   84332:	2b00      	cmp	r3, #0
   84334:	d0d0      	beq.n	842d8 <xQueueGiveFromISR+0x10>
   84336:	f44f 6189 	mov.w	r1, #1096	; 0x448
   8433a:	480c      	ldr	r0, [pc, #48]	; (8436c <xQueueGiveFromISR+0xa4>)
   8433c:	4b0c      	ldr	r3, [pc, #48]	; (84370 <xQueueGiveFromISR+0xa8>)
   8433e:	4798      	blx	r3
   84340:	e7ca      	b.n	842d8 <xQueueGiveFromISR+0x10>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   84342:	6a63      	ldr	r3, [r4, #36]	; 0x24
   84344:	b90b      	cbnz	r3, 8434a <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
   84346:	2001      	movs	r0, #1
   84348:	e7e3      	b.n	84312 <xQueueGiveFromISR+0x4a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8434a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8434e:	4b09      	ldr	r3, [pc, #36]	; (84374 <xQueueGiveFromISR+0xac>)
   84350:	4798      	blx	r3
   84352:	b128      	cbz	r0, 84360 <xQueueGiveFromISR+0x98>
							if( pxHigherPriorityTaskWoken != NULL )
   84354:	b136      	cbz	r6, 84364 <xQueueGiveFromISR+0x9c>
								*pxHigherPriorityTaskWoken = pdTRUE;
   84356:	2001      	movs	r0, #1
   84358:	6030      	str	r0, [r6, #0]
   8435a:	e7da      	b.n	84312 <xQueueGiveFromISR+0x4a>
			xReturn = errQUEUE_FULL;
   8435c:	2000      	movs	r0, #0
   8435e:	e7d8      	b.n	84312 <xQueueGiveFromISR+0x4a>
			xReturn = pdPASS;
   84360:	2001      	movs	r0, #1
   84362:	e7d6      	b.n	84312 <xQueueGiveFromISR+0x4a>
   84364:	2001      	movs	r0, #1
   84366:	e7d4      	b.n	84312 <xQueueGiveFromISR+0x4a>
   84368:	00083cb1 	.word	0x00083cb1
   8436c:	0008a870 	.word	0x0008a870
   84370:	00085a0d 	.word	0x00085a0d
   84374:	00084fa1 	.word	0x00084fa1

00084378 <xQueueReceive>:
{
   84378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8437c:	b084      	sub	sp, #16
   8437e:	4688      	mov	r8, r1
   84380:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   84382:	4604      	mov	r4, r0
   84384:	b198      	cbz	r0, 843ae <xQueueReceive+0x36>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   84386:	f1b8 0f00 	cmp.w	r8, #0
   8438a:	d016      	beq.n	843ba <xQueueReceive+0x42>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   8438c:	4b4d      	ldr	r3, [pc, #308]	; (844c4 <xQueueReceive+0x14c>)
   8438e:	4798      	blx	r3
   84390:	b930      	cbnz	r0, 843a0 <xQueueReceive+0x28>
   84392:	9b01      	ldr	r3, [sp, #4]
   84394:	b123      	cbz	r3, 843a0 <xQueueReceive+0x28>
   84396:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
   8439a:	484b      	ldr	r0, [pc, #300]	; (844c8 <xQueueReceive+0x150>)
   8439c:	4b4b      	ldr	r3, [pc, #300]	; (844cc <xQueueReceive+0x154>)
   8439e:	4798      	blx	r3
{
   843a0:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
   843a4:	4d4a      	ldr	r5, [pc, #296]	; (844d0 <xQueueReceive+0x158>)
					vTaskInternalSetTimeOutState( &xTimeOut );
   843a6:	4e4b      	ldr	r6, [pc, #300]	; (844d4 <xQueueReceive+0x15c>)
					portYIELD_WITHIN_API();
   843a8:	f8df 9138 	ldr.w	r9, [pc, #312]	; 844e4 <xQueueReceive+0x16c>
   843ac:	e044      	b.n	84438 <xQueueReceive+0xc0>
	configASSERT( ( pxQueue ) );
   843ae:	f240 41df 	movw	r1, #1247	; 0x4df
   843b2:	4845      	ldr	r0, [pc, #276]	; (844c8 <xQueueReceive+0x150>)
   843b4:	4b45      	ldr	r3, [pc, #276]	; (844cc <xQueueReceive+0x154>)
   843b6:	4798      	blx	r3
   843b8:	e7e5      	b.n	84386 <xQueueReceive+0xe>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   843ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
   843bc:	2b00      	cmp	r3, #0
   843be:	d0e5      	beq.n	8438c <xQueueReceive+0x14>
   843c0:	f240 41e3 	movw	r1, #1251	; 0x4e3
   843c4:	4840      	ldr	r0, [pc, #256]	; (844c8 <xQueueReceive+0x150>)
   843c6:	4b41      	ldr	r3, [pc, #260]	; (844cc <xQueueReceive+0x154>)
   843c8:	4798      	blx	r3
   843ca:	e7df      	b.n	8438c <xQueueReceive+0x14>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   843cc:	4641      	mov	r1, r8
   843ce:	4620      	mov	r0, r4
   843d0:	4b41      	ldr	r3, [pc, #260]	; (844d8 <xQueueReceive+0x160>)
   843d2:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   843d4:	1e7b      	subs	r3, r7, #1
   843d6:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   843d8:	6923      	ldr	r3, [r4, #16]
   843da:	b92b      	cbnz	r3, 843e8 <xQueueReceive+0x70>
				taskEXIT_CRITICAL();
   843dc:	4b3f      	ldr	r3, [pc, #252]	; (844dc <xQueueReceive+0x164>)
   843de:	4798      	blx	r3
				return pdPASS;
   843e0:	2001      	movs	r0, #1
}
   843e2:	b004      	add	sp, #16
   843e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   843e8:	f104 0010 	add.w	r0, r4, #16
   843ec:	4b3c      	ldr	r3, [pc, #240]	; (844e0 <xQueueReceive+0x168>)
   843ee:	4798      	blx	r3
   843f0:	2800      	cmp	r0, #0
   843f2:	d0f3      	beq.n	843dc <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
   843f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   843f8:	4b3a      	ldr	r3, [pc, #232]	; (844e4 <xQueueReceive+0x16c>)
   843fa:	601a      	str	r2, [r3, #0]
   843fc:	f3bf 8f4f 	dsb	sy
   84400:	f3bf 8f6f 	isb	sy
   84404:	e7ea      	b.n	843dc <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
   84406:	4b35      	ldr	r3, [pc, #212]	; (844dc <xQueueReceive+0x164>)
   84408:	4798      	blx	r3
					return errQUEUE_EMPTY;
   8440a:	2000      	movs	r0, #0
   8440c:	e7e9      	b.n	843e2 <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
   8440e:	a802      	add	r0, sp, #8
   84410:	47b0      	blx	r6
   84412:	e01b      	b.n	8444c <xQueueReceive+0xd4>
				prvUnlockQueue( pxQueue );
   84414:	4620      	mov	r0, r4
   84416:	4b34      	ldr	r3, [pc, #208]	; (844e8 <xQueueReceive+0x170>)
   84418:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8441a:	4b34      	ldr	r3, [pc, #208]	; (844ec <xQueueReceive+0x174>)
   8441c:	4798      	blx	r3
   8441e:	e009      	b.n	84434 <xQueueReceive+0xbc>
			prvUnlockQueue( pxQueue );
   84420:	4620      	mov	r0, r4
   84422:	4b31      	ldr	r3, [pc, #196]	; (844e8 <xQueueReceive+0x170>)
   84424:	4798      	blx	r3
			( void ) xTaskResumeAll();
   84426:	4b31      	ldr	r3, [pc, #196]	; (844ec <xQueueReceive+0x174>)
   84428:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8442a:	4620      	mov	r0, r4
   8442c:	4b30      	ldr	r3, [pc, #192]	; (844f0 <xQueueReceive+0x178>)
   8442e:	4798      	blx	r3
   84430:	2800      	cmp	r0, #0
   84432:	d144      	bne.n	844be <xQueueReceive+0x146>
   84434:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
   84438:	47a8      	blx	r5
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   8443a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   8443c:	2f00      	cmp	r7, #0
   8443e:	d1c5      	bne.n	843cc <xQueueReceive+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
   84440:	9b01      	ldr	r3, [sp, #4]
   84442:	2b00      	cmp	r3, #0
   84444:	d0df      	beq.n	84406 <xQueueReceive+0x8e>
				else if( xEntryTimeSet == pdFALSE )
   84446:	f1ba 0f00 	cmp.w	sl, #0
   8444a:	d0e0      	beq.n	8440e <xQueueReceive+0x96>
		taskEXIT_CRITICAL();
   8444c:	4b23      	ldr	r3, [pc, #140]	; (844dc <xQueueReceive+0x164>)
   8444e:	4798      	blx	r3
		vTaskSuspendAll();
   84450:	4b28      	ldr	r3, [pc, #160]	; (844f4 <xQueueReceive+0x17c>)
   84452:	4798      	blx	r3
		prvLockQueue( pxQueue );
   84454:	47a8      	blx	r5
   84456:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8445a:	b25b      	sxtb	r3, r3
   8445c:	f1b3 3fff 	cmp.w	r3, #4294967295
   84460:	bf04      	itt	eq
   84462:	2300      	moveq	r3, #0
   84464:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   84468:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   8446c:	b25b      	sxtb	r3, r3
   8446e:	f1b3 3fff 	cmp.w	r3, #4294967295
   84472:	bf04      	itt	eq
   84474:	2300      	moveq	r3, #0
   84476:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   8447a:	4b18      	ldr	r3, [pc, #96]	; (844dc <xQueueReceive+0x164>)
   8447c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8447e:	a901      	add	r1, sp, #4
   84480:	a802      	add	r0, sp, #8
   84482:	4b1d      	ldr	r3, [pc, #116]	; (844f8 <xQueueReceive+0x180>)
   84484:	4798      	blx	r3
   84486:	2800      	cmp	r0, #0
   84488:	d1ca      	bne.n	84420 <xQueueReceive+0xa8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8448a:	4620      	mov	r0, r4
   8448c:	4b18      	ldr	r3, [pc, #96]	; (844f0 <xQueueReceive+0x178>)
   8448e:	4798      	blx	r3
   84490:	2800      	cmp	r0, #0
   84492:	d0bf      	beq.n	84414 <xQueueReceive+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   84494:	9901      	ldr	r1, [sp, #4]
   84496:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8449a:	4b18      	ldr	r3, [pc, #96]	; (844fc <xQueueReceive+0x184>)
   8449c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8449e:	4620      	mov	r0, r4
   844a0:	4b11      	ldr	r3, [pc, #68]	; (844e8 <xQueueReceive+0x170>)
   844a2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   844a4:	4b11      	ldr	r3, [pc, #68]	; (844ec <xQueueReceive+0x174>)
   844a6:	4798      	blx	r3
   844a8:	2800      	cmp	r0, #0
   844aa:	d1c3      	bne.n	84434 <xQueueReceive+0xbc>
					portYIELD_WITHIN_API();
   844ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   844b0:	f8c9 3000 	str.w	r3, [r9]
   844b4:	f3bf 8f4f 	dsb	sy
   844b8:	f3bf 8f6f 	isb	sy
   844bc:	e7ba      	b.n	84434 <xQueueReceive+0xbc>
				return errQUEUE_EMPTY;
   844be:	2000      	movs	r0, #0
   844c0:	e78f      	b.n	843e2 <xQueueReceive+0x6a>
   844c2:	bf00      	nop
   844c4:	00085121 	.word	0x00085121
   844c8:	0008a870 	.word	0x0008a870
   844cc:	00085a0d 	.word	0x00085a0d
   844d0:	00083ab5 	.word	0x00083ab5
   844d4:	00085075 	.word	0x00085075
   844d8:	00083e35 	.word	0x00083e35
   844dc:	00083afd 	.word	0x00083afd
   844e0:	00084fa1 	.word	0x00084fa1
   844e4:	e000ed04 	.word	0xe000ed04
   844e8:	00083e5d 	.word	0x00083e5d
   844ec:	00084cb5 	.word	0x00084cb5
   844f0:	00083d95 	.word	0x00083d95
   844f4:	00084b49 	.word	0x00084b49
   844f8:	0008508d 	.word	0x0008508d
   844fc:	00084f19 	.word	0x00084f19

00084500 <xQueueSemaphoreTake>:
{
   84500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   84504:	b085      	sub	sp, #20
   84506:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
   84508:	4604      	mov	r4, r0
   8450a:	b198      	cbz	r0, 84534 <xQueueSemaphoreTake+0x34>
	configASSERT( pxQueue->uxItemSize == 0 );
   8450c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8450e:	b9bb      	cbnz	r3, 84540 <xQueueSemaphoreTake+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   84510:	4b61      	ldr	r3, [pc, #388]	; (84698 <xQueueSemaphoreTake+0x198>)
   84512:	4798      	blx	r3
   84514:	b930      	cbnz	r0, 84524 <xQueueSemaphoreTake+0x24>
   84516:	9b01      	ldr	r3, [sp, #4]
   84518:	b123      	cbz	r3, 84524 <xQueueSemaphoreTake+0x24>
   8451a:	f240 517a 	movw	r1, #1402	; 0x57a
   8451e:	485f      	ldr	r0, [pc, #380]	; (8469c <xQueueSemaphoreTake+0x19c>)
   84520:	4b5f      	ldr	r3, [pc, #380]	; (846a0 <xQueueSemaphoreTake+0x1a0>)
   84522:	4798      	blx	r3
{
   84524:	f04f 0900 	mov.w	r9, #0
   84528:	464e      	mov	r6, r9
		taskENTER_CRITICAL();
   8452a:	4d5e      	ldr	r5, [pc, #376]	; (846a4 <xQueueSemaphoreTake+0x1a4>)
					vTaskInternalSetTimeOutState( &xTimeOut );
   8452c:	4f5e      	ldr	r7, [pc, #376]	; (846a8 <xQueueSemaphoreTake+0x1a8>)
					portYIELD_WITHIN_API();
   8452e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 846b8 <xQueueSemaphoreTake+0x1b8>
   84532:	e056      	b.n	845e2 <xQueueSemaphoreTake+0xe2>
	configASSERT( ( pxQueue ) );
   84534:	f240 5171 	movw	r1, #1393	; 0x571
   84538:	4858      	ldr	r0, [pc, #352]	; (8469c <xQueueSemaphoreTake+0x19c>)
   8453a:	4b59      	ldr	r3, [pc, #356]	; (846a0 <xQueueSemaphoreTake+0x1a0>)
   8453c:	4798      	blx	r3
   8453e:	e7e5      	b.n	8450c <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
   84540:	f240 5175 	movw	r1, #1397	; 0x575
   84544:	4855      	ldr	r0, [pc, #340]	; (8469c <xQueueSemaphoreTake+0x19c>)
   84546:	4b56      	ldr	r3, [pc, #344]	; (846a0 <xQueueSemaphoreTake+0x1a0>)
   84548:	4798      	blx	r3
   8454a:	e7e1      	b.n	84510 <xQueueSemaphoreTake+0x10>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   8454c:	3b01      	subs	r3, #1
   8454e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   84550:	6823      	ldr	r3, [r4, #0]
   84552:	b14b      	cbz	r3, 84568 <xQueueSemaphoreTake+0x68>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   84554:	6923      	ldr	r3, [r4, #16]
   84556:	b95b      	cbnz	r3, 84570 <xQueueSemaphoreTake+0x70>
				taskEXIT_CRITICAL();
   84558:	4b54      	ldr	r3, [pc, #336]	; (846ac <xQueueSemaphoreTake+0x1ac>)
   8455a:	4798      	blx	r3
				return pdPASS;
   8455c:	f04f 0901 	mov.w	r9, #1
}
   84560:	4648      	mov	r0, r9
   84562:	b005      	add	sp, #20
   84564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   84568:	4b51      	ldr	r3, [pc, #324]	; (846b0 <xQueueSemaphoreTake+0x1b0>)
   8456a:	4798      	blx	r3
   8456c:	6060      	str	r0, [r4, #4]
   8456e:	e7f1      	b.n	84554 <xQueueSemaphoreTake+0x54>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   84570:	f104 0010 	add.w	r0, r4, #16
   84574:	4b4f      	ldr	r3, [pc, #316]	; (846b4 <xQueueSemaphoreTake+0x1b4>)
   84576:	4798      	blx	r3
   84578:	2800      	cmp	r0, #0
   8457a:	d0ed      	beq.n	84558 <xQueueSemaphoreTake+0x58>
						queueYIELD_IF_USING_PREEMPTION();
   8457c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   84580:	4b4d      	ldr	r3, [pc, #308]	; (846b8 <xQueueSemaphoreTake+0x1b8>)
   84582:	601a      	str	r2, [r3, #0]
   84584:	f3bf 8f4f 	dsb	sy
   84588:	f3bf 8f6f 	isb	sy
   8458c:	e7e4      	b.n	84558 <xQueueSemaphoreTake+0x58>
						configASSERT( xInheritanceOccurred == pdFALSE );
   8458e:	f1b9 0f00 	cmp.w	r9, #0
   84592:	d104      	bne.n	8459e <xQueueSemaphoreTake+0x9e>
					taskEXIT_CRITICAL();
   84594:	4b45      	ldr	r3, [pc, #276]	; (846ac <xQueueSemaphoreTake+0x1ac>)
   84596:	4798      	blx	r3
					return errQUEUE_EMPTY;
   84598:	f04f 0900 	mov.w	r9, #0
   8459c:	e7e0      	b.n	84560 <xQueueSemaphoreTake+0x60>
						configASSERT( xInheritanceOccurred == pdFALSE );
   8459e:	f240 51c2 	movw	r1, #1474	; 0x5c2
   845a2:	483e      	ldr	r0, [pc, #248]	; (8469c <xQueueSemaphoreTake+0x19c>)
   845a4:	4b3e      	ldr	r3, [pc, #248]	; (846a0 <xQueueSemaphoreTake+0x1a0>)
   845a6:	4798      	blx	r3
   845a8:	e7f4      	b.n	84594 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
   845aa:	a802      	add	r0, sp, #8
   845ac:	47b8      	blx	r7
   845ae:	e021      	b.n	845f4 <xQueueSemaphoreTake+0xf4>
						taskENTER_CRITICAL();
   845b0:	47a8      	blx	r5
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   845b2:	6860      	ldr	r0, [r4, #4]
   845b4:	4b41      	ldr	r3, [pc, #260]	; (846bc <xQueueSemaphoreTake+0x1bc>)
   845b6:	4798      	blx	r3
   845b8:	4681      	mov	r9, r0
						taskEXIT_CRITICAL();
   845ba:	4b3c      	ldr	r3, [pc, #240]	; (846ac <xQueueSemaphoreTake+0x1ac>)
   845bc:	4798      	blx	r3
   845be:	e040      	b.n	84642 <xQueueSemaphoreTake+0x142>
				prvUnlockQueue( pxQueue );
   845c0:	4620      	mov	r0, r4
   845c2:	4b3f      	ldr	r3, [pc, #252]	; (846c0 <xQueueSemaphoreTake+0x1c0>)
   845c4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   845c6:	4b3f      	ldr	r3, [pc, #252]	; (846c4 <xQueueSemaphoreTake+0x1c4>)
   845c8:	4798      	blx	r3
   845ca:	e009      	b.n	845e0 <xQueueSemaphoreTake+0xe0>
			prvUnlockQueue( pxQueue );
   845cc:	4620      	mov	r0, r4
   845ce:	4b3c      	ldr	r3, [pc, #240]	; (846c0 <xQueueSemaphoreTake+0x1c0>)
   845d0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   845d2:	4b3c      	ldr	r3, [pc, #240]	; (846c4 <xQueueSemaphoreTake+0x1c4>)
   845d4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   845d6:	4620      	mov	r0, r4
   845d8:	4b3b      	ldr	r3, [pc, #236]	; (846c8 <xQueueSemaphoreTake+0x1c8>)
   845da:	4798      	blx	r3
   845dc:	2800      	cmp	r0, #0
   845de:	d145      	bne.n	8466c <xQueueSemaphoreTake+0x16c>
   845e0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
   845e2:	47a8      	blx	r5
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   845e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   845e6:	2b00      	cmp	r3, #0
   845e8:	d1b0      	bne.n	8454c <xQueueSemaphoreTake+0x4c>
				if( xTicksToWait == ( TickType_t ) 0 )
   845ea:	9b01      	ldr	r3, [sp, #4]
   845ec:	2b00      	cmp	r3, #0
   845ee:	d0ce      	beq.n	8458e <xQueueSemaphoreTake+0x8e>
				else if( xEntryTimeSet == pdFALSE )
   845f0:	2e00      	cmp	r6, #0
   845f2:	d0da      	beq.n	845aa <xQueueSemaphoreTake+0xaa>
		taskEXIT_CRITICAL();
   845f4:	4b2d      	ldr	r3, [pc, #180]	; (846ac <xQueueSemaphoreTake+0x1ac>)
   845f6:	4798      	blx	r3
		vTaskSuspendAll();
   845f8:	4b34      	ldr	r3, [pc, #208]	; (846cc <xQueueSemaphoreTake+0x1cc>)
   845fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   845fc:	47a8      	blx	r5
   845fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   84602:	b25b      	sxtb	r3, r3
   84604:	f1b3 3fff 	cmp.w	r3, #4294967295
   84608:	bf04      	itt	eq
   8460a:	2300      	moveq	r3, #0
   8460c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   84610:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   84614:	b25b      	sxtb	r3, r3
   84616:	f1b3 3fff 	cmp.w	r3, #4294967295
   8461a:	bf04      	itt	eq
   8461c:	2300      	moveq	r3, #0
   8461e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   84622:	4b22      	ldr	r3, [pc, #136]	; (846ac <xQueueSemaphoreTake+0x1ac>)
   84624:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   84626:	a901      	add	r1, sp, #4
   84628:	a802      	add	r0, sp, #8
   8462a:	4b29      	ldr	r3, [pc, #164]	; (846d0 <xQueueSemaphoreTake+0x1d0>)
   8462c:	4798      	blx	r3
   8462e:	2800      	cmp	r0, #0
   84630:	d1cc      	bne.n	845cc <xQueueSemaphoreTake+0xcc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   84632:	4620      	mov	r0, r4
   84634:	4b24      	ldr	r3, [pc, #144]	; (846c8 <xQueueSemaphoreTake+0x1c8>)
   84636:	4798      	blx	r3
   84638:	2800      	cmp	r0, #0
   8463a:	d0c1      	beq.n	845c0 <xQueueSemaphoreTake+0xc0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8463c:	6823      	ldr	r3, [r4, #0]
   8463e:	2b00      	cmp	r3, #0
   84640:	d0b6      	beq.n	845b0 <xQueueSemaphoreTake+0xb0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   84642:	9901      	ldr	r1, [sp, #4]
   84644:	f104 0024 	add.w	r0, r4, #36	; 0x24
   84648:	4b22      	ldr	r3, [pc, #136]	; (846d4 <xQueueSemaphoreTake+0x1d4>)
   8464a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8464c:	4620      	mov	r0, r4
   8464e:	4b1c      	ldr	r3, [pc, #112]	; (846c0 <xQueueSemaphoreTake+0x1c0>)
   84650:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   84652:	4b1c      	ldr	r3, [pc, #112]	; (846c4 <xQueueSemaphoreTake+0x1c4>)
   84654:	4798      	blx	r3
   84656:	2800      	cmp	r0, #0
   84658:	d1c2      	bne.n	845e0 <xQueueSemaphoreTake+0xe0>
					portYIELD_WITHIN_API();
   8465a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8465e:	f8c8 3000 	str.w	r3, [r8]
   84662:	f3bf 8f4f 	dsb	sy
   84666:	f3bf 8f6f 	isb	sy
   8466a:	e7b9      	b.n	845e0 <xQueueSemaphoreTake+0xe0>
					if( xInheritanceOccurred != pdFALSE )
   8466c:	f1b9 0f00 	cmp.w	r9, #0
   84670:	f43f af76 	beq.w	84560 <xQueueSemaphoreTake+0x60>
						taskENTER_CRITICAL();
   84674:	4b0b      	ldr	r3, [pc, #44]	; (846a4 <xQueueSemaphoreTake+0x1a4>)
   84676:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   84678:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8467a:	b15b      	cbz	r3, 84694 <xQueueSemaphoreTake+0x194>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   8467c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8467e:	6819      	ldr	r1, [r3, #0]
   84680:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   84684:	6860      	ldr	r0, [r4, #4]
   84686:	4b14      	ldr	r3, [pc, #80]	; (846d8 <xQueueSemaphoreTake+0x1d8>)
   84688:	4798      	blx	r3
						taskEXIT_CRITICAL();
   8468a:	4b08      	ldr	r3, [pc, #32]	; (846ac <xQueueSemaphoreTake+0x1ac>)
   8468c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   8468e:	f04f 0900 	mov.w	r9, #0
   84692:	e765      	b.n	84560 <xQueueSemaphoreTake+0x60>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   84694:	2100      	movs	r1, #0
   84696:	e7f5      	b.n	84684 <xQueueSemaphoreTake+0x184>
   84698:	00085121 	.word	0x00085121
   8469c:	0008a870 	.word	0x0008a870
   846a0:	00085a0d 	.word	0x00085a0d
   846a4:	00083ab5 	.word	0x00083ab5
   846a8:	00085075 	.word	0x00085075
   846ac:	00083afd 	.word	0x00083afd
   846b0:	00085385 	.word	0x00085385
   846b4:	00084fa1 	.word	0x00084fa1
   846b8:	e000ed04 	.word	0xe000ed04
   846bc:	00085141 	.word	0x00085141
   846c0:	00083e5d 	.word	0x00083e5d
   846c4:	00084cb5 	.word	0x00084cb5
   846c8:	00083d95 	.word	0x00083d95
   846cc:	00084b49 	.word	0x00084b49
   846d0:	0008508d 	.word	0x0008508d
   846d4:	00084f19 	.word	0x00084f19
   846d8:	000852b9 	.word	0x000852b9

000846dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
   846dc:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
   846de:	4b0a      	ldr	r3, [pc, #40]	; (84708 <vQueueAddToRegistry+0x2c>)
   846e0:	681b      	ldr	r3, [r3, #0]
   846e2:	b14b      	cbz	r3, 846f8 <vQueueAddToRegistry+0x1c>
   846e4:	2301      	movs	r3, #1
   846e6:	4c08      	ldr	r4, [pc, #32]	; (84708 <vQueueAddToRegistry+0x2c>)
   846e8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   846ec:	b12a      	cbz	r2, 846fa <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   846ee:	3301      	adds	r3, #1
   846f0:	2b08      	cmp	r3, #8
   846f2:	d1f9      	bne.n	846e8 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   846f4:	bc10      	pop	{r4}
   846f6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
   846f8:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
   846fa:	4a03      	ldr	r2, [pc, #12]	; (84708 <vQueueAddToRegistry+0x2c>)
   846fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
   84700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   84704:	6058      	str	r0, [r3, #4]
				break;
   84706:	e7f5      	b.n	846f4 <vQueueAddToRegistry+0x18>
   84708:	20075924 	.word	0x20075924

0008470c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   8470c:	b570      	push	{r4, r5, r6, lr}
   8470e:	4604      	mov	r4, r0
   84710:	460d      	mov	r5, r1
   84712:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   84714:	4b11      	ldr	r3, [pc, #68]	; (8475c <vQueueWaitForMessageRestricted+0x50>)
   84716:	4798      	blx	r3
   84718:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   8471c:	b25b      	sxtb	r3, r3
   8471e:	f1b3 3fff 	cmp.w	r3, #4294967295
   84722:	bf04      	itt	eq
   84724:	2300      	moveq	r3, #0
   84726:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   8472a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   8472e:	b25b      	sxtb	r3, r3
   84730:	f1b3 3fff 	cmp.w	r3, #4294967295
   84734:	bf04      	itt	eq
   84736:	2300      	moveq	r3, #0
   84738:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   8473c:	4b08      	ldr	r3, [pc, #32]	; (84760 <vQueueWaitForMessageRestricted+0x54>)
   8473e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   84740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   84742:	b11b      	cbz	r3, 8474c <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   84744:	4620      	mov	r0, r4
   84746:	4b07      	ldr	r3, [pc, #28]	; (84764 <vQueueWaitForMessageRestricted+0x58>)
   84748:	4798      	blx	r3
   8474a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   8474c:	4632      	mov	r2, r6
   8474e:	4629      	mov	r1, r5
   84750:	f104 0024 	add.w	r0, r4, #36	; 0x24
   84754:	4b04      	ldr	r3, [pc, #16]	; (84768 <vQueueWaitForMessageRestricted+0x5c>)
   84756:	4798      	blx	r3
   84758:	e7f4      	b.n	84744 <vQueueWaitForMessageRestricted+0x38>
   8475a:	bf00      	nop
   8475c:	00083ab5 	.word	0x00083ab5
   84760:	00083afd 	.word	0x00083afd
   84764:	00083e5d 	.word	0x00083e5d
   84768:	00084f59 	.word	0x00084f59

0008476c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8476c:	4b08      	ldr	r3, [pc, #32]	; (84790 <prvResetNextTaskUnblockTime+0x24>)
   8476e:	681b      	ldr	r3, [r3, #0]
   84770:	681b      	ldr	r3, [r3, #0]
   84772:	b13b      	cbz	r3, 84784 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84774:	4b06      	ldr	r3, [pc, #24]	; (84790 <prvResetNextTaskUnblockTime+0x24>)
   84776:	681b      	ldr	r3, [r3, #0]
   84778:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   8477a:	68db      	ldr	r3, [r3, #12]
   8477c:	685a      	ldr	r2, [r3, #4]
   8477e:	4b05      	ldr	r3, [pc, #20]	; (84794 <prvResetNextTaskUnblockTime+0x28>)
   84780:	601a      	str	r2, [r3, #0]
   84782:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   84784:	f04f 32ff 	mov.w	r2, #4294967295
   84788:	4b02      	ldr	r3, [pc, #8]	; (84794 <prvResetNextTaskUnblockTime+0x28>)
   8478a:	601a      	str	r2, [r3, #0]
   8478c:	4770      	bx	lr
   8478e:	bf00      	nop
   84790:	20075784 	.word	0x20075784
   84794:	20075838 	.word	0x20075838

00084798 <prvIdleTask>:
{
   84798:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   8479a:	4d16      	ldr	r5, [pc, #88]	; (847f4 <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
   8479c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8480c <prvIdleTask+0x74>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   847a0:	4f15      	ldr	r7, [pc, #84]	; (847f8 <prvIdleTask+0x60>)
				taskYIELD();
   847a2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 84810 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   847a6:	682b      	ldr	r3, [r5, #0]
   847a8:	b1bb      	cbz	r3, 847da <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   847aa:	4e14      	ldr	r6, [pc, #80]	; (847fc <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
   847ac:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   847ae:	68fb      	ldr	r3, [r7, #12]
   847b0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   847b2:	1d20      	adds	r0, r4, #4
   847b4:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
   847b6:	4a12      	ldr	r2, [pc, #72]	; (84800 <prvIdleTask+0x68>)
   847b8:	6813      	ldr	r3, [r2, #0]
   847ba:	3b01      	subs	r3, #1
   847bc:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   847be:	682b      	ldr	r3, [r5, #0]
   847c0:	3b01      	subs	r3, #1
   847c2:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
   847c4:	4b0f      	ldr	r3, [pc, #60]	; (84804 <prvIdleTask+0x6c>)
   847c6:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   847c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   847ca:	f8df a048 	ldr.w	sl, [pc, #72]	; 84814 <prvIdleTask+0x7c>
   847ce:	47d0      	blx	sl
			vPortFree( pxTCB );
   847d0:	4620      	mov	r0, r4
   847d2:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   847d4:	682b      	ldr	r3, [r5, #0]
   847d6:	2b00      	cmp	r3, #0
   847d8:	d1e8      	bne.n	847ac <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   847da:	4b0b      	ldr	r3, [pc, #44]	; (84808 <prvIdleTask+0x70>)
   847dc:	681b      	ldr	r3, [r3, #0]
   847de:	2b01      	cmp	r3, #1
   847e0:	d9e1      	bls.n	847a6 <prvIdleTask+0xe>
				taskYIELD();
   847e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   847e6:	f8c9 3000 	str.w	r3, [r9]
   847ea:	f3bf 8f4f 	dsb	sy
   847ee:	f3bf 8f6f 	isb	sy
   847f2:	e7d8      	b.n	847a6 <prvIdleTask+0xe>
   847f4:	200757f8 	.word	0x200757f8
   847f8:	2007586c 	.word	0x2007586c
   847fc:	000839d5 	.word	0x000839d5
   84800:	200757f4 	.word	0x200757f4
   84804:	00083afd 	.word	0x00083afd
   84808:	2007578c 	.word	0x2007578c
   8480c:	00083ab5 	.word	0x00083ab5
   84810:	e000ed04 	.word	0xe000ed04
   84814:	00083d7d 	.word	0x00083d7d

00084818 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   84818:	b570      	push	{r4, r5, r6, lr}
   8481a:	4604      	mov	r4, r0
   8481c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   8481e:	4b1d      	ldr	r3, [pc, #116]	; (84894 <prvAddCurrentTaskToDelayedList+0x7c>)
   84820:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   84822:	4b1d      	ldr	r3, [pc, #116]	; (84898 <prvAddCurrentTaskToDelayedList+0x80>)
   84824:	6818      	ldr	r0, [r3, #0]
   84826:	3004      	adds	r0, #4
   84828:	4b1c      	ldr	r3, [pc, #112]	; (8489c <prvAddCurrentTaskToDelayedList+0x84>)
   8482a:	4798      	blx	r3
   8482c:	b948      	cbnz	r0, 84842 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8482e:	4b1a      	ldr	r3, [pc, #104]	; (84898 <prvAddCurrentTaskToDelayedList+0x80>)
   84830:	681a      	ldr	r2, [r3, #0]
   84832:	491b      	ldr	r1, [pc, #108]	; (848a0 <prvAddCurrentTaskToDelayedList+0x88>)
   84834:	680b      	ldr	r3, [r1, #0]
   84836:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   84838:	2201      	movs	r2, #1
   8483a:	4082      	lsls	r2, r0
   8483c:	ea23 0302 	bic.w	r3, r3, r2
   84840:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   84842:	f1b4 3fff 	cmp.w	r4, #4294967295
   84846:	d013      	beq.n	84870 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   84848:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   8484a:	4b13      	ldr	r3, [pc, #76]	; (84898 <prvAddCurrentTaskToDelayedList+0x80>)
   8484c:	681b      	ldr	r3, [r3, #0]
   8484e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   84850:	42a5      	cmp	r5, r4
   84852:	d816      	bhi.n	84882 <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   84854:	4b13      	ldr	r3, [pc, #76]	; (848a4 <prvAddCurrentTaskToDelayedList+0x8c>)
   84856:	6818      	ldr	r0, [r3, #0]
   84858:	4b0f      	ldr	r3, [pc, #60]	; (84898 <prvAddCurrentTaskToDelayedList+0x80>)
   8485a:	6819      	ldr	r1, [r3, #0]
   8485c:	3104      	adds	r1, #4
   8485e:	4b12      	ldr	r3, [pc, #72]	; (848a8 <prvAddCurrentTaskToDelayedList+0x90>)
   84860:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   84862:	4b12      	ldr	r3, [pc, #72]	; (848ac <prvAddCurrentTaskToDelayedList+0x94>)
   84864:	681b      	ldr	r3, [r3, #0]
   84866:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
   84868:	bf3c      	itt	cc
   8486a:	4b10      	ldrcc	r3, [pc, #64]	; (848ac <prvAddCurrentTaskToDelayedList+0x94>)
   8486c:	601c      	strcc	r4, [r3, #0]
   8486e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   84870:	2e00      	cmp	r6, #0
   84872:	d0e9      	beq.n	84848 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   84874:	4b08      	ldr	r3, [pc, #32]	; (84898 <prvAddCurrentTaskToDelayedList+0x80>)
   84876:	6819      	ldr	r1, [r3, #0]
   84878:	3104      	adds	r1, #4
   8487a:	480d      	ldr	r0, [pc, #52]	; (848b0 <prvAddCurrentTaskToDelayedList+0x98>)
   8487c:	4b0d      	ldr	r3, [pc, #52]	; (848b4 <prvAddCurrentTaskToDelayedList+0x9c>)
   8487e:	4798      	blx	r3
   84880:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   84882:	4b0d      	ldr	r3, [pc, #52]	; (848b8 <prvAddCurrentTaskToDelayedList+0xa0>)
   84884:	6818      	ldr	r0, [r3, #0]
   84886:	4b04      	ldr	r3, [pc, #16]	; (84898 <prvAddCurrentTaskToDelayedList+0x80>)
   84888:	6819      	ldr	r1, [r3, #0]
   8488a:	3104      	adds	r1, #4
   8488c:	4b06      	ldr	r3, [pc, #24]	; (848a8 <prvAddCurrentTaskToDelayedList+0x90>)
   8488e:	4798      	blx	r3
   84890:	bd70      	pop	{r4, r5, r6, pc}
   84892:	bf00      	nop
   84894:	20075880 	.word	0x20075880
   84898:	20075780 	.word	0x20075780
   8489c:	000839d5 	.word	0x000839d5
   848a0:	20075808 	.word	0x20075808
   848a4:	20075784 	.word	0x20075784
   848a8:	000839a1 	.word	0x000839a1
   848ac:	20075838 	.word	0x20075838
   848b0:	20075858 	.word	0x20075858
   848b4:	00083989 	.word	0x00083989
   848b8:	20075788 	.word	0x20075788

000848bc <xTaskCreate>:
	{
   848bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   848c0:	b083      	sub	sp, #12
   848c2:	4683      	mov	fp, r0
   848c4:	460d      	mov	r5, r1
   848c6:	9301      	str	r3, [sp, #4]
   848c8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   848cc:	0096      	lsls	r6, r2, #2
   848ce:	4630      	mov	r0, r6
   848d0:	4b60      	ldr	r3, [pc, #384]	; (84a54 <xTaskCreate+0x198>)
   848d2:	4798      	blx	r3
			if( pxStack != NULL )
   848d4:	2800      	cmp	r0, #0
   848d6:	f000 808e 	beq.w	849f6 <xTaskCreate+0x13a>
   848da:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   848dc:	205c      	movs	r0, #92	; 0x5c
   848de:	4b5d      	ldr	r3, [pc, #372]	; (84a54 <xTaskCreate+0x198>)
   848e0:	4798      	blx	r3
				if( pxNewTCB != NULL )
   848e2:	4604      	mov	r4, r0
   848e4:	2800      	cmp	r0, #0
   848e6:	f000 8083 	beq.w	849f0 <xTaskCreate+0x134>
					pxNewTCB->pxStack = pxStack;
   848ea:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   848ec:	4632      	mov	r2, r6
   848ee:	21a5      	movs	r1, #165	; 0xa5
   848f0:	4638      	mov	r0, r7
   848f2:	4b59      	ldr	r3, [pc, #356]	; (84a58 <xTaskCreate+0x19c>)
   848f4:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   848f6:	3e04      	subs	r6, #4
   848f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   848fa:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   848fc:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   84900:	782b      	ldrb	r3, [r5, #0]
   84902:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
   84906:	782b      	ldrb	r3, [r5, #0]
   84908:	b163      	cbz	r3, 84924 <xTaskCreate+0x68>
   8490a:	462b      	mov	r3, r5
   8490c:	f104 0234 	add.w	r2, r4, #52	; 0x34
   84910:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   84914:	7858      	ldrb	r0, [r3, #1]
   84916:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
   8491a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   8491e:	b108      	cbz	r0, 84924 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84920:	428b      	cmp	r3, r1
   84922:	d1f7      	bne.n	84914 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   84924:	2700      	movs	r7, #0
   84926:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
   8492a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8492c:	2d04      	cmp	r5, #4
   8492e:	bf28      	it	cs
   84930:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
   84932:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   84934:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
   84936:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   84938:	f104 0804 	add.w	r8, r4, #4
   8493c:	4640      	mov	r0, r8
   8493e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 84aac <xTaskCreate+0x1f0>
   84942:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   84944:	f104 0018 	add.w	r0, r4, #24
   84948:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   8494a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8494c:	f1c5 0505 	rsb	r5, r5, #5
   84950:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   84952:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
   84954:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ulNotifiedValue = 0;
   84956:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   84958:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8495c:	9a01      	ldr	r2, [sp, #4]
   8495e:	4659      	mov	r1, fp
   84960:	4630      	mov	r0, r6
   84962:	4b3e      	ldr	r3, [pc, #248]	; (84a5c <xTaskCreate+0x1a0>)
   84964:	4798      	blx	r3
   84966:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   84968:	f1ba 0f00 	cmp.w	sl, #0
   8496c:	d001      	beq.n	84972 <xTaskCreate+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   8496e:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
   84972:	4b3b      	ldr	r3, [pc, #236]	; (84a60 <xTaskCreate+0x1a4>)
   84974:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   84976:	4a3b      	ldr	r2, [pc, #236]	; (84a64 <xTaskCreate+0x1a8>)
   84978:	6813      	ldr	r3, [r2, #0]
   8497a:	3301      	adds	r3, #1
   8497c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   8497e:	4b3a      	ldr	r3, [pc, #232]	; (84a68 <xTaskCreate+0x1ac>)
   84980:	681b      	ldr	r3, [r3, #0]
   84982:	2b00      	cmp	r3, #0
   84984:	d03a      	beq.n	849fc <xTaskCreate+0x140>
			if( xSchedulerRunning == pdFALSE )
   84986:	4b39      	ldr	r3, [pc, #228]	; (84a6c <xTaskCreate+0x1b0>)
   84988:	681b      	ldr	r3, [r3, #0]
   8498a:	b93b      	cbnz	r3, 8499c <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   8498c:	4b36      	ldr	r3, [pc, #216]	; (84a68 <xTaskCreate+0x1ac>)
   8498e:	681b      	ldr	r3, [r3, #0]
   84990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84994:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
   84996:	bf9c      	itt	ls
   84998:	4b33      	ldrls	r3, [pc, #204]	; (84a68 <xTaskCreate+0x1ac>)
   8499a:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
   8499c:	4a34      	ldr	r2, [pc, #208]	; (84a70 <xTaskCreate+0x1b4>)
   8499e:	6813      	ldr	r3, [r2, #0]
   849a0:	3301      	adds	r3, #1
   849a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   849a4:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
   849a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   849a8:	4a32      	ldr	r2, [pc, #200]	; (84a74 <xTaskCreate+0x1b8>)
   849aa:	6811      	ldr	r1, [r2, #0]
   849ac:	2301      	movs	r3, #1
   849ae:	4083      	lsls	r3, r0
   849b0:	430b      	orrs	r3, r1
   849b2:	6013      	str	r3, [r2, #0]
   849b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   849b8:	4641      	mov	r1, r8
   849ba:	4b2f      	ldr	r3, [pc, #188]	; (84a78 <xTaskCreate+0x1bc>)
   849bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   849c0:	4b2e      	ldr	r3, [pc, #184]	; (84a7c <xTaskCreate+0x1c0>)
   849c2:	4798      	blx	r3
	taskEXIT_CRITICAL();
   849c4:	4b2e      	ldr	r3, [pc, #184]	; (84a80 <xTaskCreate+0x1c4>)
   849c6:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   849c8:	4b28      	ldr	r3, [pc, #160]	; (84a6c <xTaskCreate+0x1b0>)
   849ca:	681b      	ldr	r3, [r3, #0]
   849cc:	2b00      	cmp	r3, #0
   849ce:	d03b      	beq.n	84a48 <xTaskCreate+0x18c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   849d0:	4b25      	ldr	r3, [pc, #148]	; (84a68 <xTaskCreate+0x1ac>)
   849d2:	681b      	ldr	r3, [r3, #0]
   849d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   849d8:	429a      	cmp	r2, r3
   849da:	d239      	bcs.n	84a50 <xTaskCreate+0x194>
			taskYIELD_IF_USING_PREEMPTION();
   849dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   849e0:	4b28      	ldr	r3, [pc, #160]	; (84a84 <xTaskCreate+0x1c8>)
   849e2:	601a      	str	r2, [r3, #0]
   849e4:	f3bf 8f4f 	dsb	sy
   849e8:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   849ec:	2001      	movs	r0, #1
   849ee:	e02c      	b.n	84a4a <xTaskCreate+0x18e>
					vPortFree( pxStack );
   849f0:	4638      	mov	r0, r7
   849f2:	4b25      	ldr	r3, [pc, #148]	; (84a88 <xTaskCreate+0x1cc>)
   849f4:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   849f6:	f04f 30ff 	mov.w	r0, #4294967295
   849fa:	e026      	b.n	84a4a <xTaskCreate+0x18e>
			pxCurrentTCB = pxNewTCB;
   849fc:	4b1a      	ldr	r3, [pc, #104]	; (84a68 <xTaskCreate+0x1ac>)
   849fe:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   84a00:	6813      	ldr	r3, [r2, #0]
   84a02:	2b01      	cmp	r3, #1
   84a04:	d1ca      	bne.n	8499c <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   84a06:	4e1c      	ldr	r6, [pc, #112]	; (84a78 <xTaskCreate+0x1bc>)
   84a08:	4630      	mov	r0, r6
   84a0a:	4d20      	ldr	r5, [pc, #128]	; (84a8c <xTaskCreate+0x1d0>)
   84a0c:	47a8      	blx	r5
   84a0e:	f106 0014 	add.w	r0, r6, #20
   84a12:	47a8      	blx	r5
   84a14:	f106 0028 	add.w	r0, r6, #40	; 0x28
   84a18:	47a8      	blx	r5
   84a1a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   84a1e:	47a8      	blx	r5
   84a20:	f106 0050 	add.w	r0, r6, #80	; 0x50
   84a24:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   84a26:	4f1a      	ldr	r7, [pc, #104]	; (84a90 <xTaskCreate+0x1d4>)
   84a28:	4638      	mov	r0, r7
   84a2a:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   84a2c:	4e19      	ldr	r6, [pc, #100]	; (84a94 <xTaskCreate+0x1d8>)
   84a2e:	4630      	mov	r0, r6
   84a30:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   84a32:	4819      	ldr	r0, [pc, #100]	; (84a98 <xTaskCreate+0x1dc>)
   84a34:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   84a36:	4819      	ldr	r0, [pc, #100]	; (84a9c <xTaskCreate+0x1e0>)
   84a38:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   84a3a:	4819      	ldr	r0, [pc, #100]	; (84aa0 <xTaskCreate+0x1e4>)
   84a3c:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   84a3e:	4b19      	ldr	r3, [pc, #100]	; (84aa4 <xTaskCreate+0x1e8>)
   84a40:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   84a42:	4b19      	ldr	r3, [pc, #100]	; (84aa8 <xTaskCreate+0x1ec>)
   84a44:	601e      	str	r6, [r3, #0]
   84a46:	e7a9      	b.n	8499c <xTaskCreate+0xe0>
			xReturn = pdPASS;
   84a48:	2001      	movs	r0, #1
	}
   84a4a:	b003      	add	sp, #12
   84a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   84a50:	2001      	movs	r0, #1
		return xReturn;
   84a52:	e7fa      	b.n	84a4a <xTaskCreate+0x18e>
   84a54:	00083d0d 	.word	0x00083d0d
   84a58:	00085d49 	.word	0x00085d49
   84a5c:	00083a61 	.word	0x00083a61
   84a60:	00083ab5 	.word	0x00083ab5
   84a64:	200757f4 	.word	0x200757f4
   84a68:	20075780 	.word	0x20075780
   84a6c:	20075854 	.word	0x20075854
   84a70:	20075804 	.word	0x20075804
   84a74:	20075808 	.word	0x20075808
   84a78:	2007578c 	.word	0x2007578c
   84a7c:	00083989 	.word	0x00083989
   84a80:	00083afd 	.word	0x00083afd
   84a84:	e000ed04 	.word	0xe000ed04
   84a88:	00083d7d 	.word	0x00083d7d
   84a8c:	0008396d 	.word	0x0008396d
   84a90:	2007580c 	.word	0x2007580c
   84a94:	20075820 	.word	0x20075820
   84a98:	20075840 	.word	0x20075840
   84a9c:	2007586c 	.word	0x2007586c
   84aa0:	20075858 	.word	0x20075858
   84aa4:	20075784 	.word	0x20075784
   84aa8:	20075788 	.word	0x20075788
   84aac:	00083983 	.word	0x00083983

00084ab0 <vTaskStartScheduler>:
{
   84ab0:	b510      	push	{r4, lr}
   84ab2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   84ab4:	4b18      	ldr	r3, [pc, #96]	; (84b18 <vTaskStartScheduler+0x68>)
   84ab6:	9301      	str	r3, [sp, #4]
   84ab8:	2300      	movs	r3, #0
   84aba:	9300      	str	r3, [sp, #0]
   84abc:	22a0      	movs	r2, #160	; 0xa0
   84abe:	4917      	ldr	r1, [pc, #92]	; (84b1c <vTaskStartScheduler+0x6c>)
   84ac0:	4817      	ldr	r0, [pc, #92]	; (84b20 <vTaskStartScheduler+0x70>)
   84ac2:	4c18      	ldr	r4, [pc, #96]	; (84b24 <vTaskStartScheduler+0x74>)
   84ac4:	47a0      	blx	r4
		if( xReturn == pdPASS )
   84ac6:	2801      	cmp	r0, #1
   84ac8:	d004      	beq.n	84ad4 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   84aca:	f1b0 3fff 	cmp.w	r0, #4294967295
   84ace:	d01c      	beq.n	84b0a <vTaskStartScheduler+0x5a>
}
   84ad0:	b002      	add	sp, #8
   84ad2:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   84ad4:	4b14      	ldr	r3, [pc, #80]	; (84b28 <vTaskStartScheduler+0x78>)
   84ad6:	4798      	blx	r3
	if( xReturn == pdPASS )
   84ad8:	2801      	cmp	r0, #1
   84ada:	d1f6      	bne.n	84aca <vTaskStartScheduler+0x1a>
	__asm volatile
   84adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   84ae0:	f383 8811 	msr	BASEPRI, r3
   84ae4:	f3bf 8f6f 	isb	sy
   84ae8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   84aec:	f04f 32ff 	mov.w	r2, #4294967295
   84af0:	4b0e      	ldr	r3, [pc, #56]	; (84b2c <vTaskStartScheduler+0x7c>)
   84af2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   84af4:	2201      	movs	r2, #1
   84af6:	4b0e      	ldr	r3, [pc, #56]	; (84b30 <vTaskStartScheduler+0x80>)
   84af8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   84afa:	2200      	movs	r2, #0
   84afc:	4b0d      	ldr	r3, [pc, #52]	; (84b34 <vTaskStartScheduler+0x84>)
   84afe:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
   84b00:	4b0d      	ldr	r3, [pc, #52]	; (84b38 <vTaskStartScheduler+0x88>)
   84b02:	4798      	blx	r3
		if( xPortStartScheduler() != pdFALSE )
   84b04:	4b0d      	ldr	r3, [pc, #52]	; (84b3c <vTaskStartScheduler+0x8c>)
   84b06:	4798      	blx	r3
   84b08:	e7e2      	b.n	84ad0 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   84b0a:	f240 71dc 	movw	r1, #2012	; 0x7dc
   84b0e:	480c      	ldr	r0, [pc, #48]	; (84b40 <vTaskStartScheduler+0x90>)
   84b10:	4b0c      	ldr	r3, [pc, #48]	; (84b44 <vTaskStartScheduler+0x94>)
   84b12:	4798      	blx	r3
}
   84b14:	e7dc      	b.n	84ad0 <vTaskStartScheduler+0x20>
   84b16:	bf00      	nop
   84b18:	20075834 	.word	0x20075834
   84b1c:	0008a8f0 	.word	0x0008a8f0
   84b20:	00084799 	.word	0x00084799
   84b24:	000848bd 	.word	0x000848bd
   84b28:	0008545d 	.word	0x0008545d
   84b2c:	20075838 	.word	0x20075838
   84b30:	20075854 	.word	0x20075854
   84b34:	20075880 	.word	0x20075880
   84b38:	00085b9d 	.word	0x00085b9d
   84b3c:	00083bcd 	.word	0x00083bcd
   84b40:	0008a8b0 	.word	0x0008a8b0
   84b44:	00085a0d 	.word	0x00085a0d

00084b48 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   84b48:	4a02      	ldr	r2, [pc, #8]	; (84b54 <vTaskSuspendAll+0xc>)
   84b4a:	6813      	ldr	r3, [r2, #0]
   84b4c:	3301      	adds	r3, #1
   84b4e:	6013      	str	r3, [r2, #0]
   84b50:	4770      	bx	lr
   84b52:	bf00      	nop
   84b54:	20075800 	.word	0x20075800

00084b58 <xTaskGetTickCount>:
		xTicks = xTickCount;
   84b58:	4b01      	ldr	r3, [pc, #4]	; (84b60 <xTaskGetTickCount+0x8>)
   84b5a:	6818      	ldr	r0, [r3, #0]
}
   84b5c:	4770      	bx	lr
   84b5e:	bf00      	nop
   84b60:	20075880 	.word	0x20075880

00084b64 <xTaskGetTickCountFromISR>:
{
   84b64:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   84b66:	4b02      	ldr	r3, [pc, #8]	; (84b70 <xTaskGetTickCountFromISR+0xc>)
   84b68:	4798      	blx	r3
		xReturn = xTickCount;
   84b6a:	4b02      	ldr	r3, [pc, #8]	; (84b74 <xTaskGetTickCountFromISR+0x10>)
   84b6c:	6818      	ldr	r0, [r3, #0]
}
   84b6e:	bd08      	pop	{r3, pc}
   84b70:	00083cb1 	.word	0x00083cb1
   84b74:	20075880 	.word	0x20075880

00084b78 <xTaskIncrementTick>:
{
   84b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84b7c:	4b3d      	ldr	r3, [pc, #244]	; (84c74 <xTaskIncrementTick+0xfc>)
   84b7e:	681b      	ldr	r3, [r3, #0]
   84b80:	2b00      	cmp	r3, #0
   84b82:	d170      	bne.n	84c66 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   84b84:	4b3c      	ldr	r3, [pc, #240]	; (84c78 <xTaskIncrementTick+0x100>)
   84b86:	681a      	ldr	r2, [r3, #0]
   84b88:	f102 0801 	add.w	r8, r2, #1
		xTickCount = xConstTickCount;
   84b8c:	f8c3 8000 	str.w	r8, [r3]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   84b90:	f1b8 0f00 	cmp.w	r8, #0
   84b94:	d10f      	bne.n	84bb6 <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
   84b96:	4b39      	ldr	r3, [pc, #228]	; (84c7c <xTaskIncrementTick+0x104>)
   84b98:	681b      	ldr	r3, [r3, #0]
   84b9a:	681b      	ldr	r3, [r3, #0]
   84b9c:	bb1b      	cbnz	r3, 84be6 <xTaskIncrementTick+0x6e>
   84b9e:	4a37      	ldr	r2, [pc, #220]	; (84c7c <xTaskIncrementTick+0x104>)
   84ba0:	6811      	ldr	r1, [r2, #0]
   84ba2:	4b37      	ldr	r3, [pc, #220]	; (84c80 <xTaskIncrementTick+0x108>)
   84ba4:	6818      	ldr	r0, [r3, #0]
   84ba6:	6010      	str	r0, [r2, #0]
   84ba8:	6019      	str	r1, [r3, #0]
   84baa:	4a36      	ldr	r2, [pc, #216]	; (84c84 <xTaskIncrementTick+0x10c>)
   84bac:	6813      	ldr	r3, [r2, #0]
   84bae:	3301      	adds	r3, #1
   84bb0:	6013      	str	r3, [r2, #0]
   84bb2:	4b35      	ldr	r3, [pc, #212]	; (84c88 <xTaskIncrementTick+0x110>)
   84bb4:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   84bb6:	4b35      	ldr	r3, [pc, #212]	; (84c8c <xTaskIncrementTick+0x114>)
   84bb8:	681b      	ldr	r3, [r3, #0]
   84bba:	4598      	cmp	r8, r3
   84bbc:	d219      	bcs.n	84bf2 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
   84bbe:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   84bc0:	4b33      	ldr	r3, [pc, #204]	; (84c90 <xTaskIncrementTick+0x118>)
   84bc2:	681b      	ldr	r3, [r3, #0]
   84bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84bc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   84bca:	009b      	lsls	r3, r3, #2
   84bcc:	4a31      	ldr	r2, [pc, #196]	; (84c94 <xTaskIncrementTick+0x11c>)
   84bce:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
   84bd0:	2b02      	cmp	r3, #2
   84bd2:	bf28      	it	cs
   84bd4:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
   84bd6:	4b30      	ldr	r3, [pc, #192]	; (84c98 <xTaskIncrementTick+0x120>)
   84bd8:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   84bda:	2b00      	cmp	r3, #0
}
   84bdc:	bf0c      	ite	eq
   84bde:	4628      	moveq	r0, r5
   84be0:	2001      	movne	r0, #1
   84be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			taskSWITCH_DELAYED_LISTS();
   84be6:	f640 2133 	movw	r1, #2611	; 0xa33
   84bea:	482c      	ldr	r0, [pc, #176]	; (84c9c <xTaskIncrementTick+0x124>)
   84bec:	4b2c      	ldr	r3, [pc, #176]	; (84ca0 <xTaskIncrementTick+0x128>)
   84bee:	4798      	blx	r3
   84bf0:	e7d5      	b.n	84b9e <xTaskIncrementTick+0x26>
   84bf2:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84bf4:	4f21      	ldr	r7, [pc, #132]	; (84c7c <xTaskIncrementTick+0x104>)
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   84bf6:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 84cac <xTaskIncrementTick+0x134>
					prvAddTaskToReadyList( pxTCB );
   84bfa:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 84cb0 <xTaskIncrementTick+0x138>
   84bfe:	e021      	b.n	84c44 <xTaskIncrementTick+0xcc>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84c00:	f04f 32ff 	mov.w	r2, #4294967295
   84c04:	4b21      	ldr	r3, [pc, #132]	; (84c8c <xTaskIncrementTick+0x114>)
   84c06:	601a      	str	r2, [r3, #0]
					break;
   84c08:	e7da      	b.n	84bc0 <xTaskIncrementTick+0x48>
						xNextTaskUnblockTime = xItemValue;
   84c0a:	4a20      	ldr	r2, [pc, #128]	; (84c8c <xTaskIncrementTick+0x114>)
   84c0c:	6013      	str	r3, [r2, #0]
						break;
   84c0e:	e7d7      	b.n	84bc0 <xTaskIncrementTick+0x48>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84c10:	f104 0018 	add.w	r0, r4, #24
   84c14:	47d0      	blx	sl
					prvAddTaskToReadyList( pxTCB );
   84c16:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   84c18:	f8d9 2000 	ldr.w	r2, [r9]
   84c1c:	2301      	movs	r3, #1
   84c1e:	4083      	lsls	r3, r0
   84c20:	4313      	orrs	r3, r2
   84c22:	f8c9 3000 	str.w	r3, [r9]
   84c26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   84c2a:	4631      	mov	r1, r6
   84c2c:	4b19      	ldr	r3, [pc, #100]	; (84c94 <xTaskIncrementTick+0x11c>)
   84c2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   84c32:	4b1c      	ldr	r3, [pc, #112]	; (84ca4 <xTaskIncrementTick+0x12c>)
   84c34:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84c36:	4b16      	ldr	r3, [pc, #88]	; (84c90 <xTaskIncrementTick+0x118>)
   84c38:	681b      	ldr	r3, [r3, #0]
   84c3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   84c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   84c3e:	429a      	cmp	r2, r3
   84c40:	bf28      	it	cs
   84c42:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84c44:	683b      	ldr	r3, [r7, #0]
   84c46:	681b      	ldr	r3, [r3, #0]
   84c48:	2b00      	cmp	r3, #0
   84c4a:	d0d9      	beq.n	84c00 <xTaskIncrementTick+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84c4c:	683b      	ldr	r3, [r7, #0]
   84c4e:	68db      	ldr	r3, [r3, #12]
   84c50:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   84c52:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
   84c54:	4598      	cmp	r8, r3
   84c56:	d3d8      	bcc.n	84c0a <xTaskIncrementTick+0x92>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   84c58:	1d26      	adds	r6, r4, #4
   84c5a:	4630      	mov	r0, r6
   84c5c:	47d0      	blx	sl
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   84c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84c60:	2b00      	cmp	r3, #0
   84c62:	d1d5      	bne.n	84c10 <xTaskIncrementTick+0x98>
   84c64:	e7d7      	b.n	84c16 <xTaskIncrementTick+0x9e>
		++uxPendedTicks;
   84c66:	4a10      	ldr	r2, [pc, #64]	; (84ca8 <xTaskIncrementTick+0x130>)
   84c68:	6813      	ldr	r3, [r2, #0]
   84c6a:	3301      	adds	r3, #1
   84c6c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   84c6e:	2500      	movs	r5, #0
   84c70:	e7b1      	b.n	84bd6 <xTaskIncrementTick+0x5e>
   84c72:	bf00      	nop
   84c74:	20075800 	.word	0x20075800
   84c78:	20075880 	.word	0x20075880
   84c7c:	20075784 	.word	0x20075784
   84c80:	20075788 	.word	0x20075788
   84c84:	2007583c 	.word	0x2007583c
   84c88:	0008476d 	.word	0x0008476d
   84c8c:	20075838 	.word	0x20075838
   84c90:	20075780 	.word	0x20075780
   84c94:	2007578c 	.word	0x2007578c
   84c98:	20075884 	.word	0x20075884
   84c9c:	0008a8b0 	.word	0x0008a8b0
   84ca0:	00085a0d 	.word	0x00085a0d
   84ca4:	00083989 	.word	0x00083989
   84ca8:	200757fc 	.word	0x200757fc
   84cac:	000839d5 	.word	0x000839d5
   84cb0:	20075808 	.word	0x20075808

00084cb4 <xTaskResumeAll>:
{
   84cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
   84cb8:	4b34      	ldr	r3, [pc, #208]	; (84d8c <xTaskResumeAll+0xd8>)
   84cba:	681b      	ldr	r3, [r3, #0]
   84cbc:	2b00      	cmp	r3, #0
   84cbe:	d033      	beq.n	84d28 <xTaskResumeAll+0x74>
	taskENTER_CRITICAL();
   84cc0:	4b33      	ldr	r3, [pc, #204]	; (84d90 <xTaskResumeAll+0xdc>)
   84cc2:	4798      	blx	r3
		--uxSchedulerSuspended;
   84cc4:	4b31      	ldr	r3, [pc, #196]	; (84d8c <xTaskResumeAll+0xd8>)
   84cc6:	681a      	ldr	r2, [r3, #0]
   84cc8:	3a01      	subs	r2, #1
   84cca:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84ccc:	681b      	ldr	r3, [r3, #0]
   84cce:	2b00      	cmp	r3, #0
   84cd0:	d153      	bne.n	84d7a <xTaskResumeAll+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   84cd2:	4b30      	ldr	r3, [pc, #192]	; (84d94 <xTaskResumeAll+0xe0>)
   84cd4:	681b      	ldr	r3, [r3, #0]
   84cd6:	2b00      	cmp	r3, #0
   84cd8:	d02c      	beq.n	84d34 <xTaskResumeAll+0x80>
   84cda:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84cdc:	4e2e      	ldr	r6, [pc, #184]	; (84d98 <xTaskResumeAll+0xe4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84cde:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 84dcc <xTaskResumeAll+0x118>
					prvAddTaskToReadyList( pxTCB );
   84ce2:	4f2e      	ldr	r7, [pc, #184]	; (84d9c <xTaskResumeAll+0xe8>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84ce4:	6833      	ldr	r3, [r6, #0]
   84ce6:	b33b      	cbz	r3, 84d38 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   84ce8:	68f3      	ldr	r3, [r6, #12]
   84cea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84cec:	f104 0018 	add.w	r0, r4, #24
   84cf0:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   84cf2:	1d25      	adds	r5, r4, #4
   84cf4:	4628      	mov	r0, r5
   84cf6:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
   84cf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   84cfa:	683a      	ldr	r2, [r7, #0]
   84cfc:	2301      	movs	r3, #1
   84cfe:	4083      	lsls	r3, r0
   84d00:	4313      	orrs	r3, r2
   84d02:	603b      	str	r3, [r7, #0]
   84d04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   84d08:	4629      	mov	r1, r5
   84d0a:	4b25      	ldr	r3, [pc, #148]	; (84da0 <xTaskResumeAll+0xec>)
   84d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   84d10:	4b24      	ldr	r3, [pc, #144]	; (84da4 <xTaskResumeAll+0xf0>)
   84d12:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84d14:	4b24      	ldr	r3, [pc, #144]	; (84da8 <xTaskResumeAll+0xf4>)
   84d16:	681b      	ldr	r3, [r3, #0]
   84d18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   84d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84d1c:	429a      	cmp	r2, r3
   84d1e:	d3e1      	bcc.n	84ce4 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
   84d20:	2201      	movs	r2, #1
   84d22:	4b22      	ldr	r3, [pc, #136]	; (84dac <xTaskResumeAll+0xf8>)
   84d24:	601a      	str	r2, [r3, #0]
   84d26:	e7dd      	b.n	84ce4 <xTaskResumeAll+0x30>
	configASSERT( uxSchedulerSuspended );
   84d28:	f44f 6104 	mov.w	r1, #2112	; 0x840
   84d2c:	4820      	ldr	r0, [pc, #128]	; (84db0 <xTaskResumeAll+0xfc>)
   84d2e:	4b21      	ldr	r3, [pc, #132]	; (84db4 <xTaskResumeAll+0x100>)
   84d30:	4798      	blx	r3
   84d32:	e7c5      	b.n	84cc0 <xTaskResumeAll+0xc>
BaseType_t xAlreadyYielded = pdFALSE;
   84d34:	2400      	movs	r4, #0
   84d36:	e021      	b.n	84d7c <xTaskResumeAll+0xc8>
				if( pxTCB != NULL )
   84d38:	b10c      	cbz	r4, 84d3e <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
   84d3a:	4b1f      	ldr	r3, [pc, #124]	; (84db8 <xTaskResumeAll+0x104>)
   84d3c:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   84d3e:	4b1f      	ldr	r3, [pc, #124]	; (84dbc <xTaskResumeAll+0x108>)
   84d40:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   84d42:	b16c      	cbz	r4, 84d60 <xTaskResumeAll+0xac>
							if( xTaskIncrementTick() != pdFALSE )
   84d44:	4d1e      	ldr	r5, [pc, #120]	; (84dc0 <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
   84d46:	4f19      	ldr	r7, [pc, #100]	; (84dac <xTaskResumeAll+0xf8>)
   84d48:	2601      	movs	r6, #1
   84d4a:	e001      	b.n	84d50 <xTaskResumeAll+0x9c>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   84d4c:	3c01      	subs	r4, #1
   84d4e:	d004      	beq.n	84d5a <xTaskResumeAll+0xa6>
							if( xTaskIncrementTick() != pdFALSE )
   84d50:	47a8      	blx	r5
   84d52:	2800      	cmp	r0, #0
   84d54:	d0fa      	beq.n	84d4c <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
   84d56:	603e      	str	r6, [r7, #0]
   84d58:	e7f8      	b.n	84d4c <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
   84d5a:	2200      	movs	r2, #0
   84d5c:	4b17      	ldr	r3, [pc, #92]	; (84dbc <xTaskResumeAll+0x108>)
   84d5e:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   84d60:	4b12      	ldr	r3, [pc, #72]	; (84dac <xTaskResumeAll+0xf8>)
   84d62:	681b      	ldr	r3, [r3, #0]
   84d64:	b17b      	cbz	r3, 84d86 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
   84d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   84d6a:	4b16      	ldr	r3, [pc, #88]	; (84dc4 <xTaskResumeAll+0x110>)
   84d6c:	601a      	str	r2, [r3, #0]
   84d6e:	f3bf 8f4f 	dsb	sy
   84d72:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   84d76:	2401      	movs	r4, #1
   84d78:	e000      	b.n	84d7c <xTaskResumeAll+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
   84d7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   84d7c:	4b12      	ldr	r3, [pc, #72]	; (84dc8 <xTaskResumeAll+0x114>)
   84d7e:	4798      	blx	r3
}
   84d80:	4620      	mov	r0, r4
   84d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
   84d86:	2400      	movs	r4, #0
   84d88:	e7f8      	b.n	84d7c <xTaskResumeAll+0xc8>
   84d8a:	bf00      	nop
   84d8c:	20075800 	.word	0x20075800
   84d90:	00083ab5 	.word	0x00083ab5
   84d94:	200757f4 	.word	0x200757f4
   84d98:	20075840 	.word	0x20075840
   84d9c:	20075808 	.word	0x20075808
   84da0:	2007578c 	.word	0x2007578c
   84da4:	00083989 	.word	0x00083989
   84da8:	20075780 	.word	0x20075780
   84dac:	20075884 	.word	0x20075884
   84db0:	0008a8b0 	.word	0x0008a8b0
   84db4:	00085a0d 	.word	0x00085a0d
   84db8:	0008476d 	.word	0x0008476d
   84dbc:	200757fc 	.word	0x200757fc
   84dc0:	00084b79 	.word	0x00084b79
   84dc4:	e000ed04 	.word	0xe000ed04
   84dc8:	00083afd 	.word	0x00083afd
   84dcc:	000839d5 	.word	0x000839d5

00084dd0 <vTaskDelay>:
	{
   84dd0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
   84dd2:	b160      	cbz	r0, 84dee <vTaskDelay+0x1e>
   84dd4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
   84dd6:	4b0d      	ldr	r3, [pc, #52]	; (84e0c <vTaskDelay+0x3c>)
   84dd8:	681b      	ldr	r3, [r3, #0]
   84dda:	b98b      	cbnz	r3, 84e00 <vTaskDelay+0x30>
			vTaskSuspendAll();
   84ddc:	4b0c      	ldr	r3, [pc, #48]	; (84e10 <vTaskDelay+0x40>)
   84dde:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   84de0:	2100      	movs	r1, #0
   84de2:	4620      	mov	r0, r4
   84de4:	4b0b      	ldr	r3, [pc, #44]	; (84e14 <vTaskDelay+0x44>)
   84de6:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   84de8:	4b0b      	ldr	r3, [pc, #44]	; (84e18 <vTaskDelay+0x48>)
   84dea:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   84dec:	b938      	cbnz	r0, 84dfe <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
   84dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   84df2:	4b0a      	ldr	r3, [pc, #40]	; (84e1c <vTaskDelay+0x4c>)
   84df4:	601a      	str	r2, [r3, #0]
   84df6:	f3bf 8f4f 	dsb	sy
   84dfa:	f3bf 8f6f 	isb	sy
   84dfe:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
   84e00:	f240 510f 	movw	r1, #1295	; 0x50f
   84e04:	4806      	ldr	r0, [pc, #24]	; (84e20 <vTaskDelay+0x50>)
   84e06:	4b07      	ldr	r3, [pc, #28]	; (84e24 <vTaskDelay+0x54>)
   84e08:	4798      	blx	r3
   84e0a:	e7e7      	b.n	84ddc <vTaskDelay+0xc>
   84e0c:	20075800 	.word	0x20075800
   84e10:	00084b49 	.word	0x00084b49
   84e14:	00084819 	.word	0x00084819
   84e18:	00084cb5 	.word	0x00084cb5
   84e1c:	e000ed04 	.word	0xe000ed04
   84e20:	0008a8b0 	.word	0x0008a8b0
   84e24:	00085a0d 	.word	0x00085a0d

00084e28 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   84e28:	4b31      	ldr	r3, [pc, #196]	; (84ef0 <vTaskSwitchContext+0xc8>)
   84e2a:	681b      	ldr	r3, [r3, #0]
   84e2c:	b11b      	cbz	r3, 84e36 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
   84e2e:	2201      	movs	r2, #1
   84e30:	4b30      	ldr	r3, [pc, #192]	; (84ef4 <vTaskSwitchContext+0xcc>)
   84e32:	601a      	str	r2, [r3, #0]
   84e34:	4770      	bx	lr
{
   84e36:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
   84e38:	2200      	movs	r2, #0
   84e3a:	4b2e      	ldr	r3, [pc, #184]	; (84ef4 <vTaskSwitchContext+0xcc>)
   84e3c:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
   84e3e:	4b2e      	ldr	r3, [pc, #184]	; (84ef8 <vTaskSwitchContext+0xd0>)
   84e40:	4798      	blx	r3
				if( ulTotalRunTime > ulTaskSwitchedInTime )
   84e42:	4b2e      	ldr	r3, [pc, #184]	; (84efc <vTaskSwitchContext+0xd4>)
   84e44:	681a      	ldr	r2, [r3, #0]
   84e46:	4290      	cmp	r0, r2
   84e48:	d905      	bls.n	84e56 <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
   84e4a:	4b2d      	ldr	r3, [pc, #180]	; (84f00 <vTaskSwitchContext+0xd8>)
   84e4c:	6819      	ldr	r1, [r3, #0]
   84e4e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   84e50:	1a9b      	subs	r3, r3, r2
   84e52:	4403      	add	r3, r0
   84e54:	650b      	str	r3, [r1, #80]	; 0x50
				ulTaskSwitchedInTime = ulTotalRunTime;
   84e56:	4b29      	ldr	r3, [pc, #164]	; (84efc <vTaskSwitchContext+0xd4>)
   84e58:	6018      	str	r0, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   84e5a:	4b29      	ldr	r3, [pc, #164]	; (84f00 <vTaskSwitchContext+0xd8>)
   84e5c:	681b      	ldr	r3, [r3, #0]
   84e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84e60:	681a      	ldr	r2, [r3, #0]
   84e62:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   84e66:	d029      	beq.n	84ebc <vTaskSwitchContext+0x94>
   84e68:	4b25      	ldr	r3, [pc, #148]	; (84f00 <vTaskSwitchContext+0xd8>)
   84e6a:	6818      	ldr	r0, [r3, #0]
   84e6c:	6819      	ldr	r1, [r3, #0]
   84e6e:	3134      	adds	r1, #52	; 0x34
   84e70:	4b24      	ldr	r3, [pc, #144]	; (84f04 <vTaskSwitchContext+0xdc>)
   84e72:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   84e74:	4b24      	ldr	r3, [pc, #144]	; (84f08 <vTaskSwitchContext+0xe0>)
   84e76:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
   84e78:	fab4 f484 	clz	r4, r4
   84e7c:	b2e4      	uxtb	r4, r4
   84e7e:	f1c4 041f 	rsb	r4, r4, #31
   84e82:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   84e86:	009b      	lsls	r3, r3, #2
   84e88:	4a20      	ldr	r2, [pc, #128]	; (84f0c <vTaskSwitchContext+0xe4>)
   84e8a:	58d3      	ldr	r3, [r2, r3]
   84e8c:	b31b      	cbz	r3, 84ed6 <vTaskSwitchContext+0xae>
   84e8e:	4b1f      	ldr	r3, [pc, #124]	; (84f0c <vTaskSwitchContext+0xe4>)
   84e90:	00a2      	lsls	r2, r4, #2
   84e92:	1911      	adds	r1, r2, r4
   84e94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   84e98:	6848      	ldr	r0, [r1, #4]
   84e9a:	6840      	ldr	r0, [r0, #4]
   84e9c:	6048      	str	r0, [r1, #4]
   84e9e:	4422      	add	r2, r4
   84ea0:	460b      	mov	r3, r1
   84ea2:	3308      	adds	r3, #8
   84ea4:	4298      	cmp	r0, r3
   84ea6:	d01c      	beq.n	84ee2 <vTaskSwitchContext+0xba>
   84ea8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84eac:	4b17      	ldr	r3, [pc, #92]	; (84f0c <vTaskSwitchContext+0xe4>)
   84eae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   84eb2:	6863      	ldr	r3, [r4, #4]
   84eb4:	68da      	ldr	r2, [r3, #12]
   84eb6:	4b12      	ldr	r3, [pc, #72]	; (84f00 <vTaskSwitchContext+0xd8>)
   84eb8:	601a      	str	r2, [r3, #0]
   84eba:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
   84ebc:	685a      	ldr	r2, [r3, #4]
   84ebe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   84ec2:	d1d1      	bne.n	84e68 <vTaskSwitchContext+0x40>
   84ec4:	689a      	ldr	r2, [r3, #8]
   84ec6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   84eca:	d1cd      	bne.n	84e68 <vTaskSwitchContext+0x40>
   84ecc:	68db      	ldr	r3, [r3, #12]
   84ece:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
   84ed2:	d1c9      	bne.n	84e68 <vTaskSwitchContext+0x40>
   84ed4:	e7ce      	b.n	84e74 <vTaskSwitchContext+0x4c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
   84ed6:	f44f 6135 	mov.w	r1, #2896	; 0xb50
   84eda:	480d      	ldr	r0, [pc, #52]	; (84f10 <vTaskSwitchContext+0xe8>)
   84edc:	4b0d      	ldr	r3, [pc, #52]	; (84f14 <vTaskSwitchContext+0xec>)
   84ede:	4798      	blx	r3
   84ee0:	e7d5      	b.n	84e8e <vTaskSwitchContext+0x66>
   84ee2:	6841      	ldr	r1, [r0, #4]
   84ee4:	4613      	mov	r3, r2
   84ee6:	4a09      	ldr	r2, [pc, #36]	; (84f0c <vTaskSwitchContext+0xe4>)
   84ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   84eec:	6059      	str	r1, [r3, #4]
   84eee:	e7db      	b.n	84ea8 <vTaskSwitchContext+0x80>
   84ef0:	20075800 	.word	0x20075800
   84ef4:	20075884 	.word	0x20075884
   84ef8:	00085bad 	.word	0x00085bad
   84efc:	200757f0 	.word	0x200757f0
   84f00:	20075780 	.word	0x20075780
   84f04:	000859fb 	.word	0x000859fb
   84f08:	20075808 	.word	0x20075808
   84f0c:	2007578c 	.word	0x2007578c
   84f10:	0008a8b0 	.word	0x0008a8b0
   84f14:	00085a0d 	.word	0x00085a0d

00084f18 <vTaskPlaceOnEventList>:
{
   84f18:	b538      	push	{r3, r4, r5, lr}
   84f1a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
   84f1c:	4605      	mov	r5, r0
   84f1e:	b150      	cbz	r0, 84f36 <vTaskPlaceOnEventList+0x1e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84f20:	4b08      	ldr	r3, [pc, #32]	; (84f44 <vTaskPlaceOnEventList+0x2c>)
   84f22:	6819      	ldr	r1, [r3, #0]
   84f24:	3118      	adds	r1, #24
   84f26:	4628      	mov	r0, r5
   84f28:	4b07      	ldr	r3, [pc, #28]	; (84f48 <vTaskPlaceOnEventList+0x30>)
   84f2a:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   84f2c:	2101      	movs	r1, #1
   84f2e:	4620      	mov	r0, r4
   84f30:	4b06      	ldr	r3, [pc, #24]	; (84f4c <vTaskPlaceOnEventList+0x34>)
   84f32:	4798      	blx	r3
   84f34:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   84f36:	f44f 6136 	mov.w	r1, #2912	; 0xb60
   84f3a:	4805      	ldr	r0, [pc, #20]	; (84f50 <vTaskPlaceOnEventList+0x38>)
   84f3c:	4b05      	ldr	r3, [pc, #20]	; (84f54 <vTaskPlaceOnEventList+0x3c>)
   84f3e:	4798      	blx	r3
   84f40:	e7ee      	b.n	84f20 <vTaskPlaceOnEventList+0x8>
   84f42:	bf00      	nop
   84f44:	20075780 	.word	0x20075780
   84f48:	000839a1 	.word	0x000839a1
   84f4c:	00084819 	.word	0x00084819
   84f50:	0008a8b0 	.word	0x0008a8b0
   84f54:	00085a0d 	.word	0x00085a0d

00084f58 <vTaskPlaceOnEventListRestricted>:
	{
   84f58:	b570      	push	{r4, r5, r6, lr}
   84f5a:	460d      	mov	r5, r1
   84f5c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
   84f5e:	4606      	mov	r6, r0
   84f60:	b170      	cbz	r0, 84f80 <vTaskPlaceOnEventListRestricted+0x28>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84f62:	4b0a      	ldr	r3, [pc, #40]	; (84f8c <vTaskPlaceOnEventListRestricted+0x34>)
   84f64:	6819      	ldr	r1, [r3, #0]
   84f66:	3118      	adds	r1, #24
   84f68:	4630      	mov	r0, r6
   84f6a:	4b09      	ldr	r3, [pc, #36]	; (84f90 <vTaskPlaceOnEventListRestricted+0x38>)
   84f6c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
   84f6e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   84f70:	4621      	mov	r1, r4
   84f72:	bf0c      	ite	eq
   84f74:	4628      	moveq	r0, r5
   84f76:	f04f 30ff 	movne.w	r0, #4294967295
   84f7a:	4b06      	ldr	r3, [pc, #24]	; (84f94 <vTaskPlaceOnEventListRestricted+0x3c>)
   84f7c:	4798      	blx	r3
   84f7e:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
   84f80:	f640 318b 	movw	r1, #2955	; 0xb8b
   84f84:	4804      	ldr	r0, [pc, #16]	; (84f98 <vTaskPlaceOnEventListRestricted+0x40>)
   84f86:	4b05      	ldr	r3, [pc, #20]	; (84f9c <vTaskPlaceOnEventListRestricted+0x44>)
   84f88:	4798      	blx	r3
   84f8a:	e7ea      	b.n	84f62 <vTaskPlaceOnEventListRestricted+0xa>
   84f8c:	20075780 	.word	0x20075780
   84f90:	00083989 	.word	0x00083989
   84f94:	00084819 	.word	0x00084819
   84f98:	0008a8b0 	.word	0x0008a8b0
   84f9c:	00085a0d 	.word	0x00085a0d

00084fa0 <xTaskRemoveFromEventList>:
{
   84fa0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   84fa2:	68c3      	ldr	r3, [r0, #12]
   84fa4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   84fa6:	b32c      	cbz	r4, 84ff4 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   84fa8:	f104 0518 	add.w	r5, r4, #24
   84fac:	4628      	mov	r0, r5
   84fae:	4b17      	ldr	r3, [pc, #92]	; (8500c <xTaskRemoveFromEventList+0x6c>)
   84fb0:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84fb2:	4b17      	ldr	r3, [pc, #92]	; (85010 <xTaskRemoveFromEventList+0x70>)
   84fb4:	681b      	ldr	r3, [r3, #0]
   84fb6:	bb1b      	cbnz	r3, 85000 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   84fb8:	1d25      	adds	r5, r4, #4
   84fba:	4628      	mov	r0, r5
   84fbc:	4b13      	ldr	r3, [pc, #76]	; (8500c <xTaskRemoveFromEventList+0x6c>)
   84fbe:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   84fc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   84fc2:	4a14      	ldr	r2, [pc, #80]	; (85014 <xTaskRemoveFromEventList+0x74>)
   84fc4:	6811      	ldr	r1, [r2, #0]
   84fc6:	2301      	movs	r3, #1
   84fc8:	4083      	lsls	r3, r0
   84fca:	430b      	orrs	r3, r1
   84fcc:	6013      	str	r3, [r2, #0]
   84fce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   84fd2:	4629      	mov	r1, r5
   84fd4:	4b10      	ldr	r3, [pc, #64]	; (85018 <xTaskRemoveFromEventList+0x78>)
   84fd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   84fda:	4b10      	ldr	r3, [pc, #64]	; (8501c <xTaskRemoveFromEventList+0x7c>)
   84fdc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   84fde:	4b10      	ldr	r3, [pc, #64]	; (85020 <xTaskRemoveFromEventList+0x80>)
   84fe0:	681b      	ldr	r3, [r3, #0]
   84fe2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   84fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84fe6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   84fe8:	bf83      	ittte	hi
   84fea:	2001      	movhi	r0, #1
   84fec:	4b0d      	ldrhi	r3, [pc, #52]	; (85024 <xTaskRemoveFromEventList+0x84>)
   84fee:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
   84ff0:	2000      	movls	r0, #0
}
   84ff2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   84ff4:	f640 31bb 	movw	r1, #3003	; 0xbbb
   84ff8:	480b      	ldr	r0, [pc, #44]	; (85028 <xTaskRemoveFromEventList+0x88>)
   84ffa:	4b0c      	ldr	r3, [pc, #48]	; (8502c <xTaskRemoveFromEventList+0x8c>)
   84ffc:	4798      	blx	r3
   84ffe:	e7d3      	b.n	84fa8 <xTaskRemoveFromEventList+0x8>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   85000:	4629      	mov	r1, r5
   85002:	480b      	ldr	r0, [pc, #44]	; (85030 <xTaskRemoveFromEventList+0x90>)
   85004:	4b05      	ldr	r3, [pc, #20]	; (8501c <xTaskRemoveFromEventList+0x7c>)
   85006:	4798      	blx	r3
   85008:	e7e9      	b.n	84fde <xTaskRemoveFromEventList+0x3e>
   8500a:	bf00      	nop
   8500c:	000839d5 	.word	0x000839d5
   85010:	20075800 	.word	0x20075800
   85014:	20075808 	.word	0x20075808
   85018:	2007578c 	.word	0x2007578c
   8501c:	00083989 	.word	0x00083989
   85020:	20075780 	.word	0x20075780
   85024:	20075884 	.word	0x20075884
   85028:	0008a8b0 	.word	0x0008a8b0
   8502c:	00085a0d 	.word	0x00085a0d
   85030:	20075840 	.word	0x20075840

00085034 <vTaskSetTimeOutState>:
{
   85034:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
   85036:	4604      	mov	r4, r0
   85038:	b150      	cbz	r0, 85050 <vTaskSetTimeOutState+0x1c>
	taskENTER_CRITICAL();
   8503a:	4b08      	ldr	r3, [pc, #32]	; (8505c <vTaskSetTimeOutState+0x28>)
   8503c:	4798      	blx	r3
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   8503e:	4b08      	ldr	r3, [pc, #32]	; (85060 <vTaskSetTimeOutState+0x2c>)
   85040:	681b      	ldr	r3, [r3, #0]
   85042:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   85044:	4b07      	ldr	r3, [pc, #28]	; (85064 <vTaskSetTimeOutState+0x30>)
   85046:	681b      	ldr	r3, [r3, #0]
   85048:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
   8504a:	4b07      	ldr	r3, [pc, #28]	; (85068 <vTaskSetTimeOutState+0x34>)
   8504c:	4798      	blx	r3
   8504e:	bd10      	pop	{r4, pc}
	configASSERT( pxTimeOut );
   85050:	f44f 6141 	mov.w	r1, #3088	; 0xc10
   85054:	4805      	ldr	r0, [pc, #20]	; (8506c <vTaskSetTimeOutState+0x38>)
   85056:	4b06      	ldr	r3, [pc, #24]	; (85070 <vTaskSetTimeOutState+0x3c>)
   85058:	4798      	blx	r3
   8505a:	e7ee      	b.n	8503a <vTaskSetTimeOutState+0x6>
   8505c:	00083ab5 	.word	0x00083ab5
   85060:	2007583c 	.word	0x2007583c
   85064:	20075880 	.word	0x20075880
   85068:	00083afd 	.word	0x00083afd
   8506c:	0008a8b0 	.word	0x0008a8b0
   85070:	00085a0d 	.word	0x00085a0d

00085074 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   85074:	4b03      	ldr	r3, [pc, #12]	; (85084 <vTaskInternalSetTimeOutState+0x10>)
   85076:	681b      	ldr	r3, [r3, #0]
   85078:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8507a:	4b03      	ldr	r3, [pc, #12]	; (85088 <vTaskInternalSetTimeOutState+0x14>)
   8507c:	681b      	ldr	r3, [r3, #0]
   8507e:	6043      	str	r3, [r0, #4]
   85080:	4770      	bx	lr
   85082:	bf00      	nop
   85084:	2007583c 	.word	0x2007583c
   85088:	20075880 	.word	0x20075880

0008508c <xTaskCheckForTimeOut>:
{
   8508c:	b570      	push	{r4, r5, r6, lr}
   8508e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
   85090:	4605      	mov	r5, r0
   85092:	b1d0      	cbz	r0, 850ca <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
   85094:	b1fc      	cbz	r4, 850d6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
   85096:	4b18      	ldr	r3, [pc, #96]	; (850f8 <xTaskCheckForTimeOut+0x6c>)
   85098:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   8509a:	4b18      	ldr	r3, [pc, #96]	; (850fc <xTaskCheckForTimeOut+0x70>)
   8509c:	681b      	ldr	r3, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
   8509e:	6822      	ldr	r2, [r4, #0]
   850a0:	f1b2 3fff 	cmp.w	r2, #4294967295
   850a4:	d024      	beq.n	850f0 <xTaskCheckForTimeOut+0x64>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   850a6:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   850a8:	4815      	ldr	r0, [pc, #84]	; (85100 <xTaskCheckForTimeOut+0x74>)
   850aa:	6800      	ldr	r0, [r0, #0]
   850ac:	682e      	ldr	r6, [r5, #0]
   850ae:	4286      	cmp	r6, r0
   850b0:	d001      	beq.n	850b6 <xTaskCheckForTimeOut+0x2a>
   850b2:	428b      	cmp	r3, r1
   850b4:	d21e      	bcs.n	850f4 <xTaskCheckForTimeOut+0x68>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   850b6:	1a5b      	subs	r3, r3, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   850b8:	4293      	cmp	r3, r2
   850ba:	d312      	bcc.n	850e2 <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait = 0;
   850bc:	2300      	movs	r3, #0
   850be:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
   850c0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   850c2:	4b10      	ldr	r3, [pc, #64]	; (85104 <xTaskCheckForTimeOut+0x78>)
   850c4:	4798      	blx	r3
}
   850c6:	4620      	mov	r0, r4
   850c8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
   850ca:	f640 4126 	movw	r1, #3110	; 0xc26
   850ce:	480e      	ldr	r0, [pc, #56]	; (85108 <xTaskCheckForTimeOut+0x7c>)
   850d0:	4b0e      	ldr	r3, [pc, #56]	; (8510c <xTaskCheckForTimeOut+0x80>)
   850d2:	4798      	blx	r3
   850d4:	e7de      	b.n	85094 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
   850d6:	f640 4127 	movw	r1, #3111	; 0xc27
   850da:	480b      	ldr	r0, [pc, #44]	; (85108 <xTaskCheckForTimeOut+0x7c>)
   850dc:	4b0b      	ldr	r3, [pc, #44]	; (8510c <xTaskCheckForTimeOut+0x80>)
   850de:	4798      	blx	r3
   850e0:	e7d9      	b.n	85096 <xTaskCheckForTimeOut+0xa>
			*pxTicksToWait -= xElapsedTime;
   850e2:	1ad3      	subs	r3, r2, r3
   850e4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   850e6:	4628      	mov	r0, r5
   850e8:	4b09      	ldr	r3, [pc, #36]	; (85110 <xTaskCheckForTimeOut+0x84>)
   850ea:	4798      	blx	r3
			xReturn = pdFALSE;
   850ec:	2400      	movs	r4, #0
   850ee:	e7e8      	b.n	850c2 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
   850f0:	2400      	movs	r4, #0
   850f2:	e7e6      	b.n	850c2 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
   850f4:	2401      	movs	r4, #1
   850f6:	e7e4      	b.n	850c2 <xTaskCheckForTimeOut+0x36>
   850f8:	00083ab5 	.word	0x00083ab5
   850fc:	20075880 	.word	0x20075880
   85100:	2007583c 	.word	0x2007583c
   85104:	00083afd 	.word	0x00083afd
   85108:	0008a8b0 	.word	0x0008a8b0
   8510c:	00085a0d 	.word	0x00085a0d
   85110:	00085075 	.word	0x00085075

00085114 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   85114:	2201      	movs	r2, #1
   85116:	4b01      	ldr	r3, [pc, #4]	; (8511c <vTaskMissedYield+0x8>)
   85118:	601a      	str	r2, [r3, #0]
   8511a:	4770      	bx	lr
   8511c:	20075884 	.word	0x20075884

00085120 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   85120:	4b05      	ldr	r3, [pc, #20]	; (85138 <xTaskGetSchedulerState+0x18>)
   85122:	681b      	ldr	r3, [r3, #0]
   85124:	b133      	cbz	r3, 85134 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   85126:	4b05      	ldr	r3, [pc, #20]	; (8513c <xTaskGetSchedulerState+0x1c>)
   85128:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   8512a:	2b00      	cmp	r3, #0
   8512c:	bf0c      	ite	eq
   8512e:	2002      	moveq	r0, #2
   85130:	2000      	movne	r0, #0
   85132:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   85134:	2001      	movs	r0, #1
	}
   85136:	4770      	bx	lr
   85138:	20075854 	.word	0x20075854
   8513c:	20075800 	.word	0x20075800

00085140 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
   85140:	2800      	cmp	r0, #0
   85142:	d050      	beq.n	851e6 <xTaskPriorityInherit+0xa6>
	{
   85144:	b538      	push	{r3, r4, r5, lr}
   85146:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   85148:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   8514a:	4928      	ldr	r1, [pc, #160]	; (851ec <xTaskPriorityInherit+0xac>)
   8514c:	6809      	ldr	r1, [r1, #0]
   8514e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   85150:	428a      	cmp	r2, r1
   85152:	d23f      	bcs.n	851d4 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   85154:	6981      	ldr	r1, [r0, #24]
   85156:	2900      	cmp	r1, #0
   85158:	db05      	blt.n	85166 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8515a:	4924      	ldr	r1, [pc, #144]	; (851ec <xTaskPriorityInherit+0xac>)
   8515c:	6809      	ldr	r1, [r1, #0]
   8515e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   85160:	f1c1 0105 	rsb	r1, r1, #5
   85164:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   85166:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8516a:	4921      	ldr	r1, [pc, #132]	; (851f0 <xTaskPriorityInherit+0xb0>)
   8516c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   85170:	6961      	ldr	r1, [r4, #20]
   85172:	4291      	cmp	r1, r2
   85174:	d005      	beq.n	85182 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   85176:	4a1d      	ldr	r2, [pc, #116]	; (851ec <xTaskPriorityInherit+0xac>)
   85178:	6812      	ldr	r2, [r2, #0]
   8517a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8517c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
   8517e:	2001      	movs	r0, #1
   85180:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   85182:	1d25      	adds	r5, r4, #4
   85184:	4628      	mov	r0, r5
   85186:	4b1b      	ldr	r3, [pc, #108]	; (851f4 <xTaskPriorityInherit+0xb4>)
   85188:	4798      	blx	r3
   8518a:	b970      	cbnz	r0, 851aa <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
   8518c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8518e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   85192:	009b      	lsls	r3, r3, #2
   85194:	4916      	ldr	r1, [pc, #88]	; (851f0 <xTaskPriorityInherit+0xb0>)
   85196:	58cb      	ldr	r3, [r1, r3]
   85198:	b93b      	cbnz	r3, 851aa <xTaskPriorityInherit+0x6a>
   8519a:	4817      	ldr	r0, [pc, #92]	; (851f8 <xTaskPriorityInherit+0xb8>)
   8519c:	6803      	ldr	r3, [r0, #0]
   8519e:	2101      	movs	r1, #1
   851a0:	fa01 f202 	lsl.w	r2, r1, r2
   851a4:	ea23 0202 	bic.w	r2, r3, r2
   851a8:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   851aa:	4b10      	ldr	r3, [pc, #64]	; (851ec <xTaskPriorityInherit+0xac>)
   851ac:	681b      	ldr	r3, [r3, #0]
   851ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   851b0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   851b2:	4a11      	ldr	r2, [pc, #68]	; (851f8 <xTaskPriorityInherit+0xb8>)
   851b4:	6811      	ldr	r1, [r2, #0]
   851b6:	2401      	movs	r4, #1
   851b8:	fa04 f300 	lsl.w	r3, r4, r0
   851bc:	430b      	orrs	r3, r1
   851be:	6013      	str	r3, [r2, #0]
   851c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   851c4:	4629      	mov	r1, r5
   851c6:	4b0a      	ldr	r3, [pc, #40]	; (851f0 <xTaskPriorityInherit+0xb0>)
   851c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   851cc:	4b0b      	ldr	r3, [pc, #44]	; (851fc <xTaskPriorityInherit+0xbc>)
   851ce:	4798      	blx	r3
				xReturn = pdTRUE;
   851d0:	4620      	mov	r0, r4
   851d2:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   851d4:	4a05      	ldr	r2, [pc, #20]	; (851ec <xTaskPriorityInherit+0xac>)
   851d6:	6812      	ldr	r2, [r2, #0]
   851d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
   851da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   851dc:	4298      	cmp	r0, r3
   851de:	bf2c      	ite	cs
   851e0:	2000      	movcs	r0, #0
   851e2:	2001      	movcc	r0, #1
   851e4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   851e6:	2000      	movs	r0, #0
		return xReturn;
   851e8:	4770      	bx	lr
   851ea:	bf00      	nop
   851ec:	20075780 	.word	0x20075780
   851f0:	2007578c 	.word	0x2007578c
   851f4:	000839d5 	.word	0x000839d5
   851f8:	20075808 	.word	0x20075808
   851fc:	00083989 	.word	0x00083989

00085200 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
   85200:	2800      	cmp	r0, #0
   85202:	d046      	beq.n	85292 <xTaskPriorityDisinherit+0x92>
	{
   85204:	b538      	push	{r3, r4, r5, lr}
   85206:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
   85208:	4b24      	ldr	r3, [pc, #144]	; (8529c <xTaskPriorityDisinherit+0x9c>)
   8520a:	681b      	ldr	r3, [r3, #0]
   8520c:	4298      	cmp	r0, r3
   8520e:	d004      	beq.n	8521a <xTaskPriorityDisinherit+0x1a>
   85210:	f640 713b 	movw	r1, #3899	; 0xf3b
   85214:	4822      	ldr	r0, [pc, #136]	; (852a0 <xTaskPriorityDisinherit+0xa0>)
   85216:	4b23      	ldr	r3, [pc, #140]	; (852a4 <xTaskPriorityDisinherit+0xa4>)
   85218:	4798      	blx	r3
			configASSERT( pxTCB->uxMutexesHeld );
   8521a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   8521c:	b14b      	cbz	r3, 85232 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
   8521e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   85220:	3b01      	subs	r3, #1
   85222:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   85224:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   85226:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   85228:	4291      	cmp	r1, r2
   8522a:	d034      	beq.n	85296 <xTaskPriorityDisinherit+0x96>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   8522c:	b13b      	cbz	r3, 8523e <xTaskPriorityDisinherit+0x3e>
	BaseType_t xReturn = pdFALSE;
   8522e:	2000      	movs	r0, #0
	}
   85230:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
   85232:	f640 713c 	movw	r1, #3900	; 0xf3c
   85236:	481a      	ldr	r0, [pc, #104]	; (852a0 <xTaskPriorityDisinherit+0xa0>)
   85238:	4b1a      	ldr	r3, [pc, #104]	; (852a4 <xTaskPriorityDisinherit+0xa4>)
   8523a:	4798      	blx	r3
   8523c:	e7ef      	b.n	8521e <xTaskPriorityDisinherit+0x1e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   8523e:	1d25      	adds	r5, r4, #4
   85240:	4628      	mov	r0, r5
   85242:	4b19      	ldr	r3, [pc, #100]	; (852a8 <xTaskPriorityDisinherit+0xa8>)
   85244:	4798      	blx	r3
   85246:	b970      	cbnz	r0, 85266 <xTaskPriorityDisinherit+0x66>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   85248:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8524a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   8524e:	009b      	lsls	r3, r3, #2
   85250:	4916      	ldr	r1, [pc, #88]	; (852ac <xTaskPriorityDisinherit+0xac>)
   85252:	58cb      	ldr	r3, [r1, r3]
   85254:	b93b      	cbnz	r3, 85266 <xTaskPriorityDisinherit+0x66>
   85256:	4816      	ldr	r0, [pc, #88]	; (852b0 <xTaskPriorityDisinherit+0xb0>)
   85258:	6803      	ldr	r3, [r0, #0]
   8525a:	2101      	movs	r1, #1
   8525c:	fa01 f202 	lsl.w	r2, r1, r2
   85260:	ea23 0202 	bic.w	r2, r3, r2
   85264:	6002      	str	r2, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   85266:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   85268:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8526a:	f1c0 0305 	rsb	r3, r0, #5
   8526e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   85270:	4a0f      	ldr	r2, [pc, #60]	; (852b0 <xTaskPriorityDisinherit+0xb0>)
   85272:	6811      	ldr	r1, [r2, #0]
   85274:	2401      	movs	r4, #1
   85276:	fa04 f300 	lsl.w	r3, r4, r0
   8527a:	430b      	orrs	r3, r1
   8527c:	6013      	str	r3, [r2, #0]
   8527e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   85282:	4629      	mov	r1, r5
   85284:	4b09      	ldr	r3, [pc, #36]	; (852ac <xTaskPriorityDisinherit+0xac>)
   85286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8528a:	4b0a      	ldr	r3, [pc, #40]	; (852b4 <xTaskPriorityDisinherit+0xb4>)
   8528c:	4798      	blx	r3
					xReturn = pdTRUE;
   8528e:	4620      	mov	r0, r4
   85290:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
   85292:	2000      	movs	r0, #0
   85294:	4770      	bx	lr
   85296:	2000      	movs	r0, #0
   85298:	bd38      	pop	{r3, r4, r5, pc}
   8529a:	bf00      	nop
   8529c:	20075780 	.word	0x20075780
   852a0:	0008a8b0 	.word	0x0008a8b0
   852a4:	00085a0d 	.word	0x00085a0d
   852a8:	000839d5 	.word	0x000839d5
   852ac:	2007578c 	.word	0x2007578c
   852b0:	20075808 	.word	0x20075808
   852b4:	00083989 	.word	0x00083989

000852b8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
   852b8:	2800      	cmp	r0, #0
   852ba:	d053      	beq.n	85364 <vTaskPriorityDisinheritAfterTimeout+0xac>
	{
   852bc:	b538      	push	{r3, r4, r5, lr}
   852be:	4604      	mov	r4, r0
   852c0:	460d      	mov	r5, r1
			configASSERT( pxTCB->uxMutexesHeld );
   852c2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   852c4:	b153      	cbz	r3, 852dc <vTaskPriorityDisinheritAfterTimeout+0x24>
   852c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   852c8:	428d      	cmp	r5, r1
   852ca:	bf38      	it	cc
   852cc:	460d      	movcc	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   852ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   852d0:	42ab      	cmp	r3, r5
   852d2:	d002      	beq.n	852da <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   852d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   852d6:	2b01      	cmp	r3, #1
   852d8:	d006      	beq.n	852e8 <vTaskPriorityDisinheritAfterTimeout+0x30>
   852da:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
   852dc:	f640 718a 	movw	r1, #3978	; 0xf8a
   852e0:	4821      	ldr	r0, [pc, #132]	; (85368 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
   852e2:	4b22      	ldr	r3, [pc, #136]	; (8536c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
   852e4:	4798      	blx	r3
   852e6:	e7ee      	b.n	852c6 <vTaskPriorityDisinheritAfterTimeout+0xe>
					configASSERT( pxTCB != pxCurrentTCB );
   852e8:	4b21      	ldr	r3, [pc, #132]	; (85370 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
   852ea:	681b      	ldr	r3, [r3, #0]
   852ec:	429c      	cmp	r4, r3
   852ee:	d033      	beq.n	85358 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   852f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
   852f2:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   852f4:	69a2      	ldr	r2, [r4, #24]
   852f6:	2a00      	cmp	r2, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   852f8:	bfa4      	itt	ge
   852fa:	f1c5 0505 	rsbge	r5, r5, #5
   852fe:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   85300:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   85304:	4a1b      	ldr	r2, [pc, #108]	; (85374 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
   85306:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8530a:	6962      	ldr	r2, [r4, #20]
   8530c:	429a      	cmp	r2, r3
   8530e:	d1e4      	bne.n	852da <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   85310:	1d25      	adds	r5, r4, #4
   85312:	4628      	mov	r0, r5
   85314:	4b18      	ldr	r3, [pc, #96]	; (85378 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
   85316:	4798      	blx	r3
   85318:	b970      	cbnz	r0, 85338 <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8531a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8531c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   85320:	009b      	lsls	r3, r3, #2
   85322:	4914      	ldr	r1, [pc, #80]	; (85374 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
   85324:	58cb      	ldr	r3, [r1, r3]
   85326:	b93b      	cbnz	r3, 85338 <vTaskPriorityDisinheritAfterTimeout+0x80>
   85328:	4814      	ldr	r0, [pc, #80]	; (8537c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
   8532a:	6803      	ldr	r3, [r0, #0]
   8532c:	2101      	movs	r1, #1
   8532e:	fa01 f202 	lsl.w	r2, r1, r2
   85332:	ea23 0202 	bic.w	r2, r3, r2
   85336:	6002      	str	r2, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
   85338:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8533a:	4a10      	ldr	r2, [pc, #64]	; (8537c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
   8533c:	6811      	ldr	r1, [r2, #0]
   8533e:	2301      	movs	r3, #1
   85340:	4083      	lsls	r3, r0
   85342:	430b      	orrs	r3, r1
   85344:	6013      	str	r3, [r2, #0]
   85346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8534a:	4629      	mov	r1, r5
   8534c:	4b09      	ldr	r3, [pc, #36]	; (85374 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
   8534e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   85352:	4b0b      	ldr	r3, [pc, #44]	; (85380 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
   85354:	4798      	blx	r3
	}
   85356:	e7c0      	b.n	852da <vTaskPriorityDisinheritAfterTimeout+0x22>
					configASSERT( pxTCB != pxCurrentTCB );
   85358:	f640 71a5 	movw	r1, #4005	; 0xfa5
   8535c:	4802      	ldr	r0, [pc, #8]	; (85368 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
   8535e:	4b03      	ldr	r3, [pc, #12]	; (8536c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
   85360:	4798      	blx	r3
   85362:	e7c5      	b.n	852f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
   85364:	4770      	bx	lr
   85366:	bf00      	nop
   85368:	0008a8b0 	.word	0x0008a8b0
   8536c:	00085a0d 	.word	0x00085a0d
   85370:	20075780 	.word	0x20075780
   85374:	2007578c 	.word	0x2007578c
   85378:	000839d5 	.word	0x000839d5
   8537c:	20075808 	.word	0x20075808
   85380:	00083989 	.word	0x00083989

00085384 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   85384:	4b05      	ldr	r3, [pc, #20]	; (8539c <pvTaskIncrementMutexHeldCount+0x18>)
   85386:	681b      	ldr	r3, [r3, #0]
   85388:	b123      	cbz	r3, 85394 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
   8538a:	4b04      	ldr	r3, [pc, #16]	; (8539c <pvTaskIncrementMutexHeldCount+0x18>)
   8538c:	681a      	ldr	r2, [r3, #0]
   8538e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   85390:	3301      	adds	r3, #1
   85392:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
   85394:	4b01      	ldr	r3, [pc, #4]	; (8539c <pvTaskIncrementMutexHeldCount+0x18>)
   85396:	6818      	ldr	r0, [r3, #0]
	}
   85398:	4770      	bx	lr
   8539a:	bf00      	nop
   8539c:	20075780 	.word	0x20075780

000853a0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   853a0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   853a2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   853a4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   853a6:	4291      	cmp	r1, r2
   853a8:	d80c      	bhi.n	853c4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   853aa:	1ad2      	subs	r2, r2, r3
   853ac:	6983      	ldr	r3, [r0, #24]
   853ae:	429a      	cmp	r2, r3
   853b0:	d301      	bcc.n	853b6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   853b2:	2001      	movs	r0, #1
   853b4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   853b6:	1d01      	adds	r1, r0, #4
   853b8:	4b09      	ldr	r3, [pc, #36]	; (853e0 <prvInsertTimerInActiveList+0x40>)
   853ba:	6818      	ldr	r0, [r3, #0]
   853bc:	4b09      	ldr	r3, [pc, #36]	; (853e4 <prvInsertTimerInActiveList+0x44>)
   853be:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   853c0:	2000      	movs	r0, #0
   853c2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   853c4:	429a      	cmp	r2, r3
   853c6:	d201      	bcs.n	853cc <prvInsertTimerInActiveList+0x2c>
   853c8:	4299      	cmp	r1, r3
   853ca:	d206      	bcs.n	853da <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   853cc:	1d01      	adds	r1, r0, #4
   853ce:	4b06      	ldr	r3, [pc, #24]	; (853e8 <prvInsertTimerInActiveList+0x48>)
   853d0:	6818      	ldr	r0, [r3, #0]
   853d2:	4b04      	ldr	r3, [pc, #16]	; (853e4 <prvInsertTimerInActiveList+0x44>)
   853d4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   853d6:	2000      	movs	r0, #0
   853d8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   853da:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   853dc:	bd08      	pop	{r3, pc}
   853de:	bf00      	nop
   853e0:	2007588c 	.word	0x2007588c
   853e4:	000839a1 	.word	0x000839a1
   853e8:	20075888 	.word	0x20075888

000853ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   853ec:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   853ee:	4b10      	ldr	r3, [pc, #64]	; (85430 <prvCheckForValidListAndQueue+0x44>)
   853f0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   853f2:	4b10      	ldr	r3, [pc, #64]	; (85434 <prvCheckForValidListAndQueue+0x48>)
   853f4:	681b      	ldr	r3, [r3, #0]
   853f6:	b113      	cbz	r3, 853fe <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   853f8:	4b0f      	ldr	r3, [pc, #60]	; (85438 <prvCheckForValidListAndQueue+0x4c>)
   853fa:	4798      	blx	r3
   853fc:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   853fe:	4d0f      	ldr	r5, [pc, #60]	; (8543c <prvCheckForValidListAndQueue+0x50>)
   85400:	4628      	mov	r0, r5
   85402:	4e0f      	ldr	r6, [pc, #60]	; (85440 <prvCheckForValidListAndQueue+0x54>)
   85404:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   85406:	4c0f      	ldr	r4, [pc, #60]	; (85444 <prvCheckForValidListAndQueue+0x58>)
   85408:	4620      	mov	r0, r4
   8540a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8540c:	4b0e      	ldr	r3, [pc, #56]	; (85448 <prvCheckForValidListAndQueue+0x5c>)
   8540e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   85410:	4b0e      	ldr	r3, [pc, #56]	; (8544c <prvCheckForValidListAndQueue+0x60>)
   85412:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   85414:	2200      	movs	r2, #0
   85416:	210c      	movs	r1, #12
   85418:	2005      	movs	r0, #5
   8541a:	4b0d      	ldr	r3, [pc, #52]	; (85450 <prvCheckForValidListAndQueue+0x64>)
   8541c:	4798      	blx	r3
   8541e:	4b05      	ldr	r3, [pc, #20]	; (85434 <prvCheckForValidListAndQueue+0x48>)
   85420:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
   85422:	2800      	cmp	r0, #0
   85424:	d0e8      	beq.n	853f8 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
   85426:	490b      	ldr	r1, [pc, #44]	; (85454 <prvCheckForValidListAndQueue+0x68>)
   85428:	4b0b      	ldr	r3, [pc, #44]	; (85458 <prvCheckForValidListAndQueue+0x6c>)
   8542a:	4798      	blx	r3
   8542c:	e7e4      	b.n	853f8 <prvCheckForValidListAndQueue+0xc>
   8542e:	bf00      	nop
   85430:	00083ab5 	.word	0x00083ab5
   85434:	200758bc 	.word	0x200758bc
   85438:	00083afd 	.word	0x00083afd
   8543c:	20075890 	.word	0x20075890
   85440:	0008396d 	.word	0x0008396d
   85444:	200758a4 	.word	0x200758a4
   85448:	20075888 	.word	0x20075888
   8544c:	2007588c 	.word	0x2007588c
   85450:	00083f89 	.word	0x00083f89
   85454:	0008a8f8 	.word	0x0008a8f8
   85458:	000846dd 	.word	0x000846dd

0008545c <xTimerCreateTimerTask>:
{
   8545c:	b510      	push	{r4, lr}
   8545e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   85460:	4b0d      	ldr	r3, [pc, #52]	; (85498 <xTimerCreateTimerTask+0x3c>)
   85462:	4798      	blx	r3
	if( xTimerQueue != NULL )
   85464:	4b0d      	ldr	r3, [pc, #52]	; (8549c <xTimerCreateTimerTask+0x40>)
   85466:	681b      	ldr	r3, [r3, #0]
   85468:	b17b      	cbz	r3, 8548a <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
   8546a:	4b0d      	ldr	r3, [pc, #52]	; (854a0 <xTimerCreateTimerTask+0x44>)
   8546c:	9301      	str	r3, [sp, #4]
   8546e:	2304      	movs	r3, #4
   85470:	9300      	str	r3, [sp, #0]
   85472:	2300      	movs	r3, #0
   85474:	f44f 72a0 	mov.w	r2, #320	; 0x140
   85478:	490a      	ldr	r1, [pc, #40]	; (854a4 <xTimerCreateTimerTask+0x48>)
   8547a:	480b      	ldr	r0, [pc, #44]	; (854a8 <xTimerCreateTimerTask+0x4c>)
   8547c:	4c0b      	ldr	r4, [pc, #44]	; (854ac <xTimerCreateTimerTask+0x50>)
   8547e:	47a0      	blx	r4
	configASSERT( xReturn );
   85480:	4603      	mov	r3, r0
   85482:	b110      	cbz	r0, 8548a <xTimerCreateTimerTask+0x2e>
}
   85484:	4618      	mov	r0, r3
   85486:	b002      	add	sp, #8
   85488:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   8548a:	f44f 7188 	mov.w	r1, #272	; 0x110
   8548e:	4808      	ldr	r0, [pc, #32]	; (854b0 <xTimerCreateTimerTask+0x54>)
   85490:	4b08      	ldr	r3, [pc, #32]	; (854b4 <xTimerCreateTimerTask+0x58>)
   85492:	4798      	blx	r3
   85494:	2300      	movs	r3, #0
	return xReturn;
   85496:	e7f5      	b.n	85484 <xTimerCreateTimerTask+0x28>
   85498:	000853ed 	.word	0x000853ed
   8549c:	200758bc 	.word	0x200758bc
   854a0:	200758c0 	.word	0x200758c0
   854a4:	0008a900 	.word	0x0008a900
   854a8:	000855e1 	.word	0x000855e1
   854ac:	000848bd 	.word	0x000848bd
   854b0:	0008a908 	.word	0x0008a908
   854b4:	00085a0d 	.word	0x00085a0d

000854b8 <xTimerGenericCommand>:
{
   854b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   854ba:	b085      	sub	sp, #20
   854bc:	460c      	mov	r4, r1
   854be:	4616      	mov	r6, r2
   854c0:	461f      	mov	r7, r3
	configASSERT( xTimer );
   854c2:	4605      	mov	r5, r0
   854c4:	b1b0      	cbz	r0, 854f4 <xTimerGenericCommand+0x3c>
	if( xTimerQueue != NULL )
   854c6:	4b12      	ldr	r3, [pc, #72]	; (85510 <xTimerGenericCommand+0x58>)
   854c8:	6818      	ldr	r0, [r3, #0]
   854ca:	b1f8      	cbz	r0, 8550c <xTimerGenericCommand+0x54>
		xMessage.xMessageID = xCommandID;
   854cc:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   854ce:	9602      	str	r6, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   854d0:	9503      	str	r5, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   854d2:	2c05      	cmp	r4, #5
   854d4:	dc14      	bgt.n	85500 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   854d6:	4b0f      	ldr	r3, [pc, #60]	; (85514 <xTimerGenericCommand+0x5c>)
   854d8:	4798      	blx	r3
   854da:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   854dc:	f04f 0300 	mov.w	r3, #0
   854e0:	bf0c      	ite	eq
   854e2:	9a0a      	ldreq	r2, [sp, #40]	; 0x28
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   854e4:	461a      	movne	r2, r3
   854e6:	a901      	add	r1, sp, #4
   854e8:	4809      	ldr	r0, [pc, #36]	; (85510 <xTimerGenericCommand+0x58>)
   854ea:	6800      	ldr	r0, [r0, #0]
   854ec:	4c0a      	ldr	r4, [pc, #40]	; (85518 <xTimerGenericCommand+0x60>)
   854ee:	47a0      	blx	r4
}
   854f0:	b005      	add	sp, #20
   854f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( xTimer );
   854f4:	f240 1183 	movw	r1, #387	; 0x183
   854f8:	4808      	ldr	r0, [pc, #32]	; (8551c <xTimerGenericCommand+0x64>)
   854fa:	4b09      	ldr	r3, [pc, #36]	; (85520 <xTimerGenericCommand+0x68>)
   854fc:	4798      	blx	r3
   854fe:	e7e2      	b.n	854c6 <xTimerGenericCommand+0xe>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   85500:	2300      	movs	r3, #0
   85502:	463a      	mov	r2, r7
   85504:	a901      	add	r1, sp, #4
   85506:	4c07      	ldr	r4, [pc, #28]	; (85524 <xTimerGenericCommand+0x6c>)
   85508:	47a0      	blx	r4
   8550a:	e7f1      	b.n	854f0 <xTimerGenericCommand+0x38>
BaseType_t xReturn = pdFAIL;
   8550c:	2000      	movs	r0, #0
	return xReturn;
   8550e:	e7ef      	b.n	854f0 <xTimerGenericCommand+0x38>
   85510:	200758bc 	.word	0x200758bc
   85514:	00085121 	.word	0x00085121
   85518:	00084021 	.word	0x00084021
   8551c:	0008a908 	.word	0x0008a908
   85520:	00085a0d 	.word	0x00085a0d
   85524:	000841f9 	.word	0x000841f9

00085528 <prvSampleTimeNow>:
{
   85528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8552c:	b082      	sub	sp, #8
   8552e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   85530:	4b22      	ldr	r3, [pc, #136]	; (855bc <prvSampleTimeNow+0x94>)
   85532:	4798      	blx	r3
   85534:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
   85536:	4b22      	ldr	r3, [pc, #136]	; (855c0 <prvSampleTimeNow+0x98>)
   85538:	681b      	ldr	r3, [r3, #0]
   8553a:	4298      	cmp	r0, r3
   8553c:	d316      	bcc.n	8556c <prvSampleTimeNow+0x44>
		*pxTimerListsWereSwitched = pdFALSE;
   8553e:	2300      	movs	r3, #0
   85540:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
   85544:	4b1e      	ldr	r3, [pc, #120]	; (855c0 <prvSampleTimeNow+0x98>)
   85546:	601f      	str	r7, [r3, #0]
}
   85548:	4638      	mov	r0, r7
   8554a:	b002      	add	sp, #8
   8554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   85550:	2100      	movs	r1, #0
   85552:	9100      	str	r1, [sp, #0]
   85554:	460b      	mov	r3, r1
   85556:	4652      	mov	r2, sl
   85558:	4620      	mov	r0, r4
   8555a:	4c1a      	ldr	r4, [pc, #104]	; (855c4 <prvSampleTimeNow+0x9c>)
   8555c:	47a0      	blx	r4
				configASSERT( xResult );
   8555e:	b938      	cbnz	r0, 85570 <prvSampleTimeNow+0x48>
   85560:	f240 316f 	movw	r1, #879	; 0x36f
   85564:	4818      	ldr	r0, [pc, #96]	; (855c8 <prvSampleTimeNow+0xa0>)
   85566:	4b19      	ldr	r3, [pc, #100]	; (855cc <prvSampleTimeNow+0xa4>)
   85568:	4798      	blx	r3
   8556a:	e001      	b.n	85570 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8556c:	4d18      	ldr	r5, [pc, #96]	; (855d0 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8556e:	4e19      	ldr	r6, [pc, #100]	; (855d4 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   85570:	682b      	ldr	r3, [r5, #0]
   85572:	681a      	ldr	r2, [r3, #0]
   85574:	b1c2      	cbz	r2, 855a8 <prvSampleTimeNow+0x80>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   85576:	68db      	ldr	r3, [r3, #12]
   85578:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8557c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8557e:	f104 0904 	add.w	r9, r4, #4
   85582:	4648      	mov	r0, r9
   85584:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   85586:	6a63      	ldr	r3, [r4, #36]	; 0x24
   85588:	4620      	mov	r0, r4
   8558a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   8558c:	69e3      	ldr	r3, [r4, #28]
   8558e:	2b01      	cmp	r3, #1
   85590:	d1ee      	bne.n	85570 <prvSampleTimeNow+0x48>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   85592:	69a3      	ldr	r3, [r4, #24]
   85594:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   85596:	459a      	cmp	sl, r3
   85598:	d2da      	bcs.n	85550 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8559a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8559c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8559e:	4649      	mov	r1, r9
   855a0:	6828      	ldr	r0, [r5, #0]
   855a2:	4b0d      	ldr	r3, [pc, #52]	; (855d8 <prvSampleTimeNow+0xb0>)
   855a4:	4798      	blx	r3
   855a6:	e7e3      	b.n	85570 <prvSampleTimeNow+0x48>
	pxCurrentTimerList = pxOverflowTimerList;
   855a8:	4a0c      	ldr	r2, [pc, #48]	; (855dc <prvSampleTimeNow+0xb4>)
   855aa:	6810      	ldr	r0, [r2, #0]
   855ac:	4908      	ldr	r1, [pc, #32]	; (855d0 <prvSampleTimeNow+0xa8>)
   855ae:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   855b0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   855b2:	2301      	movs	r3, #1
   855b4:	f8c8 3000 	str.w	r3, [r8]
   855b8:	e7c4      	b.n	85544 <prvSampleTimeNow+0x1c>
   855ba:	bf00      	nop
   855bc:	00084b59 	.word	0x00084b59
   855c0:	200758b8 	.word	0x200758b8
   855c4:	000854b9 	.word	0x000854b9
   855c8:	0008a908 	.word	0x0008a908
   855cc:	00085a0d 	.word	0x00085a0d
   855d0:	20075888 	.word	0x20075888
   855d4:	000839d5 	.word	0x000839d5
   855d8:	000839a1 	.word	0x000839a1
   855dc:	2007588c 	.word	0x2007588c

000855e0 <prvTimerTask>:
{
   855e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855e4:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   855e6:	4f63      	ldr	r7, [pc, #396]	; (85774 <prvTimerTask+0x194>)
			( void ) xTaskResumeAll();
   855e8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 857a4 <prvTimerTask+0x1c4>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   855ec:	4d62      	ldr	r5, [pc, #392]	; (85778 <prvTimerTask+0x198>)
					portYIELD_WITHIN_API();
   855ee:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 857a8 <prvTimerTask+0x1c8>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   855f2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 857ac <prvTimerTask+0x1cc>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   855f6:	683b      	ldr	r3, [r7, #0]
   855f8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   855fa:	b172      	cbz	r2, 8561a <prvTimerTask+0x3a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   855fc:	68db      	ldr	r3, [r3, #12]
   855fe:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
   85600:	4b5e      	ldr	r3, [pc, #376]	; (8577c <prvTimerTask+0x19c>)
   85602:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   85604:	a803      	add	r0, sp, #12
   85606:	4b5e      	ldr	r3, [pc, #376]	; (85780 <prvTimerTask+0x1a0>)
   85608:	4798      	blx	r3
   8560a:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8560c:	9b03      	ldr	r3, [sp, #12]
   8560e:	2b00      	cmp	r3, #0
   85610:	d178      	bne.n	85704 <prvTimerTask+0x124>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   85612:	42b0      	cmp	r0, r6
   85614:	d24c      	bcs.n	856b0 <prvTimerTask+0xd0>
   85616:	2200      	movs	r2, #0
   85618:	e00f      	b.n	8563a <prvTimerTask+0x5a>
	vTaskSuspendAll();
   8561a:	4b58      	ldr	r3, [pc, #352]	; (8577c <prvTimerTask+0x19c>)
   8561c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8561e:	a803      	add	r0, sp, #12
   85620:	4b57      	ldr	r3, [pc, #348]	; (85780 <prvTimerTask+0x1a0>)
   85622:	4798      	blx	r3
   85624:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
   85626:	9b03      	ldr	r3, [sp, #12]
   85628:	2b00      	cmp	r3, #0
   8562a:	d16b      	bne.n	85704 <prvTimerTask+0x124>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   8562c:	4b55      	ldr	r3, [pc, #340]	; (85784 <prvTimerTask+0x1a4>)
   8562e:	681b      	ldr	r3, [r3, #0]
   85630:	681a      	ldr	r2, [r3, #0]
   85632:	fab2 f282 	clz	r2, r2
   85636:	0952      	lsrs	r2, r2, #5
   85638:	2600      	movs	r6, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   8563a:	1b31      	subs	r1, r6, r4
   8563c:	6828      	ldr	r0, [r5, #0]
   8563e:	4b52      	ldr	r3, [pc, #328]	; (85788 <prvTimerTask+0x1a8>)
   85640:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   85642:	47c0      	blx	r8
   85644:	b938      	cbnz	r0, 85656 <prvTimerTask+0x76>
					portYIELD_WITHIN_API();
   85646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8564a:	f8ca 3000 	str.w	r3, [sl]
   8564e:	f3bf 8f4f 	dsb	sy
   85652:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   85656:	4c4d      	ldr	r4, [pc, #308]	; (8578c <prvTimerTask+0x1ac>)
   85658:	2200      	movs	r2, #0
   8565a:	a903      	add	r1, sp, #12
   8565c:	6828      	ldr	r0, [r5, #0]
   8565e:	47a0      	blx	r4
   85660:	2800      	cmp	r0, #0
   85662:	d0c8      	beq.n	855f6 <prvTimerTask+0x16>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   85664:	9b03      	ldr	r3, [sp, #12]
   85666:	2b00      	cmp	r3, #0
   85668:	dbf6      	blt.n	85658 <prvTimerTask+0x78>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   8566a:	9e05      	ldr	r6, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   8566c:	6973      	ldr	r3, [r6, #20]
   8566e:	b10b      	cbz	r3, 85674 <prvTimerTask+0x94>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85670:	1d30      	adds	r0, r6, #4
   85672:	47c8      	blx	r9
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   85674:	a802      	add	r0, sp, #8
   85676:	4b42      	ldr	r3, [pc, #264]	; (85780 <prvTimerTask+0x1a0>)
   85678:	4798      	blx	r3
   8567a:	4683      	mov	fp, r0
			switch( xMessage.xMessageID )
   8567c:	9b03      	ldr	r3, [sp, #12]
   8567e:	2b09      	cmp	r3, #9
   85680:	d8ea      	bhi.n	85658 <prvTimerTask+0x78>
   85682:	a201      	add	r2, pc, #4	; (adr r2, 85688 <prvTimerTask+0xa8>)
   85684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85688:	00085709 	.word	0x00085709
   8568c:	00085709 	.word	0x00085709
   85690:	00085709 	.word	0x00085709
   85694:	00085659 	.word	0x00085659
   85698:	0008574b 	.word	0x0008574b
   8569c:	0008576d 	.word	0x0008576d
   856a0:	00085709 	.word	0x00085709
   856a4:	00085709 	.word	0x00085709
   856a8:	00085659 	.word	0x00085659
   856ac:	0008574b 	.word	0x0008574b
				( void ) xTaskResumeAll();
   856b0:	47c0      	blx	r8
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   856b2:	683b      	ldr	r3, [r7, #0]
   856b4:	68db      	ldr	r3, [r3, #12]
   856b6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   856ba:	f10b 0004 	add.w	r0, fp, #4
   856be:	47c8      	blx	r9
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   856c0:	f8db 301c 	ldr.w	r3, [fp, #28]
   856c4:	2b01      	cmp	r3, #1
   856c6:	d004      	beq.n	856d2 <prvTimerTask+0xf2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   856c8:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   856cc:	4658      	mov	r0, fp
   856ce:	4798      	blx	r3
   856d0:	e7c1      	b.n	85656 <prvTimerTask+0x76>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   856d2:	f8db 1018 	ldr.w	r1, [fp, #24]
   856d6:	4633      	mov	r3, r6
   856d8:	4622      	mov	r2, r4
   856da:	4431      	add	r1, r6
   856dc:	4658      	mov	r0, fp
   856de:	4c2c      	ldr	r4, [pc, #176]	; (85790 <prvTimerTask+0x1b0>)
   856e0:	47a0      	blx	r4
   856e2:	2800      	cmp	r0, #0
   856e4:	d0f0      	beq.n	856c8 <prvTimerTask+0xe8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   856e6:	2100      	movs	r1, #0
   856e8:	9100      	str	r1, [sp, #0]
   856ea:	460b      	mov	r3, r1
   856ec:	4632      	mov	r2, r6
   856ee:	4658      	mov	r0, fp
   856f0:	4c28      	ldr	r4, [pc, #160]	; (85794 <prvTimerTask+0x1b4>)
   856f2:	47a0      	blx	r4
			configASSERT( xResult );
   856f4:	2800      	cmp	r0, #0
   856f6:	d1e7      	bne.n	856c8 <prvTimerTask+0xe8>
   856f8:	f240 11e5 	movw	r1, #485	; 0x1e5
   856fc:	4826      	ldr	r0, [pc, #152]	; (85798 <prvTimerTask+0x1b8>)
   856fe:	4b27      	ldr	r3, [pc, #156]	; (8579c <prvTimerTask+0x1bc>)
   85700:	4798      	blx	r3
   85702:	e7e1      	b.n	856c8 <prvTimerTask+0xe8>
			( void ) xTaskResumeAll();
   85704:	47c0      	blx	r8
   85706:	e7a6      	b.n	85656 <prvTimerTask+0x76>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   85708:	9904      	ldr	r1, [sp, #16]
   8570a:	69b0      	ldr	r0, [r6, #24]
   8570c:	460b      	mov	r3, r1
   8570e:	465a      	mov	r2, fp
   85710:	4401      	add	r1, r0
   85712:	4630      	mov	r0, r6
   85714:	4c1e      	ldr	r4, [pc, #120]	; (85790 <prvTimerTask+0x1b0>)
   85716:	47a0      	blx	r4
   85718:	2800      	cmp	r0, #0
   8571a:	d09c      	beq.n	85656 <prvTimerTask+0x76>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8571c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   8571e:	4630      	mov	r0, r6
   85720:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85722:	69f3      	ldr	r3, [r6, #28]
   85724:	2b01      	cmp	r3, #1
   85726:	d196      	bne.n	85656 <prvTimerTask+0x76>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   85728:	69b2      	ldr	r2, [r6, #24]
   8572a:	2100      	movs	r1, #0
   8572c:	9100      	str	r1, [sp, #0]
   8572e:	460b      	mov	r3, r1
   85730:	9804      	ldr	r0, [sp, #16]
   85732:	4402      	add	r2, r0
   85734:	4630      	mov	r0, r6
   85736:	4c17      	ldr	r4, [pc, #92]	; (85794 <prvTimerTask+0x1b4>)
   85738:	47a0      	blx	r4
							configASSERT( xResult );
   8573a:	2800      	cmp	r0, #0
   8573c:	d18b      	bne.n	85656 <prvTimerTask+0x76>
   8573e:	f240 21fe 	movw	r1, #766	; 0x2fe
   85742:	4815      	ldr	r0, [pc, #84]	; (85798 <prvTimerTask+0x1b8>)
   85744:	4b15      	ldr	r3, [pc, #84]	; (8579c <prvTimerTask+0x1bc>)
   85746:	4798      	blx	r3
   85748:	e785      	b.n	85656 <prvTimerTask+0x76>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   8574a:	9b04      	ldr	r3, [sp, #16]
   8574c:	61b3      	str	r3, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8574e:	b13b      	cbz	r3, 85760 <prvTimerTask+0x180>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   85750:	69b1      	ldr	r1, [r6, #24]
   85752:	465b      	mov	r3, fp
   85754:	465a      	mov	r2, fp
   85756:	4459      	add	r1, fp
   85758:	4630      	mov	r0, r6
   8575a:	4c0d      	ldr	r4, [pc, #52]	; (85790 <prvTimerTask+0x1b0>)
   8575c:	47a0      	blx	r4
   8575e:	e77a      	b.n	85656 <prvTimerTask+0x76>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   85760:	f240 3115 	movw	r1, #789	; 0x315
   85764:	480c      	ldr	r0, [pc, #48]	; (85798 <prvTimerTask+0x1b8>)
   85766:	4b0d      	ldr	r3, [pc, #52]	; (8579c <prvTimerTask+0x1bc>)
   85768:	4798      	blx	r3
   8576a:	e7f1      	b.n	85750 <prvTimerTask+0x170>
						vPortFree( pxTimer );
   8576c:	4630      	mov	r0, r6
   8576e:	4b0c      	ldr	r3, [pc, #48]	; (857a0 <prvTimerTask+0x1c0>)
   85770:	4798      	blx	r3
   85772:	e770      	b.n	85656 <prvTimerTask+0x76>
   85774:	20075888 	.word	0x20075888
   85778:	200758bc 	.word	0x200758bc
   8577c:	00084b49 	.word	0x00084b49
   85780:	00085529 	.word	0x00085529
   85784:	2007588c 	.word	0x2007588c
   85788:	0008470d 	.word	0x0008470d
   8578c:	00084379 	.word	0x00084379
   85790:	000853a1 	.word	0x000853a1
   85794:	000854b9 	.word	0x000854b9
   85798:	0008a908 	.word	0x0008a908
   8579c:	00085a0d 	.word	0x00085a0d
   857a0:	00083d7d 	.word	0x00083d7d
   857a4:	00084cb5 	.word	0x00084cb5
   857a8:	e000ed04 	.word	0xe000ed04
   857ac:	000839d5 	.word	0x000839d5

000857b0 <Sm_DISCONNECTED>:
	}
}


void Sm_DISCONNECTED(void)
{
   857b0:	b508      	push	{r3, lr}
	vTaskDelay(100);
   857b2:	2064      	movs	r0, #100	; 0x64
   857b4:	4b01      	ldr	r3, [pc, #4]	; (857bc <Sm_DISCONNECTED+0xc>)
   857b6:	4798      	blx	r3
   857b8:	bd08      	pop	{r3, pc}
   857ba:	bf00      	nop
   857bc:	00084dd1 	.word	0x00084dd1

000857c0 <Sm_TURNING_RIGHT>:
}

void Sm_TURNING_RIGHT(void)
{
   857c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   857c2:	4e07      	ldr	r6, [pc, #28]	; (857e0 <Sm_TURNING_RIGHT+0x20>)
   857c4:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   857c8:	6337      	str	r7, [r6, #48]	; 0x30
   857ca:	4c06      	ldr	r4, [pc, #24]	; (857e4 <Sm_TURNING_RIGHT+0x24>)
   857cc:	f44f 7580 	mov.w	r5, #256	; 0x100
   857d0:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(IN12,HIGH);
	ioport_set_pin_level(IN13,HIGH);
	vTaskDelay(100);
   857d2:	2064      	movs	r0, #100	; 0x64
   857d4:	4b04      	ldr	r3, [pc, #16]	; (857e8 <Sm_TURNING_RIGHT+0x28>)
   857d6:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   857d8:	6377      	str	r7, [r6, #52]	; 0x34
   857da:	6365      	str	r5, [r4, #52]	; 0x34
   857dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   857de:	bf00      	nop
   857e0:	400e1200 	.word	0x400e1200
   857e4:	400e1400 	.word	0x400e1400
   857e8:	00084dd1 	.word	0x00084dd1

000857ec <Sm_TURNING_LEFT>:
	ioport_set_pin_level(IN12,LOW);
	ioport_set_pin_level(IN13,LOW);
}

void Sm_TURNING_LEFT(void)
{
   857ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   857ee:	4e07      	ldr	r6, [pc, #28]	; (8580c <Sm_TURNING_LEFT+0x20>)
   857f0:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
   857f4:	6337      	str	r7, [r6, #48]	; 0x30
   857f6:	4c06      	ldr	r4, [pc, #24]	; (85810 <Sm_TURNING_LEFT+0x24>)
   857f8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   857fc:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(IN11,HIGH);
	ioport_set_pin_level(IN14,HIGH);
	vTaskDelay(100);
   857fe:	2064      	movs	r0, #100	; 0x64
   85800:	4b04      	ldr	r3, [pc, #16]	; (85814 <Sm_TURNING_LEFT+0x28>)
   85802:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   85804:	6377      	str	r7, [r6, #52]	; 0x34
   85806:	6365      	str	r5, [r4, #52]	; 0x34
   85808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8580a:	bf00      	nop
   8580c:	400e1200 	.word	0x400e1200
   85810:	400e1000 	.word	0x400e1000
   85814:	00084dd1 	.word	0x00084dd1

00085818 <Sm_STANDBY>:
	ioport_set_pin_level(IN11,LOW);
	ioport_set_pin_level(IN14,LOW);
}

void Sm_STANDBY(void)
{
   85818:	b508      	push	{r3, lr}
	vTaskDelay(100);
   8581a:	2064      	movs	r0, #100	; 0x64
   8581c:	4b01      	ldr	r3, [pc, #4]	; (85824 <Sm_STANDBY+0xc>)
   8581e:	4798      	blx	r3
   85820:	bd08      	pop	{r3, pc}
   85822:	bf00      	nop
   85824:	00084dd1 	.word	0x00084dd1

00085828 <Sm_MOVING_REVERSE>:
}

void Sm_MOVING_REVERSE(void)
{
   85828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8582a:	4e07      	ldr	r6, [pc, #28]	; (85848 <Sm_MOVING_REVERSE+0x20>)
   8582c:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   85830:	6337      	str	r7, [r6, #48]	; 0x30
   85832:	4c06      	ldr	r4, [pc, #24]	; (8584c <Sm_MOVING_REVERSE+0x24>)
   85834:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   85838:	6325      	str	r5, [r4, #48]	; 0x30
	{
		// Frente: ENA1 IN11 ENB1 IN13
		// Tras: ENA1 IN12 ENB1 IN14
		ioport_set_pin_level(IN12,HIGH);
		ioport_set_pin_level(IN14,HIGH);
		vTaskDelay(100);
   8583a:	2064      	movs	r0, #100	; 0x64
   8583c:	4b04      	ldr	r3, [pc, #16]	; (85850 <Sm_MOVING_REVERSE+0x28>)
   8583e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   85840:	6377      	str	r7, [r6, #52]	; 0x34
   85842:	6365      	str	r5, [r4, #52]	; 0x34
   85844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85846:	bf00      	nop
   85848:	400e1200 	.word	0x400e1200
   8584c:	400e1000 	.word	0x400e1000
   85850:	00084dd1 	.word	0x00084dd1

00085854 <Sm_MOVING_FORWARD>:
	//taskEXIT_CRITICAL();
}

\
void Sm_MOVING_FORWARD(void)
{
   85854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   85856:	4e07      	ldr	r6, [pc, #28]	; (85874 <Sm_MOVING_FORWARD+0x20>)
   85858:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
   8585c:	6337      	str	r7, [r6, #48]	; 0x30
   8585e:	4c06      	ldr	r4, [pc, #24]	; (85878 <Sm_MOVING_FORWARD+0x24>)
   85860:	f44f 7580 	mov.w	r5, #256	; 0x100
   85864:	6325      	str	r5, [r4, #48]	; 0x30
//taskENTER_CRITICAL();
	ioport_set_pin_level(IN11,HIGH);
	ioport_set_pin_level(IN13,HIGH);
	vTaskDelay(100);
   85866:	2064      	movs	r0, #100	; 0x64
   85868:	4b04      	ldr	r3, [pc, #16]	; (8587c <Sm_MOVING_FORWARD+0x28>)
   8586a:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8586c:	6377      	str	r7, [r6, #52]	; 0x34
   8586e:	6365      	str	r5, [r4, #52]	; 0x34
   85870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85872:	bf00      	nop
   85874:	400e1200 	.word	0x400e1200
   85878:	400e1400 	.word	0x400e1400
   8587c:	00084dd1 	.word	0x00084dd1

00085880 <Rodar_Maquina>:
{
   85880:	b508      	push	{r3, lr}
	if(SmState < NUM_STATES)
   85882:	4b05      	ldr	r3, [pc, #20]	; (85898 <Rodar_Maquina+0x18>)
   85884:	781b      	ldrb	r3, [r3, #0]
   85886:	2b05      	cmp	r3, #5
   85888:	d900      	bls.n	8588c <Rodar_Maquina+0xc>
   8588a:	bd08      	pop	{r3, pc}
		(*StateMachine[SmState].func)();
   8588c:	4a03      	ldr	r2, [pc, #12]	; (8589c <Rodar_Maquina+0x1c>)
   8588e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   85892:	685b      	ldr	r3, [r3, #4]
   85894:	4798      	blx	r3
   85896:	e7f8      	b.n	8588a <Rodar_Maquina+0xa>
   85898:	200758c4 	.word	0x200758c4
   8589c:	20070278 	.word	0x20070278

000858a0 <vTaskFunction>:
		result_adc = adc_get_latest_value(ADC);
		result_adc = adc_get_channel_value(ADC,ADC_CHANNEL_13);
	}
}
void vTaskFunction( void * pvParameters )
{
   858a0:	b570      	push	{r4, r5, r6, lr}
	/* Block for 500ms. */
	result_adc=0;
   858a2:	2200      	movs	r2, #0
   858a4:	4b16      	ldr	r3, [pc, #88]	; (85900 <vTaskFunction+0x60>)
   858a6:	601a      	str	r2, [r3, #0]
	const TickType_t xDelay = 10 / portTICK_PERIOD_MS;
	pmc_enable_periph_clk(ID_ADC);
   858a8:	2025      	movs	r0, #37	; 0x25
   858aa:	4b16      	ldr	r3, [pc, #88]	; (85904 <vTaskFunction+0x64>)
   858ac:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
   858ae:	4c16      	ldr	r4, [pc, #88]	; (85908 <vTaskFunction+0x68>)
   858b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   858b4:	4a15      	ldr	r2, [pc, #84]	; (8590c <vTaskFunction+0x6c>)
   858b6:	4916      	ldr	r1, [pc, #88]	; (85910 <vTaskFunction+0x70>)
   858b8:	4620      	mov	r0, r4
   858ba:	4d16      	ldr	r5, [pc, #88]	; (85914 <vTaskFunction+0x74>)
   858bc:	47a8      	blx	r5
	adc_configure_timing(ADC, 1, ADC_SETTLING_TIME_3, 1);
   858be:	2301      	movs	r3, #1
   858c0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   858c4:	4619      	mov	r1, r3
   858c6:	4620      	mov	r0, r4
   858c8:	4d13      	ldr	r5, [pc, #76]	; (85918 <vTaskFunction+0x78>)
   858ca:	47a8      	blx	r5
	adc_enable_tag(ADC);
   858cc:	4620      	mov	r0, r4
   858ce:	4b13      	ldr	r3, [pc, #76]	; (8591c <vTaskFunction+0x7c>)
   858d0:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_13);
   858d2:	210d      	movs	r1, #13
   858d4:	4620      	mov	r0, r4
   858d6:	4b12      	ldr	r3, [pc, #72]	; (85920 <vTaskFunction+0x80>)
   858d8:	4798      	blx	r3
	adc_enable_interrupt(ADC, ADC_IER_DRDY);
   858da:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   858de:	4620      	mov	r0, r4
   858e0:	4b10      	ldr	r3, [pc, #64]	; (85924 <vTaskFunction+0x84>)
   858e2:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   858e4:	2220      	movs	r2, #32
   858e6:	4b10      	ldr	r3, [pc, #64]	; (85928 <vTaskFunction+0x88>)
   858e8:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(ADC_IRQn);
	
	for( ;; )
	{
		/* Simply toggle the LED every 500ms, blocking between each toggle. */
		Rodar_Maquina();
   858ea:	4e10      	ldr	r6, [pc, #64]	; (8592c <vTaskFunction+0x8c>)
		adc_start(ADC);
   858ec:	4625      	mov	r5, r4
   858ee:	4c10      	ldr	r4, [pc, #64]	; (85930 <vTaskFunction+0x90>)
		Rodar_Maquina();
   858f0:	47b0      	blx	r6
		adc_start(ADC);
   858f2:	4628      	mov	r0, r5
   858f4:	47a0      	blx	r4
		vTaskDelay( xDelay );
   858f6:	200a      	movs	r0, #10
   858f8:	4b0e      	ldr	r3, [pc, #56]	; (85934 <vTaskFunction+0x94>)
   858fa:	4798      	blx	r3
   858fc:	e7f8      	b.n	858f0 <vTaskFunction+0x50>
   858fe:	bf00      	nop
   85900:	20075920 	.word	0x20075920
   85904:	000820a5 	.word	0x000820a5
   85908:	400c0000 	.word	0x400c0000
   8590c:	0061a800 	.word	0x0061a800
   85910:	0501bd00 	.word	0x0501bd00
   85914:	00081cdd 	.word	0x00081cdd
   85918:	00081d11 	.word	0x00081d11
   8591c:	00081d4f 	.word	0x00081d4f
   85920:	00081d33 	.word	0x00081d33
   85924:	00081d59 	.word	0x00081d59
   85928:	e000e100 	.word	0xe000e100
   8592c:	00085881 	.word	0x00085881
   85930:	00081d2d 	.word	0x00081d2d
   85934:	00084dd1 	.word	0x00084dd1

00085938 <main>:
{
   85938:	b500      	push	{lr}
   8593a:	b083      	sub	sp, #12
/*-----------------------------------------------------------*/

static void prvSetupHardware(void)
{
	/* ASF function to setup clocking. */
	sysclk_init();
   8593c:	4b11      	ldr	r3, [pc, #68]	; (85984 <main+0x4c>)
   8593e:	4798      	blx	r3
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   85940:	4a11      	ldr	r2, [pc, #68]	; (85988 <main+0x50>)
   85942:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
   85944:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
   85948:	041b      	lsls	r3, r3, #16
   8594a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
   8594c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   85950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
   85954:	60d3      	str	r3, [r2, #12]

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   85956:	4b0d      	ldr	r3, [pc, #52]	; (8598c <main+0x54>)
   85958:	4798      	blx	r3

	/* Perform any initialisation required by the partest LED IO functions. */
	vParTestInitialise();
   8595a:	4b0d      	ldr	r3, [pc, #52]	; (85990 <main+0x58>)
   8595c:	4798      	blx	r3
	create_usart_echo_test_tasks(BOARD_USART,
   8595e:	2200      	movs	r2, #0
   85960:	21a0      	movs	r1, #160	; 0xa0
   85962:	480c      	ldr	r0, [pc, #48]	; (85994 <main+0x5c>)
   85964:	4b0c      	ldr	r3, [pc, #48]	; (85998 <main+0x60>)
   85966:	4798      	blx	r3
	xTaskCreate(vTaskFunction,			/* The task that implements the command console. */
   85968:	2300      	movs	r3, #0
   8596a:	9301      	str	r3, [sp, #4]
   8596c:	2301      	movs	r3, #1
   8596e:	9300      	str	r3, [sp, #0]
   85970:	f44f 72a0 	mov.w	r2, #320	; 0x140
   85974:	4909      	ldr	r1, [pc, #36]	; (8599c <main+0x64>)
   85976:	480a      	ldr	r0, [pc, #40]	; (859a0 <main+0x68>)
   85978:	4c0a      	ldr	r4, [pc, #40]	; (859a4 <main+0x6c>)
   8597a:	47a0      	blx	r4
	vTaskStartScheduler();
   8597c:	4b0a      	ldr	r3, [pc, #40]	; (859a8 <main+0x70>)
   8597e:	4798      	blx	r3
   85980:	e7fe      	b.n	85980 <main+0x48>
   85982:	bf00      	nop
   85984:	00080161 	.word	0x00080161
   85988:	e000ed00 	.word	0xe000ed00
   8598c:	00081c45 	.word	0x00081c45
   85990:	00085af1 	.word	0x00085af1
   85994:	40098000 	.word	0x40098000
   85998:	0008385d 	.word	0x0008385d
   8599c:	0008a948 	.word	0x0008a948
   859a0:	000858a1 	.word	0x000858a1
   859a4:	000848bd 	.word	0x000848bd
   859a8:	00084ab1 	.word	0x00084ab1

000859ac <ADC_Handler>:
{
   859ac:	b538      	push	{r3, r4, r5, lr}
	if ((adc_get_status(ADC) & ADC_ISR_DRDY) == ADC_ISR_DRDY) 
   859ae:	4809      	ldr	r0, [pc, #36]	; (859d4 <ADC_Handler+0x28>)
   859b0:	4b09      	ldr	r3, [pc, #36]	; (859d8 <ADC_Handler+0x2c>)
   859b2:	4798      	blx	r3
   859b4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   859b8:	d100      	bne.n	859bc <ADC_Handler+0x10>
   859ba:	bd38      	pop	{r3, r4, r5, pc}
		result_adc = adc_get_latest_value(ADC);
   859bc:	4d05      	ldr	r5, [pc, #20]	; (859d4 <ADC_Handler+0x28>)
   859be:	4628      	mov	r0, r5
   859c0:	4b06      	ldr	r3, [pc, #24]	; (859dc <ADC_Handler+0x30>)
   859c2:	4798      	blx	r3
   859c4:	4c06      	ldr	r4, [pc, #24]	; (859e0 <ADC_Handler+0x34>)
   859c6:	6020      	str	r0, [r4, #0]
		result_adc = adc_get_channel_value(ADC,ADC_CHANNEL_13);
   859c8:	210d      	movs	r1, #13
   859ca:	4628      	mov	r0, r5
   859cc:	4b05      	ldr	r3, [pc, #20]	; (859e4 <ADC_Handler+0x38>)
   859ce:	4798      	blx	r3
   859d0:	6020      	str	r0, [r4, #0]
}
   859d2:	e7f2      	b.n	859ba <ADC_Handler+0xe>
   859d4:	400c0000 	.word	0x400c0000
   859d8:	00081d5d 	.word	0x00081d5d
   859dc:	00081d4b 	.word	0x00081d4b
   859e0:	20075920 	.word	0x20075920
   859e4:	00081d3d 	.word	0x00081d3d

000859e8 <vApplicationMallocFailedHook>:
	__asm volatile
   859e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   859ec:	f383 8811 	msr	BASEPRI, r3
   859f0:	f3bf 8f6f 	isb	sy
   859f4:	f3bf 8f4f 	dsb	sy
   859f8:	e7fe      	b.n	859f8 <vApplicationMallocFailedHook+0x10>

000859fa <vApplicationStackOverflowHook>:
   859fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
   859fe:	f383 8811 	msr	BASEPRI, r3
   85a02:	f3bf 8f6f 	isb	sy
   85a06:	f3bf 8f4f 	dsb	sy
   85a0a:	e7fe      	b.n	85a0a <vApplicationStackOverflowHook+0x10>

00085a0c <assert_triggered>:
}

/*-----------------------------------------------------------*/

void assert_triggered(const char *file, uint32_t line)
{
   85a0c:	b500      	push	{lr}
   85a0e:	b083      	sub	sp, #12
	volatile uint32_t block_var = 0, line_in;
   85a10:	2300      	movs	r3, #0
   85a12:	9301      	str	r3, [sp, #4]
	const char *file_in;

	/* These assignments are made to prevent the compiler optimizing the
	values away. */
	file_in = file;
	line_in = line;
   85a14:	9100      	str	r1, [sp, #0]
	(void) file_in;
	(void) line_in;
   85a16:	9b00      	ldr	r3, [sp, #0]

	taskENTER_CRITICAL();
   85a18:	4b04      	ldr	r3, [pc, #16]	; (85a2c <assert_triggered+0x20>)
   85a1a:	4798      	blx	r3
	{
		while (block_var == 0) {
   85a1c:	9b01      	ldr	r3, [sp, #4]
   85a1e:	2b00      	cmp	r3, #0
   85a20:	d0fc      	beq.n	85a1c <assert_triggered+0x10>
			/* Set block_var to a non-zero value in the debugger to
			step out of this function. */
		}
	}
	taskEXIT_CRITICAL();
   85a22:	4b03      	ldr	r3, [pc, #12]	; (85a30 <assert_triggered+0x24>)
   85a24:	4798      	blx	r3
   85a26:	b003      	add	sp, #12
   85a28:	f85d fb04 	ldr.w	pc, [sp], #4
   85a2c:	00083ab5 	.word	0x00083ab5
   85a30:	00083afd 	.word	0x00083afd

00085a34 <vParTestSetLED>:

/*-----------------------------------------------------------*/

void vParTestSetLED(unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue)
{
	if (uxLED < partestNUM_LEDS) {
   85a34:	2802      	cmp	r0, #2
   85a36:	d852      	bhi.n	85ade <vParTestSetLED+0xaa>
{
   85a38:	b510      	push	{r4, lr}
   85a3a:	4604      	mov	r4, r0
		if (xValue != pdFALSE) {
   85a3c:	b339      	cbz	r1, 85a8e <vParTestSetLED+0x5a>
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   85a3e:	4b28      	ldr	r3, [pc, #160]	; (85ae0 <vParTestSetLED+0xac>)
   85a40:	4798      	blx	r3
			{
				if (xActiveStates[ uxLED ] == 0) {
   85a42:	4b28      	ldr	r3, [pc, #160]	; (85ae4 <vParTestSetLED+0xb0>)
   85a44:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   85a48:	b98b      	cbnz	r3, 85a6e <vParTestSetLED+0x3a>
					ioport_set_pin_level(ulLED[ uxLED ], IOPORT_PIN_LEVEL_LOW);
   85a4a:	4b27      	ldr	r3, [pc, #156]	; (85ae8 <vParTestSetLED+0xb4>)
   85a4c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
	return pin >> 5;
   85a50:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   85a52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85a56:	f203 7307 	addw	r3, r3, #1799	; 0x707
   85a5a:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   85a5c:	f002 021f 	and.w	r2, r2, #31
   85a60:	2101      	movs	r1, #1
   85a62:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   85a66:	635a      	str	r2, [r3, #52]	; 0x34
				} else {
					ioport_set_pin_level(ulLED[ uxLED ], IOPORT_PIN_LEVEL_HIGH);
				}
			}
			taskEXIT_CRITICAL();
   85a68:	4b20      	ldr	r3, [pc, #128]	; (85aec <vParTestSetLED+0xb8>)
   85a6a:	4798      	blx	r3
   85a6c:	bd10      	pop	{r4, pc}
					ioport_set_pin_level(ulLED[ uxLED ], IOPORT_PIN_LEVEL_HIGH);
   85a6e:	4b1e      	ldr	r3, [pc, #120]	; (85ae8 <vParTestSetLED+0xb4>)
   85a70:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
	return pin >> 5;
   85a74:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   85a76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85a7a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   85a7e:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   85a80:	f002 021f 	and.w	r2, r2, #31
   85a84:	2101      	movs	r1, #1
   85a86:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   85a8a:	631a      	str	r2, [r3, #48]	; 0x30
   85a8c:	e7ec      	b.n	85a68 <vParTestSetLED+0x34>
		} else {
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   85a8e:	4b14      	ldr	r3, [pc, #80]	; (85ae0 <vParTestSetLED+0xac>)
   85a90:	4798      	blx	r3
			{
				if (xActiveStates[ uxLED ] == 0) {
   85a92:	4b14      	ldr	r3, [pc, #80]	; (85ae4 <vParTestSetLED+0xb0>)
   85a94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   85a98:	b98b      	cbnz	r3, 85abe <vParTestSetLED+0x8a>
					ioport_set_pin_level(ulLED[ uxLED ], IOPORT_PIN_LEVEL_HIGH);
   85a9a:	4b13      	ldr	r3, [pc, #76]	; (85ae8 <vParTestSetLED+0xb4>)
   85a9c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
	return pin >> 5;
   85aa0:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   85aa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85aa6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   85aaa:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   85aac:	f002 021f 	and.w	r2, r2, #31
   85ab0:	2101      	movs	r1, #1
   85ab2:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   85ab6:	631a      	str	r2, [r3, #48]	; 0x30
				} else {
					ioport_set_pin_level(ulLED[ uxLED ], IOPORT_PIN_LEVEL_LOW);
				}
			}
			taskEXIT_CRITICAL();
   85ab8:	4b0c      	ldr	r3, [pc, #48]	; (85aec <vParTestSetLED+0xb8>)
   85aba:	4798      	blx	r3
   85abc:	bd10      	pop	{r4, pc}
					ioport_set_pin_level(ulLED[ uxLED ], IOPORT_PIN_LEVEL_LOW);
   85abe:	4b0a      	ldr	r3, [pc, #40]	; (85ae8 <vParTestSetLED+0xb4>)
   85ac0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
	return pin >> 5;
   85ac4:	0953      	lsrs	r3, r2, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   85ac6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85aca:	f203 7307 	addw	r3, r3, #1799	; 0x707
   85ace:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   85ad0:	f002 021f 	and.w	r2, r2, #31
   85ad4:	2101      	movs	r1, #1
   85ad6:	fa01 f202 	lsl.w	r2, r1, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   85ada:	635a      	str	r2, [r3, #52]	; 0x34
   85adc:	e7ec      	b.n	85ab8 <vParTestSetLED+0x84>
   85ade:	4770      	bx	lr
   85ae0:	00083ab5 	.word	0x00083ab5
   85ae4:	0008a95c 	.word	0x0008a95c
   85ae8:	0008a950 	.word	0x0008a950
   85aec:	00083afd 	.word	0x00083afd

00085af0 <vParTestInitialise>:
{
   85af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (ul = 0; ul < partestNUM_LEDS; ul++) {
   85af4:	2600      	movs	r6, #0
		ioport_set_pin_dir(ulLED[ ul ], IOPORT_DIR_OUTPUT);
   85af6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 85b98 <vParTestInitialise+0xa8>
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85afa:	4c22      	ldr	r4, [pc, #136]	; (85b84 <vParTestInitialise+0x94>)
   85afc:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
   85b00:	4d21      	ldr	r5, [pc, #132]	; (85b88 <vParTestInitialise+0x98>)
   85b02:	4f22      	ldr	r7, [pc, #136]	; (85b8c <vParTestInitialise+0x9c>)
   85b04:	f859 1026 	ldr.w	r1, [r9, r6, lsl #2]
	return pin >> 5;
   85b08:	094b      	lsrs	r3, r1, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   85b0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85b0e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   85b12:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   85b14:	f001 011f 	and.w	r1, r1, #31
   85b18:	2201      	movs	r2, #1
   85b1a:	408a      	lsls	r2, r1
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85b1c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   85b1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85b22:	f8c4 8010 	str.w	r8, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   85b26:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85b2a:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
   85b2e:	f8c4 e010 	str.w	lr, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   85b32:	f8c4 e0a0 	str.w	lr, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85b36:	f44f 7080 	mov.w	r0, #256	; 0x100
   85b3a:	6128      	str	r0, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   85b3c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85b40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85b44:	6139      	str	r1, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   85b46:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   85b4e:	6123      	str	r3, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   85b50:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   85b54:	2280      	movs	r2, #128	; 0x80
   85b56:	612a      	str	r2, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   85b58:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   85b5c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   85b60:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
   85b64:	6368      	str	r0, [r5, #52]	; 0x34
   85b66:	6379      	str	r1, [r7, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   85b68:	632a      	str	r2, [r5, #48]	; 0x30
   85b6a:	6323      	str	r3, [r4, #48]	; 0x30
		vParTestSetLED(ul, xActiveStates[ ul ]);
   85b6c:	4b08      	ldr	r3, [pc, #32]	; (85b90 <vParTestInitialise+0xa0>)
   85b6e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   85b72:	4630      	mov	r0, r6
   85b74:	4b07      	ldr	r3, [pc, #28]	; (85b94 <vParTestInitialise+0xa4>)
   85b76:	4798      	blx	r3
	for (ul = 0; ul < partestNUM_LEDS; ul++) {
   85b78:	3601      	adds	r6, #1
   85b7a:	2e03      	cmp	r6, #3
   85b7c:	d1c2      	bne.n	85b04 <vParTestInitialise+0x14>
}
   85b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85b82:	bf00      	nop
   85b84:	400e1200 	.word	0x400e1200
   85b88:	400e1400 	.word	0x400e1400
   85b8c:	400e1000 	.word	0x400e1000
   85b90:	0008a95c 	.word	0x0008a95c
   85b94:	00085a35 	.word	0x00085a35
   85b98:	0008a950 	.word	0x0008a950

00085b9c <configure_timer_for_run_time_stats>:
/*-----------------------------------------------------------*/

void configure_timer_for_run_time_stats(void)
{
	/* How many clocks are there per tenth of a millisecond? */
	clocks_per_10th_ms = configCPU_CLOCK_HZ / 10000UL;
   85b9c:	f242 02d0 	movw	r2, #8400	; 0x20d0
   85ba0:	4b01      	ldr	r3, [pc, #4]	; (85ba8 <configure_timer_for_run_time_stats+0xc>)
   85ba2:	601a      	str	r2, [r3, #0]
   85ba4:	4770      	bx	lr
   85ba6:	bf00      	nop
   85ba8:	200758c8 	.word	0x200758c8

00085bac <get_run_time_counter_value>:
}

/*-----------------------------------------------------------*/

uint32_t get_run_time_counter_value(void)
{
   85bac:	b510      	push	{r4, lr}
	used anyway to keep the examples simple, and to avoid reliance on a
	separate timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it
	was last reloaded? */
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
   85bae:	4b13      	ldr	r3, [pc, #76]	; (85bfc <get_run_time_counter_value+0x50>)
   85bb0:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	tick_count = xTaskGetTickCountFromISR();
   85bb2:	4b13      	ldr	r3, [pc, #76]	; (85c00 <get_run_time_counter_value+0x54>)
   85bb4:	4798      	blx	r3
	__asm volatile
   85bb6:	f3ef 8311 	mrs	r3, BASEPRI
   85bba:	f04f 02a0 	mov.w	r2, #160	; 0xa0
   85bbe:	f382 8811 	msr	BASEPRI, r2
   85bc2:	f3bf 8f6f 	isb	sy
   85bc6:	f3bf 8f4f 	dsb	sy
	so reset the critical section. */
	ulReturn = portSET_INTERRUPT_MASK_FROM_ISR();
	(void) ulReturn;

	/* Is there a SysTick interrupt pending? */
	if ((*interrupt_ctrl_statee & sys_tick_pending_bit) != 0UL) {
   85bca:	4b0e      	ldr	r3, [pc, #56]	; (85c04 <get_run_time_counter_value+0x58>)
   85bcc:	681b      	ldr	r3, [r3, #0]
   85bce:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
   85bd2:	d00e      	beq.n	85bf2 <get_run_time_counter_value+0x46>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		tick_count++;
   85bd4:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		sys_tick_counts = sys_tick_reload_value -
				*current_sys_tick_count;
   85bd6:	4b09      	ldr	r3, [pc, #36]	; (85bfc <get_run_time_counter_value+0x50>)
   85bd8:	681b      	ldr	r3, [r3, #0]
		sys_tick_counts = sys_tick_reload_value -
   85bda:	f5c3 33a4 	rsb	r3, r3, #83968	; 0x14800
   85bde:	331f      	adds	r3, #31
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = (tick_count * 10UL);
   85be0:	eb00 0080 	add.w	r0, r0, r0, lsl #2

	/* Add on the number of tenths of a millisecond that have passed since
	the tick count last got updated. */
	ulReturn += (sys_tick_counts / clocks_per_10th_ms);
   85be4:	4a08      	ldr	r2, [pc, #32]	; (85c08 <get_run_time_counter_value+0x5c>)
   85be6:	6812      	ldr	r2, [r2, #0]
   85be8:	fbb3 f3f2 	udiv	r3, r3, r2

	return ulReturn;
}
   85bec:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   85bf0:	bd10      	pop	{r4, pc}
	sys_tick_counts = sys_tick_reload_value - *current_sys_tick_count;
   85bf2:	f5c4 33a4 	rsb	r3, r4, #83968	; 0x14800
   85bf6:	331f      	adds	r3, #31
   85bf8:	e7f2      	b.n	85be0 <get_run_time_counter_value+0x34>
   85bfa:	bf00      	nop
   85bfc:	e000e018 	.word	0xe000e018
   85c00:	00084b65 	.word	0x00084b65
   85c04:	e000ed04 	.word	0xe000ed04
   85c08:	200758c8 	.word	0x200758c8

00085c0c <__libc_init_array>:
   85c0c:	b570      	push	{r4, r5, r6, lr}
   85c0e:	4e0f      	ldr	r6, [pc, #60]	; (85c4c <__libc_init_array+0x40>)
   85c10:	4d0f      	ldr	r5, [pc, #60]	; (85c50 <__libc_init_array+0x44>)
   85c12:	1b76      	subs	r6, r6, r5
   85c14:	10b6      	asrs	r6, r6, #2
   85c16:	bf18      	it	ne
   85c18:	2400      	movne	r4, #0
   85c1a:	d005      	beq.n	85c28 <__libc_init_array+0x1c>
   85c1c:	3401      	adds	r4, #1
   85c1e:	f855 3b04 	ldr.w	r3, [r5], #4
   85c22:	4798      	blx	r3
   85c24:	42a6      	cmp	r6, r4
   85c26:	d1f9      	bne.n	85c1c <__libc_init_array+0x10>
   85c28:	4e0a      	ldr	r6, [pc, #40]	; (85c54 <__libc_init_array+0x48>)
   85c2a:	4d0b      	ldr	r5, [pc, #44]	; (85c58 <__libc_init_array+0x4c>)
   85c2c:	f004 ffe0 	bl	8abf0 <_init>
   85c30:	1b76      	subs	r6, r6, r5
   85c32:	10b6      	asrs	r6, r6, #2
   85c34:	bf18      	it	ne
   85c36:	2400      	movne	r4, #0
   85c38:	d006      	beq.n	85c48 <__libc_init_array+0x3c>
   85c3a:	3401      	adds	r4, #1
   85c3c:	f855 3b04 	ldr.w	r3, [r5], #4
   85c40:	4798      	blx	r3
   85c42:	42a6      	cmp	r6, r4
   85c44:	d1f9      	bne.n	85c3a <__libc_init_array+0x2e>
   85c46:	bd70      	pop	{r4, r5, r6, pc}
   85c48:	bd70      	pop	{r4, r5, r6, pc}
   85c4a:	bf00      	nop
   85c4c:	0008abfc 	.word	0x0008abfc
   85c50:	0008abfc 	.word	0x0008abfc
   85c54:	0008ac04 	.word	0x0008ac04
   85c58:	0008abfc 	.word	0x0008abfc

00085c5c <memcpy>:
   85c5c:	4684      	mov	ip, r0
   85c5e:	ea41 0300 	orr.w	r3, r1, r0
   85c62:	f013 0303 	ands.w	r3, r3, #3
   85c66:	d149      	bne.n	85cfc <memcpy+0xa0>
   85c68:	3a40      	subs	r2, #64	; 0x40
   85c6a:	d323      	bcc.n	85cb4 <memcpy+0x58>
   85c6c:	680b      	ldr	r3, [r1, #0]
   85c6e:	6003      	str	r3, [r0, #0]
   85c70:	684b      	ldr	r3, [r1, #4]
   85c72:	6043      	str	r3, [r0, #4]
   85c74:	688b      	ldr	r3, [r1, #8]
   85c76:	6083      	str	r3, [r0, #8]
   85c78:	68cb      	ldr	r3, [r1, #12]
   85c7a:	60c3      	str	r3, [r0, #12]
   85c7c:	690b      	ldr	r3, [r1, #16]
   85c7e:	6103      	str	r3, [r0, #16]
   85c80:	694b      	ldr	r3, [r1, #20]
   85c82:	6143      	str	r3, [r0, #20]
   85c84:	698b      	ldr	r3, [r1, #24]
   85c86:	6183      	str	r3, [r0, #24]
   85c88:	69cb      	ldr	r3, [r1, #28]
   85c8a:	61c3      	str	r3, [r0, #28]
   85c8c:	6a0b      	ldr	r3, [r1, #32]
   85c8e:	6203      	str	r3, [r0, #32]
   85c90:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85c92:	6243      	str	r3, [r0, #36]	; 0x24
   85c94:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85c96:	6283      	str	r3, [r0, #40]	; 0x28
   85c98:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85c9a:	62c3      	str	r3, [r0, #44]	; 0x2c
   85c9c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85c9e:	6303      	str	r3, [r0, #48]	; 0x30
   85ca0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85ca2:	6343      	str	r3, [r0, #52]	; 0x34
   85ca4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85ca6:	6383      	str	r3, [r0, #56]	; 0x38
   85ca8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85caa:	63c3      	str	r3, [r0, #60]	; 0x3c
   85cac:	3040      	adds	r0, #64	; 0x40
   85cae:	3140      	adds	r1, #64	; 0x40
   85cb0:	3a40      	subs	r2, #64	; 0x40
   85cb2:	d2db      	bcs.n	85c6c <memcpy+0x10>
   85cb4:	3230      	adds	r2, #48	; 0x30
   85cb6:	d30b      	bcc.n	85cd0 <memcpy+0x74>
   85cb8:	680b      	ldr	r3, [r1, #0]
   85cba:	6003      	str	r3, [r0, #0]
   85cbc:	684b      	ldr	r3, [r1, #4]
   85cbe:	6043      	str	r3, [r0, #4]
   85cc0:	688b      	ldr	r3, [r1, #8]
   85cc2:	6083      	str	r3, [r0, #8]
   85cc4:	68cb      	ldr	r3, [r1, #12]
   85cc6:	60c3      	str	r3, [r0, #12]
   85cc8:	3010      	adds	r0, #16
   85cca:	3110      	adds	r1, #16
   85ccc:	3a10      	subs	r2, #16
   85cce:	d2f3      	bcs.n	85cb8 <memcpy+0x5c>
   85cd0:	320c      	adds	r2, #12
   85cd2:	d305      	bcc.n	85ce0 <memcpy+0x84>
   85cd4:	f851 3b04 	ldr.w	r3, [r1], #4
   85cd8:	f840 3b04 	str.w	r3, [r0], #4
   85cdc:	3a04      	subs	r2, #4
   85cde:	d2f9      	bcs.n	85cd4 <memcpy+0x78>
   85ce0:	3204      	adds	r2, #4
   85ce2:	d008      	beq.n	85cf6 <memcpy+0x9a>
   85ce4:	07d2      	lsls	r2, r2, #31
   85ce6:	bf1c      	itt	ne
   85ce8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85cec:	f800 3b01 	strbne.w	r3, [r0], #1
   85cf0:	d301      	bcc.n	85cf6 <memcpy+0x9a>
   85cf2:	880b      	ldrh	r3, [r1, #0]
   85cf4:	8003      	strh	r3, [r0, #0]
   85cf6:	4660      	mov	r0, ip
   85cf8:	4770      	bx	lr
   85cfa:	bf00      	nop
   85cfc:	2a08      	cmp	r2, #8
   85cfe:	d313      	bcc.n	85d28 <memcpy+0xcc>
   85d00:	078b      	lsls	r3, r1, #30
   85d02:	d0b1      	beq.n	85c68 <memcpy+0xc>
   85d04:	f010 0303 	ands.w	r3, r0, #3
   85d08:	d0ae      	beq.n	85c68 <memcpy+0xc>
   85d0a:	f1c3 0304 	rsb	r3, r3, #4
   85d0e:	1ad2      	subs	r2, r2, r3
   85d10:	07db      	lsls	r3, r3, #31
   85d12:	bf1c      	itt	ne
   85d14:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85d18:	f800 3b01 	strbne.w	r3, [r0], #1
   85d1c:	d3a4      	bcc.n	85c68 <memcpy+0xc>
   85d1e:	f831 3b02 	ldrh.w	r3, [r1], #2
   85d22:	f820 3b02 	strh.w	r3, [r0], #2
   85d26:	e79f      	b.n	85c68 <memcpy+0xc>
   85d28:	3a04      	subs	r2, #4
   85d2a:	d3d9      	bcc.n	85ce0 <memcpy+0x84>
   85d2c:	3a01      	subs	r2, #1
   85d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
   85d32:	f800 3b01 	strb.w	r3, [r0], #1
   85d36:	d2f9      	bcs.n	85d2c <memcpy+0xd0>
   85d38:	780b      	ldrb	r3, [r1, #0]
   85d3a:	7003      	strb	r3, [r0, #0]
   85d3c:	784b      	ldrb	r3, [r1, #1]
   85d3e:	7043      	strb	r3, [r0, #1]
   85d40:	788b      	ldrb	r3, [r1, #2]
   85d42:	7083      	strb	r3, [r0, #2]
   85d44:	4660      	mov	r0, ip
   85d46:	4770      	bx	lr

00085d48 <memset>:
   85d48:	b470      	push	{r4, r5, r6}
   85d4a:	0786      	lsls	r6, r0, #30
   85d4c:	d046      	beq.n	85ddc <memset+0x94>
   85d4e:	1e54      	subs	r4, r2, #1
   85d50:	2a00      	cmp	r2, #0
   85d52:	d041      	beq.n	85dd8 <memset+0x90>
   85d54:	b2ca      	uxtb	r2, r1
   85d56:	4603      	mov	r3, r0
   85d58:	e002      	b.n	85d60 <memset+0x18>
   85d5a:	f114 34ff 	adds.w	r4, r4, #4294967295
   85d5e:	d33b      	bcc.n	85dd8 <memset+0x90>
   85d60:	f803 2b01 	strb.w	r2, [r3], #1
   85d64:	079d      	lsls	r5, r3, #30
   85d66:	d1f8      	bne.n	85d5a <memset+0x12>
   85d68:	2c03      	cmp	r4, #3
   85d6a:	d92e      	bls.n	85dca <memset+0x82>
   85d6c:	b2cd      	uxtb	r5, r1
   85d6e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85d72:	2c0f      	cmp	r4, #15
   85d74:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85d78:	d919      	bls.n	85dae <memset+0x66>
   85d7a:	4626      	mov	r6, r4
   85d7c:	f103 0210 	add.w	r2, r3, #16
   85d80:	3e10      	subs	r6, #16
   85d82:	2e0f      	cmp	r6, #15
   85d84:	f842 5c10 	str.w	r5, [r2, #-16]
   85d88:	f842 5c0c 	str.w	r5, [r2, #-12]
   85d8c:	f842 5c08 	str.w	r5, [r2, #-8]
   85d90:	f842 5c04 	str.w	r5, [r2, #-4]
   85d94:	f102 0210 	add.w	r2, r2, #16
   85d98:	d8f2      	bhi.n	85d80 <memset+0x38>
   85d9a:	f1a4 0210 	sub.w	r2, r4, #16
   85d9e:	f022 020f 	bic.w	r2, r2, #15
   85da2:	f004 040f 	and.w	r4, r4, #15
   85da6:	3210      	adds	r2, #16
   85da8:	2c03      	cmp	r4, #3
   85daa:	4413      	add	r3, r2
   85dac:	d90d      	bls.n	85dca <memset+0x82>
   85dae:	461e      	mov	r6, r3
   85db0:	4622      	mov	r2, r4
   85db2:	3a04      	subs	r2, #4
   85db4:	2a03      	cmp	r2, #3
   85db6:	f846 5b04 	str.w	r5, [r6], #4
   85dba:	d8fa      	bhi.n	85db2 <memset+0x6a>
   85dbc:	1f22      	subs	r2, r4, #4
   85dbe:	f022 0203 	bic.w	r2, r2, #3
   85dc2:	3204      	adds	r2, #4
   85dc4:	4413      	add	r3, r2
   85dc6:	f004 0403 	and.w	r4, r4, #3
   85dca:	b12c      	cbz	r4, 85dd8 <memset+0x90>
   85dcc:	b2c9      	uxtb	r1, r1
   85dce:	441c      	add	r4, r3
   85dd0:	f803 1b01 	strb.w	r1, [r3], #1
   85dd4:	429c      	cmp	r4, r3
   85dd6:	d1fb      	bne.n	85dd0 <memset+0x88>
   85dd8:	bc70      	pop	{r4, r5, r6}
   85dda:	4770      	bx	lr
   85ddc:	4614      	mov	r4, r2
   85dde:	4603      	mov	r3, r0
   85de0:	e7c2      	b.n	85d68 <memset+0x20>
   85de2:	bf00      	nop

00085de4 <sprintf>:
   85de4:	b40e      	push	{r1, r2, r3}
   85de6:	4601      	mov	r1, r0
   85de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   85dea:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85dee:	f44f 7702 	mov.w	r7, #520	; 0x208
   85df2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   85df6:	b09c      	sub	sp, #112	; 0x70
   85df8:	ac21      	add	r4, sp, #132	; 0x84
   85dfa:	f854 2b04 	ldr.w	r2, [r4], #4
   85dfe:	4b0b      	ldr	r3, [pc, #44]	; (85e2c <sprintf+0x48>)
   85e00:	9102      	str	r1, [sp, #8]
   85e02:	9106      	str	r1, [sp, #24]
   85e04:	6818      	ldr	r0, [r3, #0]
   85e06:	a902      	add	r1, sp, #8
   85e08:	4623      	mov	r3, r4
   85e0a:	9401      	str	r4, [sp, #4]
   85e0c:	f8ad 7014 	strh.w	r7, [sp, #20]
   85e10:	9504      	str	r5, [sp, #16]
   85e12:	9507      	str	r5, [sp, #28]
   85e14:	f8ad 6016 	strh.w	r6, [sp, #22]
   85e18:	f000 f896 	bl	85f48 <_svfprintf_r>
   85e1c:	2200      	movs	r2, #0
   85e1e:	9b02      	ldr	r3, [sp, #8]
   85e20:	701a      	strb	r2, [r3, #0]
   85e22:	b01c      	add	sp, #112	; 0x70
   85e24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   85e28:	b003      	add	sp, #12
   85e2a:	4770      	bx	lr
   85e2c:	200702a8 	.word	0x200702a8

00085e30 <strcpy>:
   85e30:	ea80 0201 	eor.w	r2, r0, r1
   85e34:	4684      	mov	ip, r0
   85e36:	f012 0f03 	tst.w	r2, #3
   85e3a:	d14f      	bne.n	85edc <strcpy+0xac>
   85e3c:	f011 0f03 	tst.w	r1, #3
   85e40:	d132      	bne.n	85ea8 <strcpy+0x78>
   85e42:	f84d 4d04 	str.w	r4, [sp, #-4]!
   85e46:	f011 0f04 	tst.w	r1, #4
   85e4a:	f851 3b04 	ldr.w	r3, [r1], #4
   85e4e:	d00b      	beq.n	85e68 <strcpy+0x38>
   85e50:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   85e54:	439a      	bics	r2, r3
   85e56:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85e5a:	bf04      	itt	eq
   85e5c:	f84c 3b04 	streq.w	r3, [ip], #4
   85e60:	f851 3b04 	ldreq.w	r3, [r1], #4
   85e64:	d116      	bne.n	85e94 <strcpy+0x64>
   85e66:	bf00      	nop
   85e68:	f851 4b04 	ldr.w	r4, [r1], #4
   85e6c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   85e70:	439a      	bics	r2, r3
   85e72:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85e76:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   85e7a:	d10b      	bne.n	85e94 <strcpy+0x64>
   85e7c:	f84c 3b04 	str.w	r3, [ip], #4
   85e80:	43a2      	bics	r2, r4
   85e82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85e86:	bf04      	itt	eq
   85e88:	f851 3b04 	ldreq.w	r3, [r1], #4
   85e8c:	f84c 4b04 	streq.w	r4, [ip], #4
   85e90:	d0ea      	beq.n	85e68 <strcpy+0x38>
   85e92:	4623      	mov	r3, r4
   85e94:	f80c 3b01 	strb.w	r3, [ip], #1
   85e98:	f013 0fff 	tst.w	r3, #255	; 0xff
   85e9c:	ea4f 2333 	mov.w	r3, r3, ror #8
   85ea0:	d1f8      	bne.n	85e94 <strcpy+0x64>
   85ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
   85ea6:	4770      	bx	lr
   85ea8:	f011 0f01 	tst.w	r1, #1
   85eac:	d006      	beq.n	85ebc <strcpy+0x8c>
   85eae:	f811 2b01 	ldrb.w	r2, [r1], #1
   85eb2:	f80c 2b01 	strb.w	r2, [ip], #1
   85eb6:	2a00      	cmp	r2, #0
   85eb8:	bf08      	it	eq
   85eba:	4770      	bxeq	lr
   85ebc:	f011 0f02 	tst.w	r1, #2
   85ec0:	d0bf      	beq.n	85e42 <strcpy+0x12>
   85ec2:	f831 2b02 	ldrh.w	r2, [r1], #2
   85ec6:	f012 0fff 	tst.w	r2, #255	; 0xff
   85eca:	bf16      	itet	ne
   85ecc:	f82c 2b02 	strhne.w	r2, [ip], #2
   85ed0:	f88c 2000 	strbeq.w	r2, [ip]
   85ed4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   85ed8:	d1b3      	bne.n	85e42 <strcpy+0x12>
   85eda:	4770      	bx	lr
   85edc:	f811 2b01 	ldrb.w	r2, [r1], #1
   85ee0:	f80c 2b01 	strb.w	r2, [ip], #1
   85ee4:	2a00      	cmp	r2, #0
   85ee6:	d1f9      	bne.n	85edc <strcpy+0xac>
   85ee8:	4770      	bx	lr
   85eea:	bf00      	nop

00085eec <strlen>:
   85eec:	f020 0103 	bic.w	r1, r0, #3
   85ef0:	f010 0003 	ands.w	r0, r0, #3
   85ef4:	f1c0 0000 	rsb	r0, r0, #0
   85ef8:	f851 3b04 	ldr.w	r3, [r1], #4
   85efc:	f100 0c04 	add.w	ip, r0, #4
   85f00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85f04:	f06f 0200 	mvn.w	r2, #0
   85f08:	bf1c      	itt	ne
   85f0a:	fa22 f20c 	lsrne.w	r2, r2, ip
   85f0e:	4313      	orrne	r3, r2
   85f10:	f04f 0c01 	mov.w	ip, #1
   85f14:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85f18:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85f1c:	eba3 020c 	sub.w	r2, r3, ip
   85f20:	ea22 0203 	bic.w	r2, r2, r3
   85f24:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85f28:	bf04      	itt	eq
   85f2a:	f851 3b04 	ldreq.w	r3, [r1], #4
   85f2e:	3004      	addeq	r0, #4
   85f30:	d0f4      	beq.n	85f1c <strlen+0x30>
   85f32:	f1c2 0100 	rsb	r1, r2, #0
   85f36:	ea02 0201 	and.w	r2, r2, r1
   85f3a:	fab2 f282 	clz	r2, r2
   85f3e:	f1c2 021f 	rsb	r2, r2, #31
   85f42:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85f46:	4770      	bx	lr

00085f48 <_svfprintf_r>:
   85f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f4c:	b0c3      	sub	sp, #268	; 0x10c
   85f4e:	460c      	mov	r4, r1
   85f50:	910b      	str	r1, [sp, #44]	; 0x2c
   85f52:	4692      	mov	sl, r2
   85f54:	930f      	str	r3, [sp, #60]	; 0x3c
   85f56:	900c      	str	r0, [sp, #48]	; 0x30
   85f58:	f002 fb8c 	bl	88674 <_localeconv_r>
   85f5c:	6803      	ldr	r3, [r0, #0]
   85f5e:	4618      	mov	r0, r3
   85f60:	931a      	str	r3, [sp, #104]	; 0x68
   85f62:	f7ff ffc3 	bl	85eec <strlen>
   85f66:	89a3      	ldrh	r3, [r4, #12]
   85f68:	9019      	str	r0, [sp, #100]	; 0x64
   85f6a:	0619      	lsls	r1, r3, #24
   85f6c:	d503      	bpl.n	85f76 <_svfprintf_r+0x2e>
   85f6e:	6923      	ldr	r3, [r4, #16]
   85f70:	2b00      	cmp	r3, #0
   85f72:	f001 8035 	beq.w	86fe0 <_svfprintf_r+0x1098>
   85f76:	2300      	movs	r3, #0
   85f78:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   85f7c:	46c8      	mov	r8, r9
   85f7e:	9315      	str	r3, [sp, #84]	; 0x54
   85f80:	9313      	str	r3, [sp, #76]	; 0x4c
   85f82:	9314      	str	r3, [sp, #80]	; 0x50
   85f84:	9318      	str	r3, [sp, #96]	; 0x60
   85f86:	931b      	str	r3, [sp, #108]	; 0x6c
   85f88:	9309      	str	r3, [sp, #36]	; 0x24
   85f8a:	9316      	str	r3, [sp, #88]	; 0x58
   85f8c:	9317      	str	r3, [sp, #92]	; 0x5c
   85f8e:	9327      	str	r3, [sp, #156]	; 0x9c
   85f90:	9326      	str	r3, [sp, #152]	; 0x98
   85f92:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   85f96:	f89a 3000 	ldrb.w	r3, [sl]
   85f9a:	4654      	mov	r4, sl
   85f9c:	b1eb      	cbz	r3, 85fda <_svfprintf_r+0x92>
   85f9e:	2b25      	cmp	r3, #37	; 0x25
   85fa0:	d102      	bne.n	85fa8 <_svfprintf_r+0x60>
   85fa2:	e01a      	b.n	85fda <_svfprintf_r+0x92>
   85fa4:	2b25      	cmp	r3, #37	; 0x25
   85fa6:	d003      	beq.n	85fb0 <_svfprintf_r+0x68>
   85fa8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   85fac:	2b00      	cmp	r3, #0
   85fae:	d1f9      	bne.n	85fa4 <_svfprintf_r+0x5c>
   85fb0:	eba4 050a 	sub.w	r5, r4, sl
   85fb4:	b18d      	cbz	r5, 85fda <_svfprintf_r+0x92>
   85fb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   85fb8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   85fba:	3301      	adds	r3, #1
   85fbc:	442a      	add	r2, r5
   85fbe:	2b07      	cmp	r3, #7
   85fc0:	f8c8 a000 	str.w	sl, [r8]
   85fc4:	f8c8 5004 	str.w	r5, [r8, #4]
   85fc8:	9227      	str	r2, [sp, #156]	; 0x9c
   85fca:	9326      	str	r3, [sp, #152]	; 0x98
   85fcc:	f300 808a 	bgt.w	860e4 <_svfprintf_r+0x19c>
   85fd0:	f108 0808 	add.w	r8, r8, #8
   85fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85fd6:	442b      	add	r3, r5
   85fd8:	9309      	str	r3, [sp, #36]	; 0x24
   85fda:	7823      	ldrb	r3, [r4, #0]
   85fdc:	2b00      	cmp	r3, #0
   85fde:	f000 8089 	beq.w	860f4 <_svfprintf_r+0x1ac>
   85fe2:	2300      	movs	r3, #0
   85fe4:	f04f 30ff 	mov.w	r0, #4294967295
   85fe8:	461a      	mov	r2, r3
   85fea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   85fee:	4619      	mov	r1, r3
   85ff0:	930d      	str	r3, [sp, #52]	; 0x34
   85ff2:	469b      	mov	fp, r3
   85ff4:	7863      	ldrb	r3, [r4, #1]
   85ff6:	f104 0a01 	add.w	sl, r4, #1
   85ffa:	900a      	str	r0, [sp, #40]	; 0x28
   85ffc:	f10a 0a01 	add.w	sl, sl, #1
   86000:	f1a3 0020 	sub.w	r0, r3, #32
   86004:	2858      	cmp	r0, #88	; 0x58
   86006:	f200 83b7 	bhi.w	86778 <_svfprintf_r+0x830>
   8600a:	e8df f010 	tbh	[pc, r0, lsl #1]
   8600e:	034c      	.short	0x034c
   86010:	03b503b5 	.word	0x03b503b5
   86014:	03b50354 	.word	0x03b50354
   86018:	03b503b5 	.word	0x03b503b5
   8601c:	03b503b5 	.word	0x03b503b5
   86020:	005903b5 	.word	0x005903b5
   86024:	03b50359 	.word	0x03b50359
   86028:	02140066 	.word	0x02140066
   8602c:	022f03b5 	.word	0x022f03b5
   86030:	03a503a5 	.word	0x03a503a5
   86034:	03a503a5 	.word	0x03a503a5
   86038:	03a503a5 	.word	0x03a503a5
   8603c:	03a503a5 	.word	0x03a503a5
   86040:	03b503a5 	.word	0x03b503a5
   86044:	03b503b5 	.word	0x03b503b5
   86048:	03b503b5 	.word	0x03b503b5
   8604c:	03b503b5 	.word	0x03b503b5
   86050:	03b503b5 	.word	0x03b503b5
   86054:	028b03b5 	.word	0x028b03b5
   86058:	03b502d3 	.word	0x03b502d3
   8605c:	03b502d3 	.word	0x03b502d3
   86060:	03b503b5 	.word	0x03b503b5
   86064:	031b03b5 	.word	0x031b03b5
   86068:	03b503b5 	.word	0x03b503b5
   8606c:	03b50320 	.word	0x03b50320
   86070:	03b503b5 	.word	0x03b503b5
   86074:	03b503b5 	.word	0x03b503b5
   86078:	03b50234 	.word	0x03b50234
   8607c:	024b03b5 	.word	0x024b03b5
   86080:	03b503b5 	.word	0x03b503b5
   86084:	03b503b5 	.word	0x03b503b5
   86088:	03b503b5 	.word	0x03b503b5
   8608c:	03b503b5 	.word	0x03b503b5
   86090:	03b503b5 	.word	0x03b503b5
   86094:	039e0276 	.word	0x039e0276
   86098:	02d302d3 	.word	0x02d302d3
   8609c:	036302d3 	.word	0x036302d3
   860a0:	03b5039e 	.word	0x03b5039e
   860a4:	036803b5 	.word	0x036803b5
   860a8:	037503b5 	.word	0x037503b5
   860ac:	038c01dd 	.word	0x038c01dd
   860b0:	03b5035e 	.word	0x03b5035e
   860b4:	03b501f2 	.word	0x03b501f2
   860b8:	03b50087 	.word	0x03b50087
   860bc:	033203b5 	.word	0x033203b5
   860c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   860c2:	6823      	ldr	r3, [r4, #0]
   860c4:	4618      	mov	r0, r3
   860c6:	930d      	str	r3, [sp, #52]	; 0x34
   860c8:	4623      	mov	r3, r4
   860ca:	2800      	cmp	r0, #0
   860cc:	f103 0304 	add.w	r3, r3, #4
   860d0:	930f      	str	r3, [sp, #60]	; 0x3c
   860d2:	da04      	bge.n	860de <_svfprintf_r+0x196>
   860d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   860d6:	425b      	negs	r3, r3
   860d8:	930d      	str	r3, [sp, #52]	; 0x34
   860da:	f04b 0b04 	orr.w	fp, fp, #4
   860de:	f89a 3000 	ldrb.w	r3, [sl]
   860e2:	e78b      	b.n	85ffc <_svfprintf_r+0xb4>
   860e4:	aa25      	add	r2, sp, #148	; 0x94
   860e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   860ea:	f003 fb07 	bl	896fc <__ssprint_r>
   860ee:	b940      	cbnz	r0, 86102 <_svfprintf_r+0x1ba>
   860f0:	46c8      	mov	r8, r9
   860f2:	e76f      	b.n	85fd4 <_svfprintf_r+0x8c>
   860f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   860f6:	b123      	cbz	r3, 86102 <_svfprintf_r+0x1ba>
   860f8:	980c      	ldr	r0, [sp, #48]	; 0x30
   860fa:	aa25      	add	r2, sp, #148	; 0x94
   860fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860fe:	f003 fafd 	bl	896fc <__ssprint_r>
   86102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86104:	899b      	ldrh	r3, [r3, #12]
   86106:	f013 0f40 	tst.w	r3, #64	; 0x40
   8610a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8610c:	bf18      	it	ne
   8610e:	f04f 33ff 	movne.w	r3, #4294967295
   86112:	9309      	str	r3, [sp, #36]	; 0x24
   86114:	9809      	ldr	r0, [sp, #36]	; 0x24
   86116:	b043      	add	sp, #268	; 0x10c
   86118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8611c:	f01b 0f20 	tst.w	fp, #32
   86120:	9311      	str	r3, [sp, #68]	; 0x44
   86122:	f040 81af 	bne.w	86484 <_svfprintf_r+0x53c>
   86126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86128:	f01b 0f10 	tst.w	fp, #16
   8612c:	4613      	mov	r3, r2
   8612e:	f040 859a 	bne.w	86c66 <_svfprintf_r+0xd1e>
   86132:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86136:	f000 8596 	beq.w	86c66 <_svfprintf_r+0xd1e>
   8613a:	2500      	movs	r5, #0
   8613c:	2301      	movs	r3, #1
   8613e:	8814      	ldrh	r4, [r2, #0]
   86140:	3204      	adds	r2, #4
   86142:	920f      	str	r2, [sp, #60]	; 0x3c
   86144:	2200      	movs	r2, #0
   86146:	4617      	mov	r7, r2
   86148:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8614c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8614e:	1c4a      	adds	r2, r1, #1
   86150:	f000 8210 	beq.w	86574 <_svfprintf_r+0x62c>
   86154:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   86158:	9207      	str	r2, [sp, #28]
   8615a:	ea54 0205 	orrs.w	r2, r4, r5
   8615e:	f040 820f 	bne.w	86580 <_svfprintf_r+0x638>
   86162:	2900      	cmp	r1, #0
   86164:	f040 8431 	bne.w	869ca <_svfprintf_r+0xa82>
   86168:	2b00      	cmp	r3, #0
   8616a:	f040 8539 	bne.w	86be0 <_svfprintf_r+0xc98>
   8616e:	f01b 0301 	ands.w	r3, fp, #1
   86172:	930e      	str	r3, [sp, #56]	; 0x38
   86174:	f000 8662 	beq.w	86e3c <_svfprintf_r+0xef4>
   86178:	2330      	movs	r3, #48	; 0x30
   8617a:	ae42      	add	r6, sp, #264	; 0x108
   8617c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   86180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86184:	4293      	cmp	r3, r2
   86186:	bfb8      	it	lt
   86188:	4613      	movlt	r3, r2
   8618a:	9308      	str	r3, [sp, #32]
   8618c:	2300      	movs	r3, #0
   8618e:	9312      	str	r3, [sp, #72]	; 0x48
   86190:	b117      	cbz	r7, 86198 <_svfprintf_r+0x250>
   86192:	9b08      	ldr	r3, [sp, #32]
   86194:	3301      	adds	r3, #1
   86196:	9308      	str	r3, [sp, #32]
   86198:	9b07      	ldr	r3, [sp, #28]
   8619a:	f013 0302 	ands.w	r3, r3, #2
   8619e:	9310      	str	r3, [sp, #64]	; 0x40
   861a0:	d002      	beq.n	861a8 <_svfprintf_r+0x260>
   861a2:	9b08      	ldr	r3, [sp, #32]
   861a4:	3302      	adds	r3, #2
   861a6:	9308      	str	r3, [sp, #32]
   861a8:	9b07      	ldr	r3, [sp, #28]
   861aa:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   861ae:	f040 8310 	bne.w	867d2 <_svfprintf_r+0x88a>
   861b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   861b4:	9a08      	ldr	r2, [sp, #32]
   861b6:	eba3 0b02 	sub.w	fp, r3, r2
   861ba:	f1bb 0f00 	cmp.w	fp, #0
   861be:	f340 8308 	ble.w	867d2 <_svfprintf_r+0x88a>
   861c2:	f1bb 0f10 	cmp.w	fp, #16
   861c6:	f340 87b2 	ble.w	8712e <_svfprintf_r+0x11e6>
   861ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   861cc:	4643      	mov	r3, r8
   861ce:	4621      	mov	r1, r4
   861d0:	46a8      	mov	r8, r5
   861d2:	2710      	movs	r7, #16
   861d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   861d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   861d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   861da:	e006      	b.n	861ea <_svfprintf_r+0x2a2>
   861dc:	f1ab 0b10 	sub.w	fp, fp, #16
   861e0:	f1bb 0f10 	cmp.w	fp, #16
   861e4:	f103 0308 	add.w	r3, r3, #8
   861e8:	dd18      	ble.n	8621c <_svfprintf_r+0x2d4>
   861ea:	3201      	adds	r2, #1
   861ec:	48ab      	ldr	r0, [pc, #684]	; (8649c <_svfprintf_r+0x554>)
   861ee:	3110      	adds	r1, #16
   861f0:	2a07      	cmp	r2, #7
   861f2:	9127      	str	r1, [sp, #156]	; 0x9c
   861f4:	9226      	str	r2, [sp, #152]	; 0x98
   861f6:	e883 0081 	stmia.w	r3, {r0, r7}
   861fa:	ddef      	ble.n	861dc <_svfprintf_r+0x294>
   861fc:	aa25      	add	r2, sp, #148	; 0x94
   861fe:	4629      	mov	r1, r5
   86200:	4620      	mov	r0, r4
   86202:	f003 fa7b 	bl	896fc <__ssprint_r>
   86206:	2800      	cmp	r0, #0
   86208:	f47f af7b 	bne.w	86102 <_svfprintf_r+0x1ba>
   8620c:	f1ab 0b10 	sub.w	fp, fp, #16
   86210:	f1bb 0f10 	cmp.w	fp, #16
   86214:	464b      	mov	r3, r9
   86216:	9927      	ldr	r1, [sp, #156]	; 0x9c
   86218:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8621a:	dce6      	bgt.n	861ea <_svfprintf_r+0x2a2>
   8621c:	4645      	mov	r5, r8
   8621e:	460c      	mov	r4, r1
   86220:	4698      	mov	r8, r3
   86222:	3201      	adds	r2, #1
   86224:	4b9d      	ldr	r3, [pc, #628]	; (8649c <_svfprintf_r+0x554>)
   86226:	445c      	add	r4, fp
   86228:	2a07      	cmp	r2, #7
   8622a:	9427      	str	r4, [sp, #156]	; 0x9c
   8622c:	9226      	str	r2, [sp, #152]	; 0x98
   8622e:	e888 0808 	stmia.w	r8, {r3, fp}
   86232:	f300 82c3 	bgt.w	867bc <_svfprintf_r+0x874>
   86236:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8623a:	f108 0808 	add.w	r8, r8, #8
   8623e:	b187      	cbz	r7, 86262 <_svfprintf_r+0x31a>
   86240:	2101      	movs	r1, #1
   86242:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86244:	440c      	add	r4, r1
   86246:	440b      	add	r3, r1
   86248:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   8624c:	2b07      	cmp	r3, #7
   8624e:	9427      	str	r4, [sp, #156]	; 0x9c
   86250:	9326      	str	r3, [sp, #152]	; 0x98
   86252:	f8c8 1004 	str.w	r1, [r8, #4]
   86256:	f8c8 2000 	str.w	r2, [r8]
   8625a:	f300 83cd 	bgt.w	869f8 <_svfprintf_r+0xab0>
   8625e:	f108 0808 	add.w	r8, r8, #8
   86262:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86264:	b17b      	cbz	r3, 86286 <_svfprintf_r+0x33e>
   86266:	2102      	movs	r1, #2
   86268:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8626a:	440c      	add	r4, r1
   8626c:	3301      	adds	r3, #1
   8626e:	aa1e      	add	r2, sp, #120	; 0x78
   86270:	2b07      	cmp	r3, #7
   86272:	9427      	str	r4, [sp, #156]	; 0x9c
   86274:	9326      	str	r3, [sp, #152]	; 0x98
   86276:	f8c8 1004 	str.w	r1, [r8, #4]
   8627a:	f8c8 2000 	str.w	r2, [r8]
   8627e:	f300 8411 	bgt.w	86aa4 <_svfprintf_r+0xb5c>
   86282:	f108 0808 	add.w	r8, r8, #8
   86286:	2d80      	cmp	r5, #128	; 0x80
   86288:	f000 8304 	beq.w	86894 <_svfprintf_r+0x94c>
   8628c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8628e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86290:	1a9f      	subs	r7, r3, r2
   86292:	2f00      	cmp	r7, #0
   86294:	dd37      	ble.n	86306 <_svfprintf_r+0x3be>
   86296:	2f10      	cmp	r7, #16
   86298:	f340 8679 	ble.w	86f8e <_svfprintf_r+0x1046>
   8629c:	4d80      	ldr	r5, [pc, #512]	; (864a0 <_svfprintf_r+0x558>)
   8629e:	4642      	mov	r2, r8
   862a0:	4621      	mov	r1, r4
   862a2:	46b0      	mov	r8, r6
   862a4:	f04f 0b10 	mov.w	fp, #16
   862a8:	462e      	mov	r6, r5
   862aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   862ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   862ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   862b0:	e004      	b.n	862bc <_svfprintf_r+0x374>
   862b2:	3f10      	subs	r7, #16
   862b4:	2f10      	cmp	r7, #16
   862b6:	f102 0208 	add.w	r2, r2, #8
   862ba:	dd15      	ble.n	862e8 <_svfprintf_r+0x3a0>
   862bc:	3301      	adds	r3, #1
   862be:	3110      	adds	r1, #16
   862c0:	2b07      	cmp	r3, #7
   862c2:	9127      	str	r1, [sp, #156]	; 0x9c
   862c4:	9326      	str	r3, [sp, #152]	; 0x98
   862c6:	e882 0840 	stmia.w	r2, {r6, fp}
   862ca:	ddf2      	ble.n	862b2 <_svfprintf_r+0x36a>
   862cc:	aa25      	add	r2, sp, #148	; 0x94
   862ce:	4629      	mov	r1, r5
   862d0:	4620      	mov	r0, r4
   862d2:	f003 fa13 	bl	896fc <__ssprint_r>
   862d6:	2800      	cmp	r0, #0
   862d8:	f47f af13 	bne.w	86102 <_svfprintf_r+0x1ba>
   862dc:	3f10      	subs	r7, #16
   862de:	2f10      	cmp	r7, #16
   862e0:	464a      	mov	r2, r9
   862e2:	9927      	ldr	r1, [sp, #156]	; 0x9c
   862e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   862e6:	dce9      	bgt.n	862bc <_svfprintf_r+0x374>
   862e8:	4635      	mov	r5, r6
   862ea:	460c      	mov	r4, r1
   862ec:	4646      	mov	r6, r8
   862ee:	4690      	mov	r8, r2
   862f0:	3301      	adds	r3, #1
   862f2:	443c      	add	r4, r7
   862f4:	2b07      	cmp	r3, #7
   862f6:	9427      	str	r4, [sp, #156]	; 0x9c
   862f8:	9326      	str	r3, [sp, #152]	; 0x98
   862fa:	e888 00a0 	stmia.w	r8, {r5, r7}
   862fe:	f300 8370 	bgt.w	869e2 <_svfprintf_r+0xa9a>
   86302:	f108 0808 	add.w	r8, r8, #8
   86306:	9b07      	ldr	r3, [sp, #28]
   86308:	05df      	lsls	r7, r3, #23
   8630a:	f100 8264 	bmi.w	867d6 <_svfprintf_r+0x88e>
   8630e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86310:	990e      	ldr	r1, [sp, #56]	; 0x38
   86312:	3301      	adds	r3, #1
   86314:	440c      	add	r4, r1
   86316:	2b07      	cmp	r3, #7
   86318:	9427      	str	r4, [sp, #156]	; 0x9c
   8631a:	f8c8 6000 	str.w	r6, [r8]
   8631e:	f8c8 1004 	str.w	r1, [r8, #4]
   86322:	9326      	str	r3, [sp, #152]	; 0x98
   86324:	f300 83b3 	bgt.w	86a8e <_svfprintf_r+0xb46>
   86328:	f108 0808 	add.w	r8, r8, #8
   8632c:	9b07      	ldr	r3, [sp, #28]
   8632e:	075b      	lsls	r3, r3, #29
   86330:	d53b      	bpl.n	863aa <_svfprintf_r+0x462>
   86332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86334:	9a08      	ldr	r2, [sp, #32]
   86336:	1a9d      	subs	r5, r3, r2
   86338:	2d00      	cmp	r5, #0
   8633a:	dd36      	ble.n	863aa <_svfprintf_r+0x462>
   8633c:	2d10      	cmp	r5, #16
   8633e:	f340 8721 	ble.w	87184 <_svfprintf_r+0x123c>
   86342:	2610      	movs	r6, #16
   86344:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86346:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86348:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   8634c:	e004      	b.n	86358 <_svfprintf_r+0x410>
   8634e:	3d10      	subs	r5, #16
   86350:	2d10      	cmp	r5, #16
   86352:	f108 0808 	add.w	r8, r8, #8
   86356:	dd16      	ble.n	86386 <_svfprintf_r+0x43e>
   86358:	3301      	adds	r3, #1
   8635a:	4a50      	ldr	r2, [pc, #320]	; (8649c <_svfprintf_r+0x554>)
   8635c:	3410      	adds	r4, #16
   8635e:	2b07      	cmp	r3, #7
   86360:	9427      	str	r4, [sp, #156]	; 0x9c
   86362:	9326      	str	r3, [sp, #152]	; 0x98
   86364:	e888 0044 	stmia.w	r8, {r2, r6}
   86368:	ddf1      	ble.n	8634e <_svfprintf_r+0x406>
   8636a:	aa25      	add	r2, sp, #148	; 0x94
   8636c:	4659      	mov	r1, fp
   8636e:	4638      	mov	r0, r7
   86370:	f003 f9c4 	bl	896fc <__ssprint_r>
   86374:	2800      	cmp	r0, #0
   86376:	f47f aec4 	bne.w	86102 <_svfprintf_r+0x1ba>
   8637a:	3d10      	subs	r5, #16
   8637c:	2d10      	cmp	r5, #16
   8637e:	46c8      	mov	r8, r9
   86380:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86382:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86384:	dce8      	bgt.n	86358 <_svfprintf_r+0x410>
   86386:	3301      	adds	r3, #1
   86388:	4a44      	ldr	r2, [pc, #272]	; (8649c <_svfprintf_r+0x554>)
   8638a:	442c      	add	r4, r5
   8638c:	2b07      	cmp	r3, #7
   8638e:	9427      	str	r4, [sp, #156]	; 0x9c
   86390:	9326      	str	r3, [sp, #152]	; 0x98
   86392:	e888 0024 	stmia.w	r8, {r2, r5}
   86396:	dd08      	ble.n	863aa <_svfprintf_r+0x462>
   86398:	aa25      	add	r2, sp, #148	; 0x94
   8639a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8639c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8639e:	f003 f9ad 	bl	896fc <__ssprint_r>
   863a2:	2800      	cmp	r0, #0
   863a4:	f47f aead 	bne.w	86102 <_svfprintf_r+0x1ba>
   863a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   863aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   863ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   863ae:	9908      	ldr	r1, [sp, #32]
   863b0:	428a      	cmp	r2, r1
   863b2:	bfac      	ite	ge
   863b4:	189b      	addge	r3, r3, r2
   863b6:	185b      	addlt	r3, r3, r1
   863b8:	9309      	str	r3, [sp, #36]	; 0x24
   863ba:	2c00      	cmp	r4, #0
   863bc:	f040 82fb 	bne.w	869b6 <_svfprintf_r+0xa6e>
   863c0:	2300      	movs	r3, #0
   863c2:	46c8      	mov	r8, r9
   863c4:	9326      	str	r3, [sp, #152]	; 0x98
   863c6:	e5e6      	b.n	85f96 <_svfprintf_r+0x4e>
   863c8:	9311      	str	r3, [sp, #68]	; 0x44
   863ca:	f01b 0320 	ands.w	r3, fp, #32
   863ce:	f040 8145 	bne.w	8665c <_svfprintf_r+0x714>
   863d2:	f01b 0210 	ands.w	r2, fp, #16
   863d6:	f040 8466 	bne.w	86ca6 <_svfprintf_r+0xd5e>
   863da:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   863de:	f000 8462 	beq.w	86ca6 <_svfprintf_r+0xd5e>
   863e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   863e4:	4613      	mov	r3, r2
   863e6:	460a      	mov	r2, r1
   863e8:	3204      	adds	r2, #4
   863ea:	880c      	ldrh	r4, [r1, #0]
   863ec:	2500      	movs	r5, #0
   863ee:	920f      	str	r2, [sp, #60]	; 0x3c
   863f0:	e6a8      	b.n	86144 <_svfprintf_r+0x1fc>
   863f2:	2500      	movs	r5, #0
   863f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   863f6:	9311      	str	r3, [sp, #68]	; 0x44
   863f8:	6816      	ldr	r6, [r2, #0]
   863fa:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   863fe:	1d14      	adds	r4, r2, #4
   86400:	2e00      	cmp	r6, #0
   86402:	f000 86cd 	beq.w	871a0 <_svfprintf_r+0x1258>
   86406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86408:	1c53      	adds	r3, r2, #1
   8640a:	f000 861b 	beq.w	87044 <_svfprintf_r+0x10fc>
   8640e:	4629      	mov	r1, r5
   86410:	4630      	mov	r0, r6
   86412:	f002 fbf9 	bl	88c08 <memchr>
   86416:	2800      	cmp	r0, #0
   86418:	f000 870d 	beq.w	87236 <_svfprintf_r+0x12ee>
   8641c:	1b83      	subs	r3, r0, r6
   8641e:	950a      	str	r5, [sp, #40]	; 0x28
   86420:	930e      	str	r3, [sp, #56]	; 0x38
   86422:	940f      	str	r4, [sp, #60]	; 0x3c
   86424:	f8cd b01c 	str.w	fp, [sp, #28]
   86428:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8642c:	9308      	str	r3, [sp, #32]
   8642e:	9512      	str	r5, [sp, #72]	; 0x48
   86430:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86434:	e6ac      	b.n	86190 <_svfprintf_r+0x248>
   86436:	f89a 3000 	ldrb.w	r3, [sl]
   8643a:	f10a 0401 	add.w	r4, sl, #1
   8643e:	2b2a      	cmp	r3, #42	; 0x2a
   86440:	f000 87c2 	beq.w	873c8 <_svfprintf_r+0x1480>
   86444:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86448:	2809      	cmp	r0, #9
   8644a:	46a2      	mov	sl, r4
   8644c:	f200 8718 	bhi.w	87280 <_svfprintf_r+0x1338>
   86450:	2300      	movs	r3, #0
   86452:	461c      	mov	r4, r3
   86454:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86458:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8645c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86460:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86464:	2809      	cmp	r0, #9
   86466:	d9f5      	bls.n	86454 <_svfprintf_r+0x50c>
   86468:	940a      	str	r4, [sp, #40]	; 0x28
   8646a:	e5c9      	b.n	86000 <_svfprintf_r+0xb8>
   8646c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   86470:	f89a 3000 	ldrb.w	r3, [sl]
   86474:	e5c2      	b.n	85ffc <_svfprintf_r+0xb4>
   86476:	f04b 0b10 	orr.w	fp, fp, #16
   8647a:	f01b 0f20 	tst.w	fp, #32
   8647e:	9311      	str	r3, [sp, #68]	; 0x44
   86480:	f43f ae51 	beq.w	86126 <_svfprintf_r+0x1de>
   86484:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86486:	3407      	adds	r4, #7
   86488:	f024 0307 	bic.w	r3, r4, #7
   8648c:	f103 0208 	add.w	r2, r3, #8
   86490:	e9d3 4500 	ldrd	r4, r5, [r3]
   86494:	920f      	str	r2, [sp, #60]	; 0x3c
   86496:	2301      	movs	r3, #1
   86498:	e654      	b.n	86144 <_svfprintf_r+0x1fc>
   8649a:	bf00      	nop
   8649c:	0008a9b0 	.word	0x0008a9b0
   864a0:	0008a9c0 	.word	0x0008a9c0
   864a4:	9311      	str	r3, [sp, #68]	; 0x44
   864a6:	2a00      	cmp	r2, #0
   864a8:	f040 87ad 	bne.w	87406 <_svfprintf_r+0x14be>
   864ac:	4bbe      	ldr	r3, [pc, #760]	; (867a8 <_svfprintf_r+0x860>)
   864ae:	f01b 0f20 	tst.w	fp, #32
   864b2:	9318      	str	r3, [sp, #96]	; 0x60
   864b4:	f040 80e7 	bne.w	86686 <_svfprintf_r+0x73e>
   864b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   864ba:	f01b 0f10 	tst.w	fp, #16
   864be:	4613      	mov	r3, r2
   864c0:	f040 83d8 	bne.w	86c74 <_svfprintf_r+0xd2c>
   864c4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   864c8:	f000 83d4 	beq.w	86c74 <_svfprintf_r+0xd2c>
   864cc:	2500      	movs	r5, #0
   864ce:	3304      	adds	r3, #4
   864d0:	8814      	ldrh	r4, [r2, #0]
   864d2:	930f      	str	r3, [sp, #60]	; 0x3c
   864d4:	f01b 0f01 	tst.w	fp, #1
   864d8:	f000 80e3 	beq.w	866a2 <_svfprintf_r+0x75a>
   864dc:	ea54 0305 	orrs.w	r3, r4, r5
   864e0:	f000 80df 	beq.w	866a2 <_svfprintf_r+0x75a>
   864e4:	2330      	movs	r3, #48	; 0x30
   864e6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   864ea:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   864ee:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   864f2:	f04b 0b02 	orr.w	fp, fp, #2
   864f6:	2302      	movs	r3, #2
   864f8:	e624      	b.n	86144 <_svfprintf_r+0x1fc>
   864fa:	2201      	movs	r2, #1
   864fc:	9311      	str	r3, [sp, #68]	; 0x44
   864fe:	2300      	movs	r3, #0
   86500:	4611      	mov	r1, r2
   86502:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86504:	9208      	str	r2, [sp, #32]
   86506:	6802      	ldr	r2, [r0, #0]
   86508:	461f      	mov	r7, r3
   8650a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8650e:	930a      	str	r3, [sp, #40]	; 0x28
   86510:	9312      	str	r3, [sp, #72]	; 0x48
   86512:	1d03      	adds	r3, r0, #4
   86514:	f8cd b01c 	str.w	fp, [sp, #28]
   86518:	910e      	str	r1, [sp, #56]	; 0x38
   8651a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   8651e:	930f      	str	r3, [sp, #60]	; 0x3c
   86520:	ae28      	add	r6, sp, #160	; 0xa0
   86522:	e639      	b.n	86198 <_svfprintf_r+0x250>
   86524:	9311      	str	r3, [sp, #68]	; 0x44
   86526:	2a00      	cmp	r2, #0
   86528:	f040 8784 	bne.w	87434 <_svfprintf_r+0x14ec>
   8652c:	f04b 0b10 	orr.w	fp, fp, #16
   86530:	f01b 0f20 	tst.w	fp, #32
   86534:	f040 8475 	bne.w	86e22 <_svfprintf_r+0xeda>
   86538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8653a:	f01b 0f10 	tst.w	fp, #16
   8653e:	4613      	mov	r3, r2
   86540:	f040 839d 	bne.w	86c7e <_svfprintf_r+0xd36>
   86544:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86548:	f000 8399 	beq.w	86c7e <_svfprintf_r+0xd36>
   8654c:	f9b2 4000 	ldrsh.w	r4, [r2]
   86550:	3304      	adds	r3, #4
   86552:	17e5      	asrs	r5, r4, #31
   86554:	930f      	str	r3, [sp, #60]	; 0x3c
   86556:	4622      	mov	r2, r4
   86558:	462b      	mov	r3, r5
   8655a:	2a00      	cmp	r2, #0
   8655c:	f173 0300 	sbcs.w	r3, r3, #0
   86560:	f2c0 8398 	blt.w	86c94 <_svfprintf_r+0xd4c>
   86564:	990a      	ldr	r1, [sp, #40]	; 0x28
   86566:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8656a:	1c4a      	adds	r2, r1, #1
   8656c:	f04f 0301 	mov.w	r3, #1
   86570:	f47f adf0 	bne.w	86154 <_svfprintf_r+0x20c>
   86574:	ea54 0205 	orrs.w	r2, r4, r5
   86578:	f000 8229 	beq.w	869ce <_svfprintf_r+0xa86>
   8657c:	f8cd b01c 	str.w	fp, [sp, #28]
   86580:	2b01      	cmp	r3, #1
   86582:	f000 830e 	beq.w	86ba2 <_svfprintf_r+0xc5a>
   86586:	2b02      	cmp	r3, #2
   86588:	f040 829c 	bne.w	86ac4 <_svfprintf_r+0xb7c>
   8658c:	464e      	mov	r6, r9
   8658e:	9818      	ldr	r0, [sp, #96]	; 0x60
   86590:	0923      	lsrs	r3, r4, #4
   86592:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86596:	0929      	lsrs	r1, r5, #4
   86598:	f004 020f 	and.w	r2, r4, #15
   8659c:	460d      	mov	r5, r1
   8659e:	461c      	mov	r4, r3
   865a0:	5c83      	ldrb	r3, [r0, r2]
   865a2:	f806 3d01 	strb.w	r3, [r6, #-1]!
   865a6:	ea54 0305 	orrs.w	r3, r4, r5
   865aa:	d1f1      	bne.n	86590 <_svfprintf_r+0x648>
   865ac:	eba9 0306 	sub.w	r3, r9, r6
   865b0:	930e      	str	r3, [sp, #56]	; 0x38
   865b2:	e5e5      	b.n	86180 <_svfprintf_r+0x238>
   865b4:	9311      	str	r3, [sp, #68]	; 0x44
   865b6:	2a00      	cmp	r2, #0
   865b8:	f040 8738 	bne.w	8742c <_svfprintf_r+0x14e4>
   865bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   865be:	f01b 0f08 	tst.w	fp, #8
   865c2:	f104 0407 	add.w	r4, r4, #7
   865c6:	f000 84cf 	beq.w	86f68 <_svfprintf_r+0x1020>
   865ca:	f024 0307 	bic.w	r3, r4, #7
   865ce:	f103 0208 	add.w	r2, r3, #8
   865d2:	920f      	str	r2, [sp, #60]	; 0x3c
   865d4:	681a      	ldr	r2, [r3, #0]
   865d6:	685b      	ldr	r3, [r3, #4]
   865d8:	9215      	str	r2, [sp, #84]	; 0x54
   865da:	9314      	str	r3, [sp, #80]	; 0x50
   865dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   865de:	9d15      	ldr	r5, [sp, #84]	; 0x54
   865e0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   865e4:	4628      	mov	r0, r5
   865e6:	4621      	mov	r1, r4
   865e8:	f04f 32ff 	mov.w	r2, #4294967295
   865ec:	4b6f      	ldr	r3, [pc, #444]	; (867ac <_svfprintf_r+0x864>)
   865ee:	f003 fdf3 	bl	8a1d8 <__aeabi_dcmpun>
   865f2:	2800      	cmp	r0, #0
   865f4:	f040 8434 	bne.w	86e60 <_svfprintf_r+0xf18>
   865f8:	4628      	mov	r0, r5
   865fa:	4621      	mov	r1, r4
   865fc:	f04f 32ff 	mov.w	r2, #4294967295
   86600:	4b6a      	ldr	r3, [pc, #424]	; (867ac <_svfprintf_r+0x864>)
   86602:	f003 fdcb 	bl	8a19c <__aeabi_dcmple>
   86606:	2800      	cmp	r0, #0
   86608:	f040 842a 	bne.w	86e60 <_svfprintf_r+0xf18>
   8660c:	a815      	add	r0, sp, #84	; 0x54
   8660e:	c80d      	ldmia	r0, {r0, r2, r3}
   86610:	9914      	ldr	r1, [sp, #80]	; 0x50
   86612:	f003 fdb9 	bl	8a188 <__aeabi_dcmplt>
   86616:	2800      	cmp	r0, #0
   86618:	f040 85d4 	bne.w	871c4 <_svfprintf_r+0x127c>
   8661c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86620:	2303      	movs	r3, #3
   86622:	461a      	mov	r2, r3
   86624:	9308      	str	r3, [sp, #32]
   86626:	2300      	movs	r3, #0
   86628:	4e61      	ldr	r6, [pc, #388]	; (867b0 <_svfprintf_r+0x868>)
   8662a:	4619      	mov	r1, r3
   8662c:	930a      	str	r3, [sp, #40]	; 0x28
   8662e:	4b61      	ldr	r3, [pc, #388]	; (867b4 <_svfprintf_r+0x86c>)
   86630:	920e      	str	r2, [sp, #56]	; 0x38
   86632:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86634:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   86638:	9007      	str	r0, [sp, #28]
   8663a:	9112      	str	r1, [sp, #72]	; 0x48
   8663c:	2a47      	cmp	r2, #71	; 0x47
   8663e:	bfd8      	it	le
   86640:	461e      	movle	r6, r3
   86642:	e5a5      	b.n	86190 <_svfprintf_r+0x248>
   86644:	f04b 0b08 	orr.w	fp, fp, #8
   86648:	f89a 3000 	ldrb.w	r3, [sl]
   8664c:	e4d6      	b.n	85ffc <_svfprintf_r+0xb4>
   8664e:	f04b 0b10 	orr.w	fp, fp, #16
   86652:	9311      	str	r3, [sp, #68]	; 0x44
   86654:	f01b 0320 	ands.w	r3, fp, #32
   86658:	f43f aebb 	beq.w	863d2 <_svfprintf_r+0x48a>
   8665c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8665e:	3407      	adds	r4, #7
   86660:	f024 0307 	bic.w	r3, r4, #7
   86664:	f103 0208 	add.w	r2, r3, #8
   86668:	e9d3 4500 	ldrd	r4, r5, [r3]
   8666c:	920f      	str	r2, [sp, #60]	; 0x3c
   8666e:	2300      	movs	r3, #0
   86670:	e568      	b.n	86144 <_svfprintf_r+0x1fc>
   86672:	9311      	str	r3, [sp, #68]	; 0x44
   86674:	2a00      	cmp	r2, #0
   86676:	f040 86c2 	bne.w	873fe <_svfprintf_r+0x14b6>
   8667a:	4b4f      	ldr	r3, [pc, #316]	; (867b8 <_svfprintf_r+0x870>)
   8667c:	f01b 0f20 	tst.w	fp, #32
   86680:	9318      	str	r3, [sp, #96]	; 0x60
   86682:	f43f af19 	beq.w	864b8 <_svfprintf_r+0x570>
   86686:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86688:	f01b 0f01 	tst.w	fp, #1
   8668c:	f104 0407 	add.w	r4, r4, #7
   86690:	f024 0307 	bic.w	r3, r4, #7
   86694:	f103 0208 	add.w	r2, r3, #8
   86698:	920f      	str	r2, [sp, #60]	; 0x3c
   8669a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8669e:	f47f af1d 	bne.w	864dc <_svfprintf_r+0x594>
   866a2:	2302      	movs	r3, #2
   866a4:	e54e      	b.n	86144 <_svfprintf_r+0x1fc>
   866a6:	f89a 3000 	ldrb.w	r3, [sl]
   866aa:	2900      	cmp	r1, #0
   866ac:	f47f aca6 	bne.w	85ffc <_svfprintf_r+0xb4>
   866b0:	2201      	movs	r2, #1
   866b2:	2120      	movs	r1, #32
   866b4:	e4a2      	b.n	85ffc <_svfprintf_r+0xb4>
   866b6:	f04b 0b01 	orr.w	fp, fp, #1
   866ba:	f89a 3000 	ldrb.w	r3, [sl]
   866be:	e49d      	b.n	85ffc <_svfprintf_r+0xb4>
   866c0:	f89a 3000 	ldrb.w	r3, [sl]
   866c4:	2201      	movs	r2, #1
   866c6:	212b      	movs	r1, #43	; 0x2b
   866c8:	e498      	b.n	85ffc <_svfprintf_r+0xb4>
   866ca:	f04b 0b20 	orr.w	fp, fp, #32
   866ce:	f89a 3000 	ldrb.w	r3, [sl]
   866d2:	e493      	b.n	85ffc <_svfprintf_r+0xb4>
   866d4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   866d8:	f89a 3000 	ldrb.w	r3, [sl]
   866dc:	e48e      	b.n	85ffc <_svfprintf_r+0xb4>
   866de:	f89a 3000 	ldrb.w	r3, [sl]
   866e2:	2b6c      	cmp	r3, #108	; 0x6c
   866e4:	bf03      	ittte	eq
   866e6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   866ea:	f04b 0b20 	orreq.w	fp, fp, #32
   866ee:	f10a 0a01 	addeq.w	sl, sl, #1
   866f2:	f04b 0b10 	orrne.w	fp, fp, #16
   866f6:	e481      	b.n	85ffc <_svfprintf_r+0xb4>
   866f8:	2a00      	cmp	r2, #0
   866fa:	f040 867c 	bne.w	873f6 <_svfprintf_r+0x14ae>
   866fe:	f01b 0f20 	tst.w	fp, #32
   86702:	f040 8452 	bne.w	86faa <_svfprintf_r+0x1062>
   86706:	f01b 0f10 	tst.w	fp, #16
   8670a:	f040 8438 	bne.w	86f7e <_svfprintf_r+0x1036>
   8670e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86712:	f000 8434 	beq.w	86f7e <_svfprintf_r+0x1036>
   86716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86718:	6813      	ldr	r3, [r2, #0]
   8671a:	3204      	adds	r2, #4
   8671c:	920f      	str	r2, [sp, #60]	; 0x3c
   8671e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   86722:	801a      	strh	r2, [r3, #0]
   86724:	e437      	b.n	85f96 <_svfprintf_r+0x4e>
   86726:	2378      	movs	r3, #120	; 0x78
   86728:	2230      	movs	r2, #48	; 0x30
   8672a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8672c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   86730:	9311      	str	r3, [sp, #68]	; 0x44
   86732:	1d03      	adds	r3, r0, #4
   86734:	930f      	str	r3, [sp, #60]	; 0x3c
   86736:	4b20      	ldr	r3, [pc, #128]	; (867b8 <_svfprintf_r+0x870>)
   86738:	6804      	ldr	r4, [r0, #0]
   8673a:	9318      	str	r3, [sp, #96]	; 0x60
   8673c:	f04b 0b02 	orr.w	fp, fp, #2
   86740:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   86744:	2500      	movs	r5, #0
   86746:	2302      	movs	r3, #2
   86748:	e4fc      	b.n	86144 <_svfprintf_r+0x1fc>
   8674a:	9311      	str	r3, [sp, #68]	; 0x44
   8674c:	2a00      	cmp	r2, #0
   8674e:	f43f aeef 	beq.w	86530 <_svfprintf_r+0x5e8>
   86752:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86756:	e6eb      	b.n	86530 <_svfprintf_r+0x5e8>
   86758:	2000      	movs	r0, #0
   8675a:	4604      	mov	r4, r0
   8675c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86760:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86764:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   86768:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   8676c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86770:	2809      	cmp	r0, #9
   86772:	d9f5      	bls.n	86760 <_svfprintf_r+0x818>
   86774:	940d      	str	r4, [sp, #52]	; 0x34
   86776:	e443      	b.n	86000 <_svfprintf_r+0xb8>
   86778:	9311      	str	r3, [sp, #68]	; 0x44
   8677a:	2a00      	cmp	r2, #0
   8677c:	f040 864a 	bne.w	87414 <_svfprintf_r+0x14cc>
   86780:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86782:	2a00      	cmp	r2, #0
   86784:	f43f acb6 	beq.w	860f4 <_svfprintf_r+0x1ac>
   86788:	2300      	movs	r3, #0
   8678a:	2101      	movs	r1, #1
   8678c:	461f      	mov	r7, r3
   8678e:	9108      	str	r1, [sp, #32]
   86790:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   86794:	f8cd b01c 	str.w	fp, [sp, #28]
   86798:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8679c:	930a      	str	r3, [sp, #40]	; 0x28
   8679e:	9312      	str	r3, [sp, #72]	; 0x48
   867a0:	910e      	str	r1, [sp, #56]	; 0x38
   867a2:	ae28      	add	r6, sp, #160	; 0xa0
   867a4:	e4f8      	b.n	86198 <_svfprintf_r+0x250>
   867a6:	bf00      	nop
   867a8:	0008a97c 	.word	0x0008a97c
   867ac:	7fefffff 	.word	0x7fefffff
   867b0:	0008a970 	.word	0x0008a970
   867b4:	0008a96c 	.word	0x0008a96c
   867b8:	0008a990 	.word	0x0008a990
   867bc:	aa25      	add	r2, sp, #148	; 0x94
   867be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   867c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   867c2:	f002 ff9b 	bl	896fc <__ssprint_r>
   867c6:	2800      	cmp	r0, #0
   867c8:	f47f ac9b 	bne.w	86102 <_svfprintf_r+0x1ba>
   867cc:	46c8      	mov	r8, r9
   867ce:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   867d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   867d4:	e533      	b.n	8623e <_svfprintf_r+0x2f6>
   867d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   867d8:	2b65      	cmp	r3, #101	; 0x65
   867da:	f340 809a 	ble.w	86912 <_svfprintf_r+0x9ca>
   867de:	a815      	add	r0, sp, #84	; 0x54
   867e0:	c80d      	ldmia	r0, {r0, r2, r3}
   867e2:	9914      	ldr	r1, [sp, #80]	; 0x50
   867e4:	f003 fcc6 	bl	8a174 <__aeabi_dcmpeq>
   867e8:	2800      	cmp	r0, #0
   867ea:	f000 8193 	beq.w	86b14 <_svfprintf_r+0xbcc>
   867ee:	2101      	movs	r1, #1
   867f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   867f2:	4ab5      	ldr	r2, [pc, #724]	; (86ac8 <_svfprintf_r+0xb80>)
   867f4:	440b      	add	r3, r1
   867f6:	440c      	add	r4, r1
   867f8:	2b07      	cmp	r3, #7
   867fa:	9427      	str	r4, [sp, #156]	; 0x9c
   867fc:	9326      	str	r3, [sp, #152]	; 0x98
   867fe:	f8c8 1004 	str.w	r1, [r8, #4]
   86802:	f8c8 2000 	str.w	r2, [r8]
   86806:	f300 83c6 	bgt.w	86f96 <_svfprintf_r+0x104e>
   8680a:	f108 0808 	add.w	r8, r8, #8
   8680e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86812:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86814:	4293      	cmp	r3, r2
   86816:	db03      	blt.n	86820 <_svfprintf_r+0x8d8>
   86818:	9b07      	ldr	r3, [sp, #28]
   8681a:	07dd      	lsls	r5, r3, #31
   8681c:	f57f ad86 	bpl.w	8632c <_svfprintf_r+0x3e4>
   86820:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86822:	9919      	ldr	r1, [sp, #100]	; 0x64
   86824:	3301      	adds	r3, #1
   86826:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86828:	440c      	add	r4, r1
   8682a:	2b07      	cmp	r3, #7
   8682c:	f8c8 2000 	str.w	r2, [r8]
   86830:	f8c8 1004 	str.w	r1, [r8, #4]
   86834:	9427      	str	r4, [sp, #156]	; 0x9c
   86836:	9326      	str	r3, [sp, #152]	; 0x98
   86838:	f300 83c4 	bgt.w	86fc4 <_svfprintf_r+0x107c>
   8683c:	f108 0808 	add.w	r8, r8, #8
   86840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86842:	1e5e      	subs	r6, r3, #1
   86844:	2e00      	cmp	r6, #0
   86846:	f77f ad71 	ble.w	8632c <_svfprintf_r+0x3e4>
   8684a:	2e10      	cmp	r6, #16
   8684c:	f340 8575 	ble.w	8733a <_svfprintf_r+0x13f2>
   86850:	4622      	mov	r2, r4
   86852:	2710      	movs	r7, #16
   86854:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86856:	4d9d      	ldr	r5, [pc, #628]	; (86acc <_svfprintf_r+0xb84>)
   86858:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8685c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8685e:	e005      	b.n	8686c <_svfprintf_r+0x924>
   86860:	f108 0808 	add.w	r8, r8, #8
   86864:	3e10      	subs	r6, #16
   86866:	2e10      	cmp	r6, #16
   86868:	f340 8225 	ble.w	86cb6 <_svfprintf_r+0xd6e>
   8686c:	3301      	adds	r3, #1
   8686e:	3210      	adds	r2, #16
   86870:	2b07      	cmp	r3, #7
   86872:	9227      	str	r2, [sp, #156]	; 0x9c
   86874:	9326      	str	r3, [sp, #152]	; 0x98
   86876:	e888 00a0 	stmia.w	r8, {r5, r7}
   8687a:	ddf1      	ble.n	86860 <_svfprintf_r+0x918>
   8687c:	aa25      	add	r2, sp, #148	; 0x94
   8687e:	4621      	mov	r1, r4
   86880:	4658      	mov	r0, fp
   86882:	f002 ff3b 	bl	896fc <__ssprint_r>
   86886:	2800      	cmp	r0, #0
   86888:	f47f ac3b 	bne.w	86102 <_svfprintf_r+0x1ba>
   8688c:	46c8      	mov	r8, r9
   8688e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86890:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86892:	e7e7      	b.n	86864 <_svfprintf_r+0x91c>
   86894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86896:	9a08      	ldr	r2, [sp, #32]
   86898:	1a9f      	subs	r7, r3, r2
   8689a:	2f00      	cmp	r7, #0
   8689c:	f77f acf6 	ble.w	8628c <_svfprintf_r+0x344>
   868a0:	2f10      	cmp	r7, #16
   868a2:	f340 84a8 	ble.w	871f6 <_svfprintf_r+0x12ae>
   868a6:	4d89      	ldr	r5, [pc, #548]	; (86acc <_svfprintf_r+0xb84>)
   868a8:	4642      	mov	r2, r8
   868aa:	4621      	mov	r1, r4
   868ac:	46b0      	mov	r8, r6
   868ae:	f04f 0b10 	mov.w	fp, #16
   868b2:	462e      	mov	r6, r5
   868b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   868b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   868b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   868ba:	e004      	b.n	868c6 <_svfprintf_r+0x97e>
   868bc:	3f10      	subs	r7, #16
   868be:	2f10      	cmp	r7, #16
   868c0:	f102 0208 	add.w	r2, r2, #8
   868c4:	dd15      	ble.n	868f2 <_svfprintf_r+0x9aa>
   868c6:	3301      	adds	r3, #1
   868c8:	3110      	adds	r1, #16
   868ca:	2b07      	cmp	r3, #7
   868cc:	9127      	str	r1, [sp, #156]	; 0x9c
   868ce:	9326      	str	r3, [sp, #152]	; 0x98
   868d0:	e882 0840 	stmia.w	r2, {r6, fp}
   868d4:	ddf2      	ble.n	868bc <_svfprintf_r+0x974>
   868d6:	aa25      	add	r2, sp, #148	; 0x94
   868d8:	4629      	mov	r1, r5
   868da:	4620      	mov	r0, r4
   868dc:	f002 ff0e 	bl	896fc <__ssprint_r>
   868e0:	2800      	cmp	r0, #0
   868e2:	f47f ac0e 	bne.w	86102 <_svfprintf_r+0x1ba>
   868e6:	3f10      	subs	r7, #16
   868e8:	2f10      	cmp	r7, #16
   868ea:	464a      	mov	r2, r9
   868ec:	9927      	ldr	r1, [sp, #156]	; 0x9c
   868ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   868f0:	dce9      	bgt.n	868c6 <_svfprintf_r+0x97e>
   868f2:	4635      	mov	r5, r6
   868f4:	460c      	mov	r4, r1
   868f6:	4646      	mov	r6, r8
   868f8:	4690      	mov	r8, r2
   868fa:	3301      	adds	r3, #1
   868fc:	443c      	add	r4, r7
   868fe:	2b07      	cmp	r3, #7
   86900:	9427      	str	r4, [sp, #156]	; 0x9c
   86902:	9326      	str	r3, [sp, #152]	; 0x98
   86904:	e888 00a0 	stmia.w	r8, {r5, r7}
   86908:	f300 829e 	bgt.w	86e48 <_svfprintf_r+0xf00>
   8690c:	f108 0808 	add.w	r8, r8, #8
   86910:	e4bc      	b.n	8628c <_svfprintf_r+0x344>
   86912:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86914:	2b01      	cmp	r3, #1
   86916:	f340 824f 	ble.w	86db8 <_svfprintf_r+0xe70>
   8691a:	2301      	movs	r3, #1
   8691c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8691e:	441c      	add	r4, r3
   86920:	441f      	add	r7, r3
   86922:	2f07      	cmp	r7, #7
   86924:	9427      	str	r4, [sp, #156]	; 0x9c
   86926:	f8c8 6000 	str.w	r6, [r8]
   8692a:	9726      	str	r7, [sp, #152]	; 0x98
   8692c:	f8c8 3004 	str.w	r3, [r8, #4]
   86930:	f300 825f 	bgt.w	86df2 <_svfprintf_r+0xeaa>
   86934:	f108 0808 	add.w	r8, r8, #8
   86938:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8693a:	3701      	adds	r7, #1
   8693c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8693e:	4414      	add	r4, r2
   86940:	2f07      	cmp	r7, #7
   86942:	9427      	str	r4, [sp, #156]	; 0x9c
   86944:	9726      	str	r7, [sp, #152]	; 0x98
   86946:	f8c8 3000 	str.w	r3, [r8]
   8694a:	f8c8 2004 	str.w	r2, [r8, #4]
   8694e:	f300 825c 	bgt.w	86e0a <_svfprintf_r+0xec2>
   86952:	f108 0808 	add.w	r8, r8, #8
   86956:	a815      	add	r0, sp, #84	; 0x54
   86958:	c80d      	ldmia	r0, {r0, r2, r3}
   8695a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8695c:	f003 fc0a 	bl	8a174 <__aeabi_dcmpeq>
   86960:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86962:	2800      	cmp	r0, #0
   86964:	f040 8141 	bne.w	86bea <_svfprintf_r+0xca2>
   86968:	3b01      	subs	r3, #1
   8696a:	3701      	adds	r7, #1
   8696c:	3601      	adds	r6, #1
   8696e:	441c      	add	r4, r3
   86970:	2f07      	cmp	r7, #7
   86972:	f8c8 6000 	str.w	r6, [r8]
   86976:	9726      	str	r7, [sp, #152]	; 0x98
   86978:	9427      	str	r4, [sp, #156]	; 0x9c
   8697a:	f8c8 3004 	str.w	r3, [r8, #4]
   8697e:	f300 8166 	bgt.w	86c4e <_svfprintf_r+0xd06>
   86982:	f108 0808 	add.w	r8, r8, #8
   86986:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86988:	3701      	adds	r7, #1
   8698a:	4414      	add	r4, r2
   8698c:	ab21      	add	r3, sp, #132	; 0x84
   8698e:	2f07      	cmp	r7, #7
   86990:	9427      	str	r4, [sp, #156]	; 0x9c
   86992:	9726      	str	r7, [sp, #152]	; 0x98
   86994:	f8c8 2004 	str.w	r2, [r8, #4]
   86998:	f8c8 3000 	str.w	r3, [r8]
   8699c:	f77f acc4 	ble.w	86328 <_svfprintf_r+0x3e0>
   869a0:	aa25      	add	r2, sp, #148	; 0x94
   869a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   869a4:	980c      	ldr	r0, [sp, #48]	; 0x30
   869a6:	f002 fea9 	bl	896fc <__ssprint_r>
   869aa:	2800      	cmp	r0, #0
   869ac:	f47f aba9 	bne.w	86102 <_svfprintf_r+0x1ba>
   869b0:	46c8      	mov	r8, r9
   869b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   869b4:	e4ba      	b.n	8632c <_svfprintf_r+0x3e4>
   869b6:	aa25      	add	r2, sp, #148	; 0x94
   869b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   869ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   869bc:	f002 fe9e 	bl	896fc <__ssprint_r>
   869c0:	2800      	cmp	r0, #0
   869c2:	f43f acfd 	beq.w	863c0 <_svfprintf_r+0x478>
   869c6:	f7ff bb9c 	b.w	86102 <_svfprintf_r+0x1ba>
   869ca:	f8dd b01c 	ldr.w	fp, [sp, #28]
   869ce:	2b01      	cmp	r3, #1
   869d0:	f000 817e 	beq.w	86cd0 <_svfprintf_r+0xd88>
   869d4:	2b02      	cmp	r3, #2
   869d6:	d171      	bne.n	86abc <_svfprintf_r+0xb74>
   869d8:	f8cd b01c 	str.w	fp, [sp, #28]
   869dc:	2400      	movs	r4, #0
   869de:	2500      	movs	r5, #0
   869e0:	e5d4      	b.n	8658c <_svfprintf_r+0x644>
   869e2:	aa25      	add	r2, sp, #148	; 0x94
   869e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   869e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   869e8:	f002 fe88 	bl	896fc <__ssprint_r>
   869ec:	2800      	cmp	r0, #0
   869ee:	f47f ab88 	bne.w	86102 <_svfprintf_r+0x1ba>
   869f2:	46c8      	mov	r8, r9
   869f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   869f6:	e486      	b.n	86306 <_svfprintf_r+0x3be>
   869f8:	aa25      	add	r2, sp, #148	; 0x94
   869fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   869fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   869fe:	f002 fe7d 	bl	896fc <__ssprint_r>
   86a02:	2800      	cmp	r0, #0
   86a04:	f47f ab7d 	bne.w	86102 <_svfprintf_r+0x1ba>
   86a08:	46c8      	mov	r8, r9
   86a0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86a0c:	e429      	b.n	86262 <_svfprintf_r+0x31a>
   86a0e:	2001      	movs	r0, #1
   86a10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86a12:	4a2d      	ldr	r2, [pc, #180]	; (86ac8 <_svfprintf_r+0xb80>)
   86a14:	4403      	add	r3, r0
   86a16:	4404      	add	r4, r0
   86a18:	2b07      	cmp	r3, #7
   86a1a:	9427      	str	r4, [sp, #156]	; 0x9c
   86a1c:	9326      	str	r3, [sp, #152]	; 0x98
   86a1e:	f8c8 0004 	str.w	r0, [r8, #4]
   86a22:	f8c8 2000 	str.w	r2, [r8]
   86a26:	f340 82d8 	ble.w	86fda <_svfprintf_r+0x1092>
   86a2a:	aa25      	add	r2, sp, #148	; 0x94
   86a2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a30:	f002 fe64 	bl	896fc <__ssprint_r>
   86a34:	2800      	cmp	r0, #0
   86a36:	f47f ab64 	bne.w	86102 <_svfprintf_r+0x1ba>
   86a3a:	46c8      	mov	r8, r9
   86a3c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86a3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86a40:	b929      	cbnz	r1, 86a4e <_svfprintf_r+0xb06>
   86a42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86a44:	b91b      	cbnz	r3, 86a4e <_svfprintf_r+0xb06>
   86a46:	9b07      	ldr	r3, [sp, #28]
   86a48:	07d8      	lsls	r0, r3, #31
   86a4a:	f57f ac6f 	bpl.w	8632c <_svfprintf_r+0x3e4>
   86a4e:	9819      	ldr	r0, [sp, #100]	; 0x64
   86a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86a52:	4602      	mov	r2, r0
   86a54:	3301      	adds	r3, #1
   86a56:	4422      	add	r2, r4
   86a58:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   86a5a:	2b07      	cmp	r3, #7
   86a5c:	9227      	str	r2, [sp, #156]	; 0x9c
   86a5e:	f8c8 4000 	str.w	r4, [r8]
   86a62:	f8c8 0004 	str.w	r0, [r8, #4]
   86a66:	9326      	str	r3, [sp, #152]	; 0x98
   86a68:	f300 8431 	bgt.w	872ce <_svfprintf_r+0x1386>
   86a6c:	f108 0808 	add.w	r8, r8, #8
   86a70:	2900      	cmp	r1, #0
   86a72:	f2c0 8409 	blt.w	87288 <_svfprintf_r+0x1340>
   86a76:	9913      	ldr	r1, [sp, #76]	; 0x4c
   86a78:	3301      	adds	r3, #1
   86a7a:	188c      	adds	r4, r1, r2
   86a7c:	2b07      	cmp	r3, #7
   86a7e:	9427      	str	r4, [sp, #156]	; 0x9c
   86a80:	9326      	str	r3, [sp, #152]	; 0x98
   86a82:	f8c8 6000 	str.w	r6, [r8]
   86a86:	f8c8 1004 	str.w	r1, [r8, #4]
   86a8a:	f77f ac4d 	ble.w	86328 <_svfprintf_r+0x3e0>
   86a8e:	aa25      	add	r2, sp, #148	; 0x94
   86a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86a92:	980c      	ldr	r0, [sp, #48]	; 0x30
   86a94:	f002 fe32 	bl	896fc <__ssprint_r>
   86a98:	2800      	cmp	r0, #0
   86a9a:	f47f ab32 	bne.w	86102 <_svfprintf_r+0x1ba>
   86a9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86aa0:	46c8      	mov	r8, r9
   86aa2:	e443      	b.n	8632c <_svfprintf_r+0x3e4>
   86aa4:	aa25      	add	r2, sp, #148	; 0x94
   86aa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86aa8:	980c      	ldr	r0, [sp, #48]	; 0x30
   86aaa:	f002 fe27 	bl	896fc <__ssprint_r>
   86aae:	2800      	cmp	r0, #0
   86ab0:	f47f ab27 	bne.w	86102 <_svfprintf_r+0x1ba>
   86ab4:	46c8      	mov	r8, r9
   86ab6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86ab8:	f7ff bbe5 	b.w	86286 <_svfprintf_r+0x33e>
   86abc:	2400      	movs	r4, #0
   86abe:	2500      	movs	r5, #0
   86ac0:	f8cd b01c 	str.w	fp, [sp, #28]
   86ac4:	4649      	mov	r1, r9
   86ac6:	e004      	b.n	86ad2 <_svfprintf_r+0xb8a>
   86ac8:	0008a9ac 	.word	0x0008a9ac
   86acc:	0008a9c0 	.word	0x0008a9c0
   86ad0:	4631      	mov	r1, r6
   86ad2:	08e2      	lsrs	r2, r4, #3
   86ad4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86ad8:	08e8      	lsrs	r0, r5, #3
   86ada:	f004 0307 	and.w	r3, r4, #7
   86ade:	4605      	mov	r5, r0
   86ae0:	4614      	mov	r4, r2
   86ae2:	3330      	adds	r3, #48	; 0x30
   86ae4:	ea54 0205 	orrs.w	r2, r4, r5
   86ae8:	f801 3c01 	strb.w	r3, [r1, #-1]
   86aec:	f101 36ff 	add.w	r6, r1, #4294967295
   86af0:	d1ee      	bne.n	86ad0 <_svfprintf_r+0xb88>
   86af2:	9a07      	ldr	r2, [sp, #28]
   86af4:	07d2      	lsls	r2, r2, #31
   86af6:	f57f ad59 	bpl.w	865ac <_svfprintf_r+0x664>
   86afa:	2b30      	cmp	r3, #48	; 0x30
   86afc:	f43f ad56 	beq.w	865ac <_svfprintf_r+0x664>
   86b00:	2330      	movs	r3, #48	; 0x30
   86b02:	3902      	subs	r1, #2
   86b04:	f806 3c01 	strb.w	r3, [r6, #-1]
   86b08:	eba9 0301 	sub.w	r3, r9, r1
   86b0c:	930e      	str	r3, [sp, #56]	; 0x38
   86b0e:	460e      	mov	r6, r1
   86b10:	f7ff bb36 	b.w	86180 <_svfprintf_r+0x238>
   86b14:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86b16:	2900      	cmp	r1, #0
   86b18:	f77f af79 	ble.w	86a0e <_svfprintf_r+0xac6>
   86b1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86b1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86b20:	4293      	cmp	r3, r2
   86b22:	bfa8      	it	ge
   86b24:	4613      	movge	r3, r2
   86b26:	2b00      	cmp	r3, #0
   86b28:	461f      	mov	r7, r3
   86b2a:	dd0b      	ble.n	86b44 <_svfprintf_r+0xbfc>
   86b2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86b2e:	443c      	add	r4, r7
   86b30:	3301      	adds	r3, #1
   86b32:	2b07      	cmp	r3, #7
   86b34:	9427      	str	r4, [sp, #156]	; 0x9c
   86b36:	e888 00c0 	stmia.w	r8, {r6, r7}
   86b3a:	9326      	str	r3, [sp, #152]	; 0x98
   86b3c:	f300 82fb 	bgt.w	87136 <_svfprintf_r+0x11ee>
   86b40:	f108 0808 	add.w	r8, r8, #8
   86b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86b46:	2f00      	cmp	r7, #0
   86b48:	bfa8      	it	ge
   86b4a:	1bdb      	subge	r3, r3, r7
   86b4c:	2b00      	cmp	r3, #0
   86b4e:	461f      	mov	r7, r3
   86b50:	f340 80d7 	ble.w	86d02 <_svfprintf_r+0xdba>
   86b54:	2b10      	cmp	r3, #16
   86b56:	f340 8434 	ble.w	873c2 <_svfprintf_r+0x147a>
   86b5a:	4dba      	ldr	r5, [pc, #744]	; (86e44 <_svfprintf_r+0xefc>)
   86b5c:	4642      	mov	r2, r8
   86b5e:	4621      	mov	r1, r4
   86b60:	46b0      	mov	r8, r6
   86b62:	f04f 0b10 	mov.w	fp, #16
   86b66:	462e      	mov	r6, r5
   86b68:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86b6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86b6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86b6e:	e004      	b.n	86b7a <_svfprintf_r+0xc32>
   86b70:	3208      	adds	r2, #8
   86b72:	3f10      	subs	r7, #16
   86b74:	2f10      	cmp	r7, #16
   86b76:	f340 80b5 	ble.w	86ce4 <_svfprintf_r+0xd9c>
   86b7a:	3301      	adds	r3, #1
   86b7c:	3110      	adds	r1, #16
   86b7e:	2b07      	cmp	r3, #7
   86b80:	9127      	str	r1, [sp, #156]	; 0x9c
   86b82:	9326      	str	r3, [sp, #152]	; 0x98
   86b84:	e882 0840 	stmia.w	r2, {r6, fp}
   86b88:	ddf2      	ble.n	86b70 <_svfprintf_r+0xc28>
   86b8a:	aa25      	add	r2, sp, #148	; 0x94
   86b8c:	4629      	mov	r1, r5
   86b8e:	4620      	mov	r0, r4
   86b90:	f002 fdb4 	bl	896fc <__ssprint_r>
   86b94:	2800      	cmp	r0, #0
   86b96:	f47f aab4 	bne.w	86102 <_svfprintf_r+0x1ba>
   86b9a:	464a      	mov	r2, r9
   86b9c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   86b9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86ba0:	e7e7      	b.n	86b72 <_svfprintf_r+0xc2a>
   86ba2:	2d00      	cmp	r5, #0
   86ba4:	bf08      	it	eq
   86ba6:	2c0a      	cmpeq	r4, #10
   86ba8:	f0c0 8090 	bcc.w	86ccc <_svfprintf_r+0xd84>
   86bac:	464e      	mov	r6, r9
   86bae:	4620      	mov	r0, r4
   86bb0:	4629      	mov	r1, r5
   86bb2:	220a      	movs	r2, #10
   86bb4:	2300      	movs	r3, #0
   86bb6:	f003 fb4d 	bl	8a254 <__aeabi_uldivmod>
   86bba:	3230      	adds	r2, #48	; 0x30
   86bbc:	f806 2d01 	strb.w	r2, [r6, #-1]!
   86bc0:	4620      	mov	r0, r4
   86bc2:	4629      	mov	r1, r5
   86bc4:	2300      	movs	r3, #0
   86bc6:	220a      	movs	r2, #10
   86bc8:	f003 fb44 	bl	8a254 <__aeabi_uldivmod>
   86bcc:	4604      	mov	r4, r0
   86bce:	460d      	mov	r5, r1
   86bd0:	ea54 0305 	orrs.w	r3, r4, r5
   86bd4:	d1eb      	bne.n	86bae <_svfprintf_r+0xc66>
   86bd6:	eba9 0306 	sub.w	r3, r9, r6
   86bda:	930e      	str	r3, [sp, #56]	; 0x38
   86bdc:	f7ff bad0 	b.w	86180 <_svfprintf_r+0x238>
   86be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86be2:	464e      	mov	r6, r9
   86be4:	930e      	str	r3, [sp, #56]	; 0x38
   86be6:	f7ff bacb 	b.w	86180 <_svfprintf_r+0x238>
   86bea:	1e5e      	subs	r6, r3, #1
   86bec:	2e00      	cmp	r6, #0
   86bee:	f77f aeca 	ble.w	86986 <_svfprintf_r+0xa3e>
   86bf2:	2e10      	cmp	r6, #16
   86bf4:	f340 83e3 	ble.w	873be <_svfprintf_r+0x1476>
   86bf8:	4622      	mov	r2, r4
   86bfa:	f04f 0b10 	mov.w	fp, #16
   86bfe:	4d91      	ldr	r5, [pc, #580]	; (86e44 <_svfprintf_r+0xefc>)
   86c00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86c02:	e004      	b.n	86c0e <_svfprintf_r+0xcc6>
   86c04:	3e10      	subs	r6, #16
   86c06:	2e10      	cmp	r6, #16
   86c08:	f108 0808 	add.w	r8, r8, #8
   86c0c:	dd15      	ble.n	86c3a <_svfprintf_r+0xcf2>
   86c0e:	3701      	adds	r7, #1
   86c10:	3210      	adds	r2, #16
   86c12:	2f07      	cmp	r7, #7
   86c14:	9227      	str	r2, [sp, #156]	; 0x9c
   86c16:	9726      	str	r7, [sp, #152]	; 0x98
   86c18:	e888 0820 	stmia.w	r8, {r5, fp}
   86c1c:	ddf2      	ble.n	86c04 <_svfprintf_r+0xcbc>
   86c1e:	aa25      	add	r2, sp, #148	; 0x94
   86c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c22:	4620      	mov	r0, r4
   86c24:	f002 fd6a 	bl	896fc <__ssprint_r>
   86c28:	2800      	cmp	r0, #0
   86c2a:	f47f aa6a 	bne.w	86102 <_svfprintf_r+0x1ba>
   86c2e:	3e10      	subs	r6, #16
   86c30:	2e10      	cmp	r6, #16
   86c32:	46c8      	mov	r8, r9
   86c34:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86c36:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86c38:	dce9      	bgt.n	86c0e <_svfprintf_r+0xcc6>
   86c3a:	4614      	mov	r4, r2
   86c3c:	3701      	adds	r7, #1
   86c3e:	4434      	add	r4, r6
   86c40:	2f07      	cmp	r7, #7
   86c42:	9427      	str	r4, [sp, #156]	; 0x9c
   86c44:	9726      	str	r7, [sp, #152]	; 0x98
   86c46:	e888 0060 	stmia.w	r8, {r5, r6}
   86c4a:	f77f ae9a 	ble.w	86982 <_svfprintf_r+0xa3a>
   86c4e:	aa25      	add	r2, sp, #148	; 0x94
   86c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86c52:	980c      	ldr	r0, [sp, #48]	; 0x30
   86c54:	f002 fd52 	bl	896fc <__ssprint_r>
   86c58:	2800      	cmp	r0, #0
   86c5a:	f47f aa52 	bne.w	86102 <_svfprintf_r+0x1ba>
   86c5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86c60:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86c62:	46c8      	mov	r8, r9
   86c64:	e68f      	b.n	86986 <_svfprintf_r+0xa3e>
   86c66:	3204      	adds	r2, #4
   86c68:	681c      	ldr	r4, [r3, #0]
   86c6a:	2500      	movs	r5, #0
   86c6c:	2301      	movs	r3, #1
   86c6e:	920f      	str	r2, [sp, #60]	; 0x3c
   86c70:	f7ff ba68 	b.w	86144 <_svfprintf_r+0x1fc>
   86c74:	681c      	ldr	r4, [r3, #0]
   86c76:	3304      	adds	r3, #4
   86c78:	930f      	str	r3, [sp, #60]	; 0x3c
   86c7a:	2500      	movs	r5, #0
   86c7c:	e42a      	b.n	864d4 <_svfprintf_r+0x58c>
   86c7e:	681c      	ldr	r4, [r3, #0]
   86c80:	3304      	adds	r3, #4
   86c82:	17e5      	asrs	r5, r4, #31
   86c84:	4622      	mov	r2, r4
   86c86:	930f      	str	r3, [sp, #60]	; 0x3c
   86c88:	462b      	mov	r3, r5
   86c8a:	2a00      	cmp	r2, #0
   86c8c:	f173 0300 	sbcs.w	r3, r3, #0
   86c90:	f6bf ac68 	bge.w	86564 <_svfprintf_r+0x61c>
   86c94:	272d      	movs	r7, #45	; 0x2d
   86c96:	4264      	negs	r4, r4
   86c98:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   86c9c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   86ca0:	2301      	movs	r3, #1
   86ca2:	f7ff ba53 	b.w	8614c <_svfprintf_r+0x204>
   86ca6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86ca8:	2500      	movs	r5, #0
   86caa:	460a      	mov	r2, r1
   86cac:	3204      	adds	r2, #4
   86cae:	680c      	ldr	r4, [r1, #0]
   86cb0:	920f      	str	r2, [sp, #60]	; 0x3c
   86cb2:	f7ff ba47 	b.w	86144 <_svfprintf_r+0x1fc>
   86cb6:	4614      	mov	r4, r2
   86cb8:	3301      	adds	r3, #1
   86cba:	4434      	add	r4, r6
   86cbc:	2b07      	cmp	r3, #7
   86cbe:	9427      	str	r4, [sp, #156]	; 0x9c
   86cc0:	9326      	str	r3, [sp, #152]	; 0x98
   86cc2:	e888 0060 	stmia.w	r8, {r5, r6}
   86cc6:	f77f ab2f 	ble.w	86328 <_svfprintf_r+0x3e0>
   86cca:	e6e0      	b.n	86a8e <_svfprintf_r+0xb46>
   86ccc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86cd0:	2301      	movs	r3, #1
   86cd2:	ae42      	add	r6, sp, #264	; 0x108
   86cd4:	3430      	adds	r4, #48	; 0x30
   86cd6:	f8cd b01c 	str.w	fp, [sp, #28]
   86cda:	f806 4d41 	strb.w	r4, [r6, #-65]!
   86cde:	930e      	str	r3, [sp, #56]	; 0x38
   86ce0:	f7ff ba4e 	b.w	86180 <_svfprintf_r+0x238>
   86ce4:	4635      	mov	r5, r6
   86ce6:	460c      	mov	r4, r1
   86ce8:	4646      	mov	r6, r8
   86cea:	4690      	mov	r8, r2
   86cec:	3301      	adds	r3, #1
   86cee:	443c      	add	r4, r7
   86cf0:	2b07      	cmp	r3, #7
   86cf2:	9427      	str	r4, [sp, #156]	; 0x9c
   86cf4:	9326      	str	r3, [sp, #152]	; 0x98
   86cf6:	e888 00a0 	stmia.w	r8, {r5, r7}
   86cfa:	f300 8246 	bgt.w	8718a <_svfprintf_r+0x1242>
   86cfe:	f108 0808 	add.w	r8, r8, #8
   86d02:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   86d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86d06:	429a      	cmp	r2, r3
   86d08:	db45      	blt.n	86d96 <_svfprintf_r+0xe4e>
   86d0a:	9b07      	ldr	r3, [sp, #28]
   86d0c:	07d9      	lsls	r1, r3, #31
   86d0e:	d442      	bmi.n	86d96 <_svfprintf_r+0xe4e>
   86d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86d12:	9812      	ldr	r0, [sp, #72]	; 0x48
   86d14:	1a9a      	subs	r2, r3, r2
   86d16:	1a1d      	subs	r5, r3, r0
   86d18:	4295      	cmp	r5, r2
   86d1a:	bfa8      	it	ge
   86d1c:	4615      	movge	r5, r2
   86d1e:	2d00      	cmp	r5, #0
   86d20:	dd0e      	ble.n	86d40 <_svfprintf_r+0xdf8>
   86d22:	9926      	ldr	r1, [sp, #152]	; 0x98
   86d24:	4406      	add	r6, r0
   86d26:	3101      	adds	r1, #1
   86d28:	442c      	add	r4, r5
   86d2a:	2907      	cmp	r1, #7
   86d2c:	f8c8 6000 	str.w	r6, [r8]
   86d30:	9427      	str	r4, [sp, #156]	; 0x9c
   86d32:	f8c8 5004 	str.w	r5, [r8, #4]
   86d36:	9126      	str	r1, [sp, #152]	; 0x98
   86d38:	f300 8216 	bgt.w	87168 <_svfprintf_r+0x1220>
   86d3c:	f108 0808 	add.w	r8, r8, #8
   86d40:	2d00      	cmp	r5, #0
   86d42:	bfb4      	ite	lt
   86d44:	4616      	movlt	r6, r2
   86d46:	1b56      	subge	r6, r2, r5
   86d48:	2e00      	cmp	r6, #0
   86d4a:	f77f aaef 	ble.w	8632c <_svfprintf_r+0x3e4>
   86d4e:	2e10      	cmp	r6, #16
   86d50:	f340 82f3 	ble.w	8733a <_svfprintf_r+0x13f2>
   86d54:	4622      	mov	r2, r4
   86d56:	2710      	movs	r7, #16
   86d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d5a:	4d3a      	ldr	r5, [pc, #232]	; (86e44 <_svfprintf_r+0xefc>)
   86d5c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86d60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86d62:	e004      	b.n	86d6e <_svfprintf_r+0xe26>
   86d64:	f108 0808 	add.w	r8, r8, #8
   86d68:	3e10      	subs	r6, #16
   86d6a:	2e10      	cmp	r6, #16
   86d6c:	dda3      	ble.n	86cb6 <_svfprintf_r+0xd6e>
   86d6e:	3301      	adds	r3, #1
   86d70:	3210      	adds	r2, #16
   86d72:	2b07      	cmp	r3, #7
   86d74:	9227      	str	r2, [sp, #156]	; 0x9c
   86d76:	9326      	str	r3, [sp, #152]	; 0x98
   86d78:	e888 00a0 	stmia.w	r8, {r5, r7}
   86d7c:	ddf2      	ble.n	86d64 <_svfprintf_r+0xe1c>
   86d7e:	aa25      	add	r2, sp, #148	; 0x94
   86d80:	4621      	mov	r1, r4
   86d82:	4658      	mov	r0, fp
   86d84:	f002 fcba 	bl	896fc <__ssprint_r>
   86d88:	2800      	cmp	r0, #0
   86d8a:	f47f a9ba 	bne.w	86102 <_svfprintf_r+0x1ba>
   86d8e:	46c8      	mov	r8, r9
   86d90:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d94:	e7e8      	b.n	86d68 <_svfprintf_r+0xe20>
   86d96:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d98:	9819      	ldr	r0, [sp, #100]	; 0x64
   86d9a:	3301      	adds	r3, #1
   86d9c:	991a      	ldr	r1, [sp, #104]	; 0x68
   86d9e:	4404      	add	r4, r0
   86da0:	2b07      	cmp	r3, #7
   86da2:	9427      	str	r4, [sp, #156]	; 0x9c
   86da4:	f8c8 1000 	str.w	r1, [r8]
   86da8:	f8c8 0004 	str.w	r0, [r8, #4]
   86dac:	9326      	str	r3, [sp, #152]	; 0x98
   86dae:	f300 81cf 	bgt.w	87150 <_svfprintf_r+0x1208>
   86db2:	f108 0808 	add.w	r8, r8, #8
   86db6:	e7ab      	b.n	86d10 <_svfprintf_r+0xdc8>
   86db8:	9b07      	ldr	r3, [sp, #28]
   86dba:	07da      	lsls	r2, r3, #31
   86dbc:	f53f adad 	bmi.w	8691a <_svfprintf_r+0x9d2>
   86dc0:	2301      	movs	r3, #1
   86dc2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86dc4:	441c      	add	r4, r3
   86dc6:	441f      	add	r7, r3
   86dc8:	2f07      	cmp	r7, #7
   86dca:	9427      	str	r4, [sp, #156]	; 0x9c
   86dcc:	f8c8 6000 	str.w	r6, [r8]
   86dd0:	9726      	str	r7, [sp, #152]	; 0x98
   86dd2:	f8c8 3004 	str.w	r3, [r8, #4]
   86dd6:	f77f add4 	ble.w	86982 <_svfprintf_r+0xa3a>
   86dda:	aa25      	add	r2, sp, #148	; 0x94
   86ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86dde:	980c      	ldr	r0, [sp, #48]	; 0x30
   86de0:	f002 fc8c 	bl	896fc <__ssprint_r>
   86de4:	2800      	cmp	r0, #0
   86de6:	f47f a98c 	bne.w	86102 <_svfprintf_r+0x1ba>
   86dea:	46c8      	mov	r8, r9
   86dec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86dee:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86df0:	e5c9      	b.n	86986 <_svfprintf_r+0xa3e>
   86df2:	aa25      	add	r2, sp, #148	; 0x94
   86df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86df6:	980c      	ldr	r0, [sp, #48]	; 0x30
   86df8:	f002 fc80 	bl	896fc <__ssprint_r>
   86dfc:	2800      	cmp	r0, #0
   86dfe:	f47f a980 	bne.w	86102 <_svfprintf_r+0x1ba>
   86e02:	46c8      	mov	r8, r9
   86e04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86e06:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86e08:	e596      	b.n	86938 <_svfprintf_r+0x9f0>
   86e0a:	aa25      	add	r2, sp, #148	; 0x94
   86e0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86e0e:	980c      	ldr	r0, [sp, #48]	; 0x30
   86e10:	f002 fc74 	bl	896fc <__ssprint_r>
   86e14:	2800      	cmp	r0, #0
   86e16:	f47f a974 	bne.w	86102 <_svfprintf_r+0x1ba>
   86e1a:	46c8      	mov	r8, r9
   86e1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86e1e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86e20:	e599      	b.n	86956 <_svfprintf_r+0xa0e>
   86e22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86e24:	3407      	adds	r4, #7
   86e26:	f024 0407 	bic.w	r4, r4, #7
   86e2a:	f104 0108 	add.w	r1, r4, #8
   86e2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   86e32:	910f      	str	r1, [sp, #60]	; 0x3c
   86e34:	4614      	mov	r4, r2
   86e36:	461d      	mov	r5, r3
   86e38:	f7ff bb8f 	b.w	8655a <_svfprintf_r+0x612>
   86e3c:	464e      	mov	r6, r9
   86e3e:	f7ff b99f 	b.w	86180 <_svfprintf_r+0x238>
   86e42:	bf00      	nop
   86e44:	0008a9c0 	.word	0x0008a9c0
   86e48:	aa25      	add	r2, sp, #148	; 0x94
   86e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86e4c:	980c      	ldr	r0, [sp, #48]	; 0x30
   86e4e:	f002 fc55 	bl	896fc <__ssprint_r>
   86e52:	2800      	cmp	r0, #0
   86e54:	f47f a955 	bne.w	86102 <_svfprintf_r+0x1ba>
   86e58:	46c8      	mov	r8, r9
   86e5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86e5c:	f7ff ba16 	b.w	8628c <_svfprintf_r+0x344>
   86e60:	9c15      	ldr	r4, [sp, #84]	; 0x54
   86e62:	4622      	mov	r2, r4
   86e64:	4620      	mov	r0, r4
   86e66:	9c14      	ldr	r4, [sp, #80]	; 0x50
   86e68:	4623      	mov	r3, r4
   86e6a:	4621      	mov	r1, r4
   86e6c:	f003 f9b4 	bl	8a1d8 <__aeabi_dcmpun>
   86e70:	2800      	cmp	r0, #0
   86e72:	f040 8273 	bne.w	8735c <_svfprintf_r+0x1414>
   86e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86e78:	3301      	adds	r3, #1
   86e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86e7c:	f023 0320 	bic.w	r3, r3, #32
   86e80:	930e      	str	r3, [sp, #56]	; 0x38
   86e82:	f000 819c 	beq.w	871be <_svfprintf_r+0x1276>
   86e86:	2b47      	cmp	r3, #71	; 0x47
   86e88:	f000 80d6 	beq.w	87038 <_svfprintf_r+0x10f0>
   86e8c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   86e90:	9307      	str	r3, [sp, #28]
   86e92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86e94:	1e1f      	subs	r7, r3, #0
   86e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
   86e98:	9308      	str	r3, [sp, #32]
   86e9a:	bfb7      	itett	lt
   86e9c:	463b      	movlt	r3, r7
   86e9e:	2300      	movge	r3, #0
   86ea0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   86ea4:	232d      	movlt	r3, #45	; 0x2d
   86ea6:	9310      	str	r3, [sp, #64]	; 0x40
   86ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86eaa:	2b66      	cmp	r3, #102	; 0x66
   86eac:	f000 8190 	beq.w	871d0 <_svfprintf_r+0x1288>
   86eb0:	2b46      	cmp	r3, #70	; 0x46
   86eb2:	f000 80a4 	beq.w	86ffe <_svfprintf_r+0x10b6>
   86eb6:	2002      	movs	r0, #2
   86eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86eba:	a923      	add	r1, sp, #140	; 0x8c
   86ebc:	2b45      	cmp	r3, #69	; 0x45
   86ebe:	bf0a      	itet	eq
   86ec0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   86ec2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   86ec4:	1c5d      	addeq	r5, r3, #1
   86ec6:	e88d 0021 	stmia.w	sp, {r0, r5}
   86eca:	9104      	str	r1, [sp, #16]
   86ecc:	a820      	add	r0, sp, #128	; 0x80
   86ece:	a91f      	add	r1, sp, #124	; 0x7c
   86ed0:	463b      	mov	r3, r7
   86ed2:	9003      	str	r0, [sp, #12]
   86ed4:	9a08      	ldr	r2, [sp, #32]
   86ed6:	9102      	str	r1, [sp, #8]
   86ed8:	980c      	ldr	r0, [sp, #48]	; 0x30
   86eda:	f000 fb59 	bl	87590 <_dtoa_r>
   86ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86ee0:	4606      	mov	r6, r0
   86ee2:	2b67      	cmp	r3, #103	; 0x67
   86ee4:	f040 81ba 	bne.w	8725c <_svfprintf_r+0x1314>
   86ee8:	f01b 0f01 	tst.w	fp, #1
   86eec:	f000 8223 	beq.w	87336 <_svfprintf_r+0x13ee>
   86ef0:	1974      	adds	r4, r6, r5
   86ef2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86ef4:	9808      	ldr	r0, [sp, #32]
   86ef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86ef8:	4639      	mov	r1, r7
   86efa:	f003 f93b 	bl	8a174 <__aeabi_dcmpeq>
   86efe:	2800      	cmp	r0, #0
   86f00:	f040 8124 	bne.w	8714c <_svfprintf_r+0x1204>
   86f04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86f06:	42a3      	cmp	r3, r4
   86f08:	d206      	bcs.n	86f18 <_svfprintf_r+0xfd0>
   86f0a:	2130      	movs	r1, #48	; 0x30
   86f0c:	1c5a      	adds	r2, r3, #1
   86f0e:	9223      	str	r2, [sp, #140]	; 0x8c
   86f10:	7019      	strb	r1, [r3, #0]
   86f12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   86f14:	429c      	cmp	r4, r3
   86f16:	d8f9      	bhi.n	86f0c <_svfprintf_r+0xfc4>
   86f18:	1b9b      	subs	r3, r3, r6
   86f1a:	9313      	str	r3, [sp, #76]	; 0x4c
   86f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f1e:	2b47      	cmp	r3, #71	; 0x47
   86f20:	f000 80a2 	beq.w	87068 <_svfprintf_r+0x1120>
   86f24:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86f26:	2b65      	cmp	r3, #101	; 0x65
   86f28:	f340 81a7 	ble.w	8727a <_svfprintf_r+0x1332>
   86f2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86f2e:	2b66      	cmp	r3, #102	; 0x66
   86f30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86f32:	9312      	str	r3, [sp, #72]	; 0x48
   86f34:	f000 8171 	beq.w	8721a <_svfprintf_r+0x12d2>
   86f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86f3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86f3c:	4619      	mov	r1, r3
   86f3e:	4291      	cmp	r1, r2
   86f40:	f300 815d 	bgt.w	871fe <_svfprintf_r+0x12b6>
   86f44:	f01b 0f01 	tst.w	fp, #1
   86f48:	f040 81f0 	bne.w	8732c <_svfprintf_r+0x13e4>
   86f4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   86f50:	9308      	str	r3, [sp, #32]
   86f52:	2367      	movs	r3, #103	; 0x67
   86f54:	920e      	str	r2, [sp, #56]	; 0x38
   86f56:	9311      	str	r3, [sp, #68]	; 0x44
   86f58:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86f5a:	2b00      	cmp	r3, #0
   86f5c:	d17d      	bne.n	8705a <_svfprintf_r+0x1112>
   86f5e:	930a      	str	r3, [sp, #40]	; 0x28
   86f60:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86f64:	f7ff b914 	b.w	86190 <_svfprintf_r+0x248>
   86f68:	f024 0407 	bic.w	r4, r4, #7
   86f6c:	6823      	ldr	r3, [r4, #0]
   86f6e:	9315      	str	r3, [sp, #84]	; 0x54
   86f70:	6863      	ldr	r3, [r4, #4]
   86f72:	9314      	str	r3, [sp, #80]	; 0x50
   86f74:	f104 0308 	add.w	r3, r4, #8
   86f78:	930f      	str	r3, [sp, #60]	; 0x3c
   86f7a:	f7ff bb2f 	b.w	865dc <_svfprintf_r+0x694>
   86f7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86f80:	6813      	ldr	r3, [r2, #0]
   86f82:	3204      	adds	r2, #4
   86f84:	920f      	str	r2, [sp, #60]	; 0x3c
   86f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86f88:	601a      	str	r2, [r3, #0]
   86f8a:	f7ff b804 	b.w	85f96 <_svfprintf_r+0x4e>
   86f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86f90:	4daf      	ldr	r5, [pc, #700]	; (87250 <_svfprintf_r+0x1308>)
   86f92:	f7ff b9ad 	b.w	862f0 <_svfprintf_r+0x3a8>
   86f96:	aa25      	add	r2, sp, #148	; 0x94
   86f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86f9a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86f9c:	f002 fbae 	bl	896fc <__ssprint_r>
   86fa0:	2800      	cmp	r0, #0
   86fa2:	f47f a8ae 	bne.w	86102 <_svfprintf_r+0x1ba>
   86fa6:	46c8      	mov	r8, r9
   86fa8:	e431      	b.n	8680e <_svfprintf_r+0x8c6>
   86faa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86fac:	4613      	mov	r3, r2
   86fae:	3304      	adds	r3, #4
   86fb0:	930f      	str	r3, [sp, #60]	; 0x3c
   86fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86fb4:	6811      	ldr	r1, [r2, #0]
   86fb6:	17dd      	asrs	r5, r3, #31
   86fb8:	461a      	mov	r2, r3
   86fba:	462b      	mov	r3, r5
   86fbc:	e9c1 2300 	strd	r2, r3, [r1]
   86fc0:	f7fe bfe9 	b.w	85f96 <_svfprintf_r+0x4e>
   86fc4:	aa25      	add	r2, sp, #148	; 0x94
   86fc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86fc8:	980c      	ldr	r0, [sp, #48]	; 0x30
   86fca:	f002 fb97 	bl	896fc <__ssprint_r>
   86fce:	2800      	cmp	r0, #0
   86fd0:	f47f a897 	bne.w	86102 <_svfprintf_r+0x1ba>
   86fd4:	46c8      	mov	r8, r9
   86fd6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86fd8:	e432      	b.n	86840 <_svfprintf_r+0x8f8>
   86fda:	f108 0808 	add.w	r8, r8, #8
   86fde:	e52f      	b.n	86a40 <_svfprintf_r+0xaf8>
   86fe0:	2140      	movs	r1, #64	; 0x40
   86fe2:	980c      	ldr	r0, [sp, #48]	; 0x30
   86fe4:	f001 fb58 	bl	88698 <_malloc_r>
   86fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86fea:	6010      	str	r0, [r2, #0]
   86fec:	6110      	str	r0, [r2, #16]
   86fee:	2800      	cmp	r0, #0
   86ff0:	f000 8214 	beq.w	8741c <_svfprintf_r+0x14d4>
   86ff4:	2340      	movs	r3, #64	; 0x40
   86ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86ff8:	6153      	str	r3, [r2, #20]
   86ffa:	f7fe bfbc 	b.w	85f76 <_svfprintf_r+0x2e>
   86ffe:	2003      	movs	r0, #3
   87000:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87002:	a923      	add	r1, sp, #140	; 0x8c
   87004:	e88d 0011 	stmia.w	sp, {r0, r4}
   87008:	9104      	str	r1, [sp, #16]
   8700a:	a820      	add	r0, sp, #128	; 0x80
   8700c:	a91f      	add	r1, sp, #124	; 0x7c
   8700e:	9003      	str	r0, [sp, #12]
   87010:	9a08      	ldr	r2, [sp, #32]
   87012:	463b      	mov	r3, r7
   87014:	9102      	str	r1, [sp, #8]
   87016:	980c      	ldr	r0, [sp, #48]	; 0x30
   87018:	f000 faba 	bl	87590 <_dtoa_r>
   8701c:	4625      	mov	r5, r4
   8701e:	4606      	mov	r6, r0
   87020:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87022:	1974      	adds	r4, r6, r5
   87024:	2b46      	cmp	r3, #70	; 0x46
   87026:	f47f af64 	bne.w	86ef2 <_svfprintf_r+0xfaa>
   8702a:	7833      	ldrb	r3, [r6, #0]
   8702c:	2b30      	cmp	r3, #48	; 0x30
   8702e:	f000 8187 	beq.w	87340 <_svfprintf_r+0x13f8>
   87032:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   87034:	442c      	add	r4, r5
   87036:	e75c      	b.n	86ef2 <_svfprintf_r+0xfaa>
   87038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8703a:	2b00      	cmp	r3, #0
   8703c:	bf08      	it	eq
   8703e:	2301      	moveq	r3, #1
   87040:	930a      	str	r3, [sp, #40]	; 0x28
   87042:	e723      	b.n	86e8c <_svfprintf_r+0xf44>
   87044:	4630      	mov	r0, r6
   87046:	950a      	str	r5, [sp, #40]	; 0x28
   87048:	f7fe ff50 	bl	85eec <strlen>
   8704c:	940f      	str	r4, [sp, #60]	; 0x3c
   8704e:	900e      	str	r0, [sp, #56]	; 0x38
   87050:	f8cd b01c 	str.w	fp, [sp, #28]
   87054:	4603      	mov	r3, r0
   87056:	f7ff b9e7 	b.w	86428 <_svfprintf_r+0x4e0>
   8705a:	272d      	movs	r7, #45	; 0x2d
   8705c:	2300      	movs	r3, #0
   8705e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   87062:	930a      	str	r3, [sp, #40]	; 0x28
   87064:	f7ff b895 	b.w	86192 <_svfprintf_r+0x24a>
   87068:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8706a:	461a      	mov	r2, r3
   8706c:	9312      	str	r3, [sp, #72]	; 0x48
   8706e:	3303      	adds	r3, #3
   87070:	db04      	blt.n	8707c <_svfprintf_r+0x1134>
   87072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87074:	4619      	mov	r1, r3
   87076:	4291      	cmp	r1, r2
   87078:	f6bf af5e 	bge.w	86f38 <_svfprintf_r+0xff0>
   8707c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8707e:	3b02      	subs	r3, #2
   87080:	9311      	str	r3, [sp, #68]	; 0x44
   87082:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87084:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   87088:	3b01      	subs	r3, #1
   8708a:	2b00      	cmp	r3, #0
   8708c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   87090:	bfb4      	ite	lt
   87092:	222d      	movlt	r2, #45	; 0x2d
   87094:	222b      	movge	r2, #43	; 0x2b
   87096:	931f      	str	r3, [sp, #124]	; 0x7c
   87098:	bfb8      	it	lt
   8709a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   8709c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   870a0:	bfb8      	it	lt
   870a2:	f1c3 0301 	rsblt	r3, r3, #1
   870a6:	2b09      	cmp	r3, #9
   870a8:	f340 811f 	ble.w	872ea <_svfprintf_r+0x13a2>
   870ac:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   870b0:	4601      	mov	r1, r0
   870b2:	4c68      	ldr	r4, [pc, #416]	; (87254 <_svfprintf_r+0x130c>)
   870b4:	e000      	b.n	870b8 <_svfprintf_r+0x1170>
   870b6:	4611      	mov	r1, r2
   870b8:	fb84 5203 	smull	r5, r2, r4, r3
   870bc:	17dd      	asrs	r5, r3, #31
   870be:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   870c2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   870c6:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   870ca:	3230      	adds	r2, #48	; 0x30
   870cc:	2d09      	cmp	r5, #9
   870ce:	f801 2c01 	strb.w	r2, [r1, #-1]
   870d2:	462b      	mov	r3, r5
   870d4:	f101 32ff 	add.w	r2, r1, #4294967295
   870d8:	dced      	bgt.n	870b6 <_svfprintf_r+0x116e>
   870da:	3330      	adds	r3, #48	; 0x30
   870dc:	3902      	subs	r1, #2
   870de:	b2dc      	uxtb	r4, r3
   870e0:	4288      	cmp	r0, r1
   870e2:	f802 4c01 	strb.w	r4, [r2, #-1]
   870e6:	f240 8192 	bls.w	8740e <_svfprintf_r+0x14c6>
   870ea:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   870ee:	4613      	mov	r3, r2
   870f0:	e001      	b.n	870f6 <_svfprintf_r+0x11ae>
   870f2:	f813 4b01 	ldrb.w	r4, [r3], #1
   870f6:	4283      	cmp	r3, r0
   870f8:	f801 4b01 	strb.w	r4, [r1], #1
   870fc:	d1f9      	bne.n	870f2 <_svfprintf_r+0x11aa>
   870fe:	3301      	adds	r3, #1
   87100:	1a9b      	subs	r3, r3, r2
   87102:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   87106:	4413      	add	r3, r2
   87108:	aa21      	add	r2, sp, #132	; 0x84
   8710a:	1a9b      	subs	r3, r3, r2
   8710c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8710e:	931b      	str	r3, [sp, #108]	; 0x6c
   87110:	2a01      	cmp	r2, #1
   87112:	4413      	add	r3, r2
   87114:	930e      	str	r3, [sp, #56]	; 0x38
   87116:	f340 8148 	ble.w	873aa <_svfprintf_r+0x1462>
   8711a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8711c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8711e:	4413      	add	r3, r2
   87120:	930e      	str	r3, [sp, #56]	; 0x38
   87122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87126:	9308      	str	r3, [sp, #32]
   87128:	2300      	movs	r3, #0
   8712a:	9312      	str	r3, [sp, #72]	; 0x48
   8712c:	e714      	b.n	86f58 <_svfprintf_r+0x1010>
   8712e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87130:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87132:	f7ff b876 	b.w	86222 <_svfprintf_r+0x2da>
   87136:	aa25      	add	r2, sp, #148	; 0x94
   87138:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8713a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8713c:	f002 fade 	bl	896fc <__ssprint_r>
   87140:	2800      	cmp	r0, #0
   87142:	f47e afde 	bne.w	86102 <_svfprintf_r+0x1ba>
   87146:	46c8      	mov	r8, r9
   87148:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8714a:	e4fb      	b.n	86b44 <_svfprintf_r+0xbfc>
   8714c:	4623      	mov	r3, r4
   8714e:	e6e3      	b.n	86f18 <_svfprintf_r+0xfd0>
   87150:	aa25      	add	r2, sp, #148	; 0x94
   87152:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87154:	980c      	ldr	r0, [sp, #48]	; 0x30
   87156:	f002 fad1 	bl	896fc <__ssprint_r>
   8715a:	2800      	cmp	r0, #0
   8715c:	f47e afd1 	bne.w	86102 <_svfprintf_r+0x1ba>
   87160:	46c8      	mov	r8, r9
   87162:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   87164:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87166:	e5d3      	b.n	86d10 <_svfprintf_r+0xdc8>
   87168:	aa25      	add	r2, sp, #148	; 0x94
   8716a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8716c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8716e:	f002 fac5 	bl	896fc <__ssprint_r>
   87172:	2800      	cmp	r0, #0
   87174:	f47e afc5 	bne.w	86102 <_svfprintf_r+0x1ba>
   87178:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8717a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8717c:	46c8      	mov	r8, r9
   8717e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87180:	1a9a      	subs	r2, r3, r2
   87182:	e5dd      	b.n	86d40 <_svfprintf_r+0xdf8>
   87184:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87186:	f7ff b8fe 	b.w	86386 <_svfprintf_r+0x43e>
   8718a:	aa25      	add	r2, sp, #148	; 0x94
   8718c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8718e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87190:	f002 fab4 	bl	896fc <__ssprint_r>
   87194:	2800      	cmp	r0, #0
   87196:	f47e afb4 	bne.w	86102 <_svfprintf_r+0x1ba>
   8719a:	46c8      	mov	r8, r9
   8719c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8719e:	e5b0      	b.n	86d02 <_svfprintf_r+0xdba>
   871a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   871a2:	4637      	mov	r7, r6
   871a4:	2b06      	cmp	r3, #6
   871a6:	bf28      	it	cs
   871a8:	2306      	movcs	r3, #6
   871aa:	960a      	str	r6, [sp, #40]	; 0x28
   871ac:	9612      	str	r6, [sp, #72]	; 0x48
   871ae:	9308      	str	r3, [sp, #32]
   871b0:	940f      	str	r4, [sp, #60]	; 0x3c
   871b2:	f8cd b01c 	str.w	fp, [sp, #28]
   871b6:	930e      	str	r3, [sp, #56]	; 0x38
   871b8:	4e27      	ldr	r6, [pc, #156]	; (87258 <_svfprintf_r+0x1310>)
   871ba:	f7fe bfe9 	b.w	86190 <_svfprintf_r+0x248>
   871be:	2306      	movs	r3, #6
   871c0:	930a      	str	r3, [sp, #40]	; 0x28
   871c2:	e663      	b.n	86e8c <_svfprintf_r+0xf44>
   871c4:	232d      	movs	r3, #45	; 0x2d
   871c6:	461f      	mov	r7, r3
   871c8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   871cc:	f7ff ba28 	b.w	86620 <_svfprintf_r+0x6d8>
   871d0:	2003      	movs	r0, #3
   871d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   871d4:	a923      	add	r1, sp, #140	; 0x8c
   871d6:	e88d 0011 	stmia.w	sp, {r0, r4}
   871da:	9104      	str	r1, [sp, #16]
   871dc:	a820      	add	r0, sp, #128	; 0x80
   871de:	a91f      	add	r1, sp, #124	; 0x7c
   871e0:	9003      	str	r0, [sp, #12]
   871e2:	9a08      	ldr	r2, [sp, #32]
   871e4:	463b      	mov	r3, r7
   871e6:	9102      	str	r1, [sp, #8]
   871e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   871ea:	f000 f9d1 	bl	87590 <_dtoa_r>
   871ee:	4625      	mov	r5, r4
   871f0:	4606      	mov	r6, r0
   871f2:	1904      	adds	r4, r0, r4
   871f4:	e719      	b.n	8702a <_svfprintf_r+0x10e2>
   871f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   871f8:	4d15      	ldr	r5, [pc, #84]	; (87250 <_svfprintf_r+0x1308>)
   871fa:	f7ff bb7e 	b.w	868fa <_svfprintf_r+0x9b2>
   871fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87202:	4413      	add	r3, r2
   87204:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87206:	930e      	str	r3, [sp, #56]	; 0x38
   87208:	2a00      	cmp	r2, #0
   8720a:	f340 80c7 	ble.w	8739c <_svfprintf_r+0x1454>
   8720e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87212:	9308      	str	r3, [sp, #32]
   87214:	2367      	movs	r3, #103	; 0x67
   87216:	9311      	str	r3, [sp, #68]	; 0x44
   87218:	e69e      	b.n	86f58 <_svfprintf_r+0x1010>
   8721a:	2b00      	cmp	r3, #0
   8721c:	f340 80e1 	ble.w	873e2 <_svfprintf_r+0x149a>
   87220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87222:	2a00      	cmp	r2, #0
   87224:	f040 80b0 	bne.w	87388 <_svfprintf_r+0x1440>
   87228:	f01b 0f01 	tst.w	fp, #1
   8722c:	f040 80ac 	bne.w	87388 <_svfprintf_r+0x1440>
   87230:	9308      	str	r3, [sp, #32]
   87232:	930e      	str	r3, [sp, #56]	; 0x38
   87234:	e690      	b.n	86f58 <_svfprintf_r+0x1010>
   87236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87238:	940f      	str	r4, [sp, #60]	; 0x3c
   8723a:	9308      	str	r3, [sp, #32]
   8723c:	930e      	str	r3, [sp, #56]	; 0x38
   8723e:	900a      	str	r0, [sp, #40]	; 0x28
   87240:	f8cd b01c 	str.w	fp, [sp, #28]
   87244:	9012      	str	r0, [sp, #72]	; 0x48
   87246:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8724a:	f7fe bfa1 	b.w	86190 <_svfprintf_r+0x248>
   8724e:	bf00      	nop
   87250:	0008a9c0 	.word	0x0008a9c0
   87254:	66666667 	.word	0x66666667
   87258:	0008a9a4 	.word	0x0008a9a4
   8725c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8725e:	2b47      	cmp	r3, #71	; 0x47
   87260:	f47f ae46 	bne.w	86ef0 <_svfprintf_r+0xfa8>
   87264:	f01b 0f01 	tst.w	fp, #1
   87268:	f47f aeda 	bne.w	87020 <_svfprintf_r+0x10d8>
   8726c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8726e:	1b9b      	subs	r3, r3, r6
   87270:	9313      	str	r3, [sp, #76]	; 0x4c
   87272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87274:	2b47      	cmp	r3, #71	; 0x47
   87276:	f43f aef7 	beq.w	87068 <_svfprintf_r+0x1120>
   8727a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8727c:	9312      	str	r3, [sp, #72]	; 0x48
   8727e:	e700      	b.n	87082 <_svfprintf_r+0x113a>
   87280:	2000      	movs	r0, #0
   87282:	900a      	str	r0, [sp, #40]	; 0x28
   87284:	f7fe bebc 	b.w	86000 <_svfprintf_r+0xb8>
   87288:	424f      	negs	r7, r1
   8728a:	3110      	adds	r1, #16
   8728c:	da35      	bge.n	872fa <_svfprintf_r+0x13b2>
   8728e:	2410      	movs	r4, #16
   87290:	4d6a      	ldr	r5, [pc, #424]	; (8743c <_svfprintf_r+0x14f4>)
   87292:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87296:	e004      	b.n	872a2 <_svfprintf_r+0x135a>
   87298:	f108 0808 	add.w	r8, r8, #8
   8729c:	3f10      	subs	r7, #16
   8729e:	2f10      	cmp	r7, #16
   872a0:	dd2c      	ble.n	872fc <_svfprintf_r+0x13b4>
   872a2:	3301      	adds	r3, #1
   872a4:	3210      	adds	r2, #16
   872a6:	2b07      	cmp	r3, #7
   872a8:	9227      	str	r2, [sp, #156]	; 0x9c
   872aa:	9326      	str	r3, [sp, #152]	; 0x98
   872ac:	f8c8 5000 	str.w	r5, [r8]
   872b0:	f8c8 4004 	str.w	r4, [r8, #4]
   872b4:	ddf0      	ble.n	87298 <_svfprintf_r+0x1350>
   872b6:	aa25      	add	r2, sp, #148	; 0x94
   872b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   872ba:	4658      	mov	r0, fp
   872bc:	f002 fa1e 	bl	896fc <__ssprint_r>
   872c0:	2800      	cmp	r0, #0
   872c2:	f47e af1e 	bne.w	86102 <_svfprintf_r+0x1ba>
   872c6:	46c8      	mov	r8, r9
   872c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   872ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   872cc:	e7e6      	b.n	8729c <_svfprintf_r+0x1354>
   872ce:	aa25      	add	r2, sp, #148	; 0x94
   872d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   872d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   872d4:	f002 fa12 	bl	896fc <__ssprint_r>
   872d8:	2800      	cmp	r0, #0
   872da:	f47e af12 	bne.w	86102 <_svfprintf_r+0x1ba>
   872de:	46c8      	mov	r8, r9
   872e0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   872e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   872e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   872e6:	f7ff bbc3 	b.w	86a70 <_svfprintf_r+0xb28>
   872ea:	2230      	movs	r2, #48	; 0x30
   872ec:	4413      	add	r3, r2
   872ee:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   872f2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   872f6:	ab22      	add	r3, sp, #136	; 0x88
   872f8:	e706      	b.n	87108 <_svfprintf_r+0x11c0>
   872fa:	4d50      	ldr	r5, [pc, #320]	; (8743c <_svfprintf_r+0x14f4>)
   872fc:	3301      	adds	r3, #1
   872fe:	443a      	add	r2, r7
   87300:	2b07      	cmp	r3, #7
   87302:	e888 00a0 	stmia.w	r8, {r5, r7}
   87306:	9227      	str	r2, [sp, #156]	; 0x9c
   87308:	9326      	str	r3, [sp, #152]	; 0x98
   8730a:	f108 0808 	add.w	r8, r8, #8
   8730e:	f77f abb2 	ble.w	86a76 <_svfprintf_r+0xb2e>
   87312:	aa25      	add	r2, sp, #148	; 0x94
   87314:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87316:	980c      	ldr	r0, [sp, #48]	; 0x30
   87318:	f002 f9f0 	bl	896fc <__ssprint_r>
   8731c:	2800      	cmp	r0, #0
   8731e:	f47e aef0 	bne.w	86102 <_svfprintf_r+0x1ba>
   87322:	46c8      	mov	r8, r9
   87324:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87326:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87328:	f7ff bba5 	b.w	86a76 <_svfprintf_r+0xb2e>
   8732c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8732e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87330:	4413      	add	r3, r2
   87332:	930e      	str	r3, [sp, #56]	; 0x38
   87334:	e76b      	b.n	8720e <_svfprintf_r+0x12c6>
   87336:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87338:	e5ee      	b.n	86f18 <_svfprintf_r+0xfd0>
   8733a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8733c:	4d3f      	ldr	r5, [pc, #252]	; (8743c <_svfprintf_r+0x14f4>)
   8733e:	e4bb      	b.n	86cb8 <_svfprintf_r+0xd70>
   87340:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87342:	9808      	ldr	r0, [sp, #32]
   87344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87346:	4639      	mov	r1, r7
   87348:	f002 ff14 	bl	8a174 <__aeabi_dcmpeq>
   8734c:	2800      	cmp	r0, #0
   8734e:	f47f ae70 	bne.w	87032 <_svfprintf_r+0x10ea>
   87352:	f1c5 0501 	rsb	r5, r5, #1
   87356:	951f      	str	r5, [sp, #124]	; 0x7c
   87358:	442c      	add	r4, r5
   8735a:	e5ca      	b.n	86ef2 <_svfprintf_r+0xfaa>
   8735c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8735e:	4e38      	ldr	r6, [pc, #224]	; (87440 <_svfprintf_r+0x14f8>)
   87360:	2b00      	cmp	r3, #0
   87362:	bfbe      	ittt	lt
   87364:	232d      	movlt	r3, #45	; 0x2d
   87366:	461f      	movlt	r7, r3
   87368:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   8736c:	f04f 0303 	mov.w	r3, #3
   87370:	461a      	mov	r2, r3
   87372:	9308      	str	r3, [sp, #32]
   87374:	f04f 0300 	mov.w	r3, #0
   87378:	bfa8      	it	ge
   8737a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8737e:	4619      	mov	r1, r3
   87380:	930a      	str	r3, [sp, #40]	; 0x28
   87382:	4b30      	ldr	r3, [pc, #192]	; (87444 <_svfprintf_r+0x14fc>)
   87384:	f7ff b954 	b.w	86630 <_svfprintf_r+0x6e8>
   87388:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8738a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8738c:	4413      	add	r3, r2
   8738e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87390:	441a      	add	r2, r3
   87392:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87396:	920e      	str	r2, [sp, #56]	; 0x38
   87398:	9308      	str	r3, [sp, #32]
   8739a:	e5dd      	b.n	86f58 <_svfprintf_r+0x1010>
   8739c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8739e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   873a0:	f1c3 0301 	rsb	r3, r3, #1
   873a4:	441a      	add	r2, r3
   873a6:	4613      	mov	r3, r2
   873a8:	e7c3      	b.n	87332 <_svfprintf_r+0x13ea>
   873aa:	f01b 0301 	ands.w	r3, fp, #1
   873ae:	9312      	str	r3, [sp, #72]	; 0x48
   873b0:	f47f aeb3 	bne.w	8711a <_svfprintf_r+0x11d2>
   873b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   873ba:	9308      	str	r3, [sp, #32]
   873bc:	e5cc      	b.n	86f58 <_svfprintf_r+0x1010>
   873be:	4d1f      	ldr	r5, [pc, #124]	; (8743c <_svfprintf_r+0x14f4>)
   873c0:	e43c      	b.n	86c3c <_svfprintf_r+0xcf4>
   873c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   873c4:	4d1d      	ldr	r5, [pc, #116]	; (8743c <_svfprintf_r+0x14f4>)
   873c6:	e491      	b.n	86cec <_svfprintf_r+0xda4>
   873c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   873ca:	f89a 3001 	ldrb.w	r3, [sl, #1]
   873ce:	6828      	ldr	r0, [r5, #0]
   873d0:	46a2      	mov	sl, r4
   873d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   873d6:	900a      	str	r0, [sp, #40]	; 0x28
   873d8:	4628      	mov	r0, r5
   873da:	3004      	adds	r0, #4
   873dc:	900f      	str	r0, [sp, #60]	; 0x3c
   873de:	f7fe be0d 	b.w	85ffc <_svfprintf_r+0xb4>
   873e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   873e4:	b913      	cbnz	r3, 873ec <_svfprintf_r+0x14a4>
   873e6:	f01b 0f01 	tst.w	fp, #1
   873ea:	d002      	beq.n	873f2 <_svfprintf_r+0x14aa>
   873ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   873ee:	3301      	adds	r3, #1
   873f0:	e7cd      	b.n	8738e <_svfprintf_r+0x1446>
   873f2:	2301      	movs	r3, #1
   873f4:	e71c      	b.n	87230 <_svfprintf_r+0x12e8>
   873f6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   873fa:	f7ff b980 	b.w	866fe <_svfprintf_r+0x7b6>
   873fe:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87402:	f7ff b93a 	b.w	8667a <_svfprintf_r+0x732>
   87406:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8740a:	f7ff b84f 	b.w	864ac <_svfprintf_r+0x564>
   8740e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   87412:	e679      	b.n	87108 <_svfprintf_r+0x11c0>
   87414:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87418:	f7ff b9b2 	b.w	86780 <_svfprintf_r+0x838>
   8741c:	f04f 32ff 	mov.w	r2, #4294967295
   87420:	230c      	movs	r3, #12
   87422:	9209      	str	r2, [sp, #36]	; 0x24
   87424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87426:	6013      	str	r3, [r2, #0]
   87428:	f7fe be74 	b.w	86114 <_svfprintf_r+0x1cc>
   8742c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87430:	f7ff b8c4 	b.w	865bc <_svfprintf_r+0x674>
   87434:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87438:	f7ff b878 	b.w	8652c <_svfprintf_r+0x5e4>
   8743c:	0008a9c0 	.word	0x0008a9c0
   87440:	0008a978 	.word	0x0008a978
   87444:	0008a974 	.word	0x0008a974

00087448 <register_fini>:
   87448:	4b02      	ldr	r3, [pc, #8]	; (87454 <register_fini+0xc>)
   8744a:	b113      	cbz	r3, 87452 <register_fini+0xa>
   8744c:	4802      	ldr	r0, [pc, #8]	; (87458 <register_fini+0x10>)
   8744e:	f000 b805 	b.w	8745c <atexit>
   87452:	4770      	bx	lr
   87454:	00000000 	.word	0x00000000
   87458:	000883d5 	.word	0x000883d5

0008745c <atexit>:
   8745c:	2300      	movs	r3, #0
   8745e:	4601      	mov	r1, r0
   87460:	461a      	mov	r2, r3
   87462:	4618      	mov	r0, r3
   87464:	f002 b9d4 	b.w	89810 <__register_exitproc>

00087468 <quorem>:
   87468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8746c:	6903      	ldr	r3, [r0, #16]
   8746e:	690f      	ldr	r7, [r1, #16]
   87470:	b083      	sub	sp, #12
   87472:	429f      	cmp	r7, r3
   87474:	f300 8088 	bgt.w	87588 <quorem+0x120>
   87478:	3f01      	subs	r7, #1
   8747a:	f101 0614 	add.w	r6, r1, #20
   8747e:	f100 0a14 	add.w	sl, r0, #20
   87482:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   87486:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8748a:	3301      	adds	r3, #1
   8748c:	fbb2 f8f3 	udiv	r8, r2, r3
   87490:	00bb      	lsls	r3, r7, #2
   87492:	9300      	str	r3, [sp, #0]
   87494:	eb06 0903 	add.w	r9, r6, r3
   87498:	4453      	add	r3, sl
   8749a:	9301      	str	r3, [sp, #4]
   8749c:	f1b8 0f00 	cmp.w	r8, #0
   874a0:	d03b      	beq.n	8751a <quorem+0xb2>
   874a2:	2300      	movs	r3, #0
   874a4:	46b4      	mov	ip, r6
   874a6:	461c      	mov	r4, r3
   874a8:	46d6      	mov	lr, sl
   874aa:	f85c 2b04 	ldr.w	r2, [ip], #4
   874ae:	f8de 5000 	ldr.w	r5, [lr]
   874b2:	fa1f fb82 	uxth.w	fp, r2
   874b6:	fb08 330b 	mla	r3, r8, fp, r3
   874ba:	0c12      	lsrs	r2, r2, #16
   874bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   874c0:	fb08 bb02 	mla	fp, r8, r2, fp
   874c4:	b29a      	uxth	r2, r3
   874c6:	1aa2      	subs	r2, r4, r2
   874c8:	b2ab      	uxth	r3, r5
   874ca:	fa1f f48b 	uxth.w	r4, fp
   874ce:	441a      	add	r2, r3
   874d0:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   874d4:	eb04 4422 	add.w	r4, r4, r2, asr #16
   874d8:	b292      	uxth	r2, r2
   874da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   874de:	45e1      	cmp	r9, ip
   874e0:	f84e 2b04 	str.w	r2, [lr], #4
   874e4:	ea4f 4424 	mov.w	r4, r4, asr #16
   874e8:	ea4f 431b 	mov.w	r3, fp, lsr #16
   874ec:	d2dd      	bcs.n	874aa <quorem+0x42>
   874ee:	9b00      	ldr	r3, [sp, #0]
   874f0:	f85a 3003 	ldr.w	r3, [sl, r3]
   874f4:	b98b      	cbnz	r3, 8751a <quorem+0xb2>
   874f6:	9c01      	ldr	r4, [sp, #4]
   874f8:	1f23      	subs	r3, r4, #4
   874fa:	459a      	cmp	sl, r3
   874fc:	d20c      	bcs.n	87518 <quorem+0xb0>
   874fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87502:	b94b      	cbnz	r3, 87518 <quorem+0xb0>
   87504:	f1a4 0308 	sub.w	r3, r4, #8
   87508:	e002      	b.n	87510 <quorem+0xa8>
   8750a:	681a      	ldr	r2, [r3, #0]
   8750c:	3b04      	subs	r3, #4
   8750e:	b91a      	cbnz	r2, 87518 <quorem+0xb0>
   87510:	459a      	cmp	sl, r3
   87512:	f107 37ff 	add.w	r7, r7, #4294967295
   87516:	d3f8      	bcc.n	8750a <quorem+0xa2>
   87518:	6107      	str	r7, [r0, #16]
   8751a:	4604      	mov	r4, r0
   8751c:	f001 fe28 	bl	89170 <__mcmp>
   87520:	2800      	cmp	r0, #0
   87522:	db2d      	blt.n	87580 <quorem+0x118>
   87524:	4655      	mov	r5, sl
   87526:	2300      	movs	r3, #0
   87528:	f108 0801 	add.w	r8, r8, #1
   8752c:	f856 1b04 	ldr.w	r1, [r6], #4
   87530:	6828      	ldr	r0, [r5, #0]
   87532:	b28a      	uxth	r2, r1
   87534:	1a9a      	subs	r2, r3, r2
   87536:	0c0b      	lsrs	r3, r1, #16
   87538:	b281      	uxth	r1, r0
   8753a:	440a      	add	r2, r1
   8753c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   87540:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87544:	b292      	uxth	r2, r2
   87546:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8754a:	45b1      	cmp	r9, r6
   8754c:	f845 2b04 	str.w	r2, [r5], #4
   87550:	ea4f 4323 	mov.w	r3, r3, asr #16
   87554:	d2ea      	bcs.n	8752c <quorem+0xc4>
   87556:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8755a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   8755e:	b97a      	cbnz	r2, 87580 <quorem+0x118>
   87560:	1f1a      	subs	r2, r3, #4
   87562:	4592      	cmp	sl, r2
   87564:	d20b      	bcs.n	8757e <quorem+0x116>
   87566:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8756a:	b942      	cbnz	r2, 8757e <quorem+0x116>
   8756c:	3b08      	subs	r3, #8
   8756e:	e002      	b.n	87576 <quorem+0x10e>
   87570:	681a      	ldr	r2, [r3, #0]
   87572:	3b04      	subs	r3, #4
   87574:	b91a      	cbnz	r2, 8757e <quorem+0x116>
   87576:	459a      	cmp	sl, r3
   87578:	f107 37ff 	add.w	r7, r7, #4294967295
   8757c:	d3f8      	bcc.n	87570 <quorem+0x108>
   8757e:	6127      	str	r7, [r4, #16]
   87580:	4640      	mov	r0, r8
   87582:	b003      	add	sp, #12
   87584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87588:	2000      	movs	r0, #0
   8758a:	b003      	add	sp, #12
   8758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087590 <_dtoa_r>:
   87590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87594:	6c05      	ldr	r5, [r0, #64]	; 0x40
   87596:	b09b      	sub	sp, #108	; 0x6c
   87598:	4604      	mov	r4, r0
   8759a:	4692      	mov	sl, r2
   8759c:	469b      	mov	fp, r3
   8759e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   875a0:	b14d      	cbz	r5, 875b6 <_dtoa_r+0x26>
   875a2:	2301      	movs	r3, #1
   875a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   875a6:	4629      	mov	r1, r5
   875a8:	4093      	lsls	r3, r2
   875aa:	60ab      	str	r3, [r5, #8]
   875ac:	606a      	str	r2, [r5, #4]
   875ae:	f001 fc07 	bl	88dc0 <_Bfree>
   875b2:	2300      	movs	r3, #0
   875b4:	6423      	str	r3, [r4, #64]	; 0x40
   875b6:	f1bb 0f00 	cmp.w	fp, #0
   875ba:	465d      	mov	r5, fp
   875bc:	db35      	blt.n	8762a <_dtoa_r+0x9a>
   875be:	2300      	movs	r3, #0
   875c0:	6033      	str	r3, [r6, #0]
   875c2:	4b9d      	ldr	r3, [pc, #628]	; (87838 <_dtoa_r+0x2a8>)
   875c4:	43ab      	bics	r3, r5
   875c6:	d015      	beq.n	875f4 <_dtoa_r+0x64>
   875c8:	2200      	movs	r2, #0
   875ca:	2300      	movs	r3, #0
   875cc:	4650      	mov	r0, sl
   875ce:	4659      	mov	r1, fp
   875d0:	f002 fdd0 	bl	8a174 <__aeabi_dcmpeq>
   875d4:	4680      	mov	r8, r0
   875d6:	2800      	cmp	r0, #0
   875d8:	d02d      	beq.n	87636 <_dtoa_r+0xa6>
   875da:	2301      	movs	r3, #1
   875dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   875de:	6013      	str	r3, [r2, #0]
   875e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   875e2:	2b00      	cmp	r3, #0
   875e4:	f000 80bd 	beq.w	87762 <_dtoa_r+0x1d2>
   875e8:	4894      	ldr	r0, [pc, #592]	; (8783c <_dtoa_r+0x2ac>)
   875ea:	6018      	str	r0, [r3, #0]
   875ec:	3801      	subs	r0, #1
   875ee:	b01b      	add	sp, #108	; 0x6c
   875f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   875f4:	f242 730f 	movw	r3, #9999	; 0x270f
   875f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   875fa:	6013      	str	r3, [r2, #0]
   875fc:	f1ba 0f00 	cmp.w	sl, #0
   87600:	d10d      	bne.n	8761e <_dtoa_r+0x8e>
   87602:	f3c5 0513 	ubfx	r5, r5, #0, #20
   87606:	b955      	cbnz	r5, 8761e <_dtoa_r+0x8e>
   87608:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8760a:	488d      	ldr	r0, [pc, #564]	; (87840 <_dtoa_r+0x2b0>)
   8760c:	2b00      	cmp	r3, #0
   8760e:	d0ee      	beq.n	875ee <_dtoa_r+0x5e>
   87610:	f100 0308 	add.w	r3, r0, #8
   87614:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   87616:	6013      	str	r3, [r2, #0]
   87618:	b01b      	add	sp, #108	; 0x6c
   8761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8761e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87620:	4888      	ldr	r0, [pc, #544]	; (87844 <_dtoa_r+0x2b4>)
   87622:	2b00      	cmp	r3, #0
   87624:	d0e3      	beq.n	875ee <_dtoa_r+0x5e>
   87626:	1cc3      	adds	r3, r0, #3
   87628:	e7f4      	b.n	87614 <_dtoa_r+0x84>
   8762a:	2301      	movs	r3, #1
   8762c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   87630:	6033      	str	r3, [r6, #0]
   87632:	46ab      	mov	fp, r5
   87634:	e7c5      	b.n	875c2 <_dtoa_r+0x32>
   87636:	aa18      	add	r2, sp, #96	; 0x60
   87638:	ab19      	add	r3, sp, #100	; 0x64
   8763a:	9201      	str	r2, [sp, #4]
   8763c:	9300      	str	r3, [sp, #0]
   8763e:	4652      	mov	r2, sl
   87640:	465b      	mov	r3, fp
   87642:	4620      	mov	r0, r4
   87644:	f001 fe3e 	bl	892c4 <__d2b>
   87648:	0d2b      	lsrs	r3, r5, #20
   8764a:	4681      	mov	r9, r0
   8764c:	d071      	beq.n	87732 <_dtoa_r+0x1a2>
   8764e:	4650      	mov	r0, sl
   87650:	f3cb 0213 	ubfx	r2, fp, #0, #20
   87654:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   87658:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8765a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8765e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   87662:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87666:	2200      	movs	r2, #0
   87668:	4b77      	ldr	r3, [pc, #476]	; (87848 <_dtoa_r+0x2b8>)
   8766a:	f002 f967 	bl	8993c <__aeabi_dsub>
   8766e:	a36c      	add	r3, pc, #432	; (adr r3, 87820 <_dtoa_r+0x290>)
   87670:	e9d3 2300 	ldrd	r2, r3, [r3]
   87674:	f002 fb16 	bl	89ca4 <__aeabi_dmul>
   87678:	a36b      	add	r3, pc, #428	; (adr r3, 87828 <_dtoa_r+0x298>)
   8767a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8767e:	f002 f95f 	bl	89940 <__adddf3>
   87682:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87686:	4630      	mov	r0, r6
   87688:	f002 faa6 	bl	89bd8 <__aeabi_i2d>
   8768c:	a368      	add	r3, pc, #416	; (adr r3, 87830 <_dtoa_r+0x2a0>)
   8768e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87692:	f002 fb07 	bl	89ca4 <__aeabi_dmul>
   87696:	4602      	mov	r2, r0
   87698:	460b      	mov	r3, r1
   8769a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8769e:	f002 f94f 	bl	89940 <__adddf3>
   876a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   876a6:	f002 fdad 	bl	8a204 <__aeabi_d2iz>
   876aa:	2200      	movs	r2, #0
   876ac:	9002      	str	r0, [sp, #8]
   876ae:	2300      	movs	r3, #0
   876b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   876b4:	f002 fd68 	bl	8a188 <__aeabi_dcmplt>
   876b8:	2800      	cmp	r0, #0
   876ba:	f040 816d 	bne.w	87998 <_dtoa_r+0x408>
   876be:	9d02      	ldr	r5, [sp, #8]
   876c0:	2d16      	cmp	r5, #22
   876c2:	f200 8157 	bhi.w	87974 <_dtoa_r+0x3e4>
   876c6:	4961      	ldr	r1, [pc, #388]	; (8784c <_dtoa_r+0x2bc>)
   876c8:	4652      	mov	r2, sl
   876ca:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   876ce:	465b      	mov	r3, fp
   876d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   876d4:	f002 fd76 	bl	8a1c4 <__aeabi_dcmpgt>
   876d8:	2800      	cmp	r0, #0
   876da:	f000 81be 	beq.w	87a5a <_dtoa_r+0x4ca>
   876de:	1e6b      	subs	r3, r5, #1
   876e0:	9302      	str	r3, [sp, #8]
   876e2:	2300      	movs	r3, #0
   876e4:	930e      	str	r3, [sp, #56]	; 0x38
   876e6:	1bbf      	subs	r7, r7, r6
   876e8:	1e7b      	subs	r3, r7, #1
   876ea:	9308      	str	r3, [sp, #32]
   876ec:	f100 814e 	bmi.w	8798c <_dtoa_r+0x3fc>
   876f0:	2300      	movs	r3, #0
   876f2:	930a      	str	r3, [sp, #40]	; 0x28
   876f4:	9b02      	ldr	r3, [sp, #8]
   876f6:	2b00      	cmp	r3, #0
   876f8:	f2c0 813f 	blt.w	8797a <_dtoa_r+0x3ea>
   876fc:	9a08      	ldr	r2, [sp, #32]
   876fe:	930d      	str	r3, [sp, #52]	; 0x34
   87700:	4611      	mov	r1, r2
   87702:	4419      	add	r1, r3
   87704:	2300      	movs	r3, #0
   87706:	9108      	str	r1, [sp, #32]
   87708:	930c      	str	r3, [sp, #48]	; 0x30
   8770a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8770c:	2b09      	cmp	r3, #9
   8770e:	d82a      	bhi.n	87766 <_dtoa_r+0x1d6>
   87710:	2b05      	cmp	r3, #5
   87712:	f340 8658 	ble.w	883c6 <_dtoa_r+0xe36>
   87716:	2500      	movs	r5, #0
   87718:	3b04      	subs	r3, #4
   8771a:	9324      	str	r3, [sp, #144]	; 0x90
   8771c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8771e:	3b02      	subs	r3, #2
   87720:	2b03      	cmp	r3, #3
   87722:	f200 863f 	bhi.w	883a4 <_dtoa_r+0xe14>
   87726:	e8df f013 	tbh	[pc, r3, lsl #1]
   8772a:	03ce      	.short	0x03ce
   8772c:	03d902c3 	.word	0x03d902c3
   87730:	045b      	.short	0x045b
   87732:	9f18      	ldr	r7, [sp, #96]	; 0x60
   87734:	9e19      	ldr	r6, [sp, #100]	; 0x64
   87736:	443e      	add	r6, r7
   87738:	f206 4332 	addw	r3, r6, #1074	; 0x432
   8773c:	2b20      	cmp	r3, #32
   8773e:	f340 8187 	ble.w	87a50 <_dtoa_r+0x4c0>
   87742:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   87746:	f206 4012 	addw	r0, r6, #1042	; 0x412
   8774a:	409d      	lsls	r5, r3
   8774c:	fa2a f000 	lsr.w	r0, sl, r0
   87750:	4328      	orrs	r0, r5
   87752:	f002 fa31 	bl	89bb8 <__aeabi_ui2d>
   87756:	2301      	movs	r3, #1
   87758:	3e01      	subs	r6, #1
   8775a:	9314      	str	r3, [sp, #80]	; 0x50
   8775c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87760:	e781      	b.n	87666 <_dtoa_r+0xd6>
   87762:	483b      	ldr	r0, [pc, #236]	; (87850 <_dtoa_r+0x2c0>)
   87764:	e743      	b.n	875ee <_dtoa_r+0x5e>
   87766:	2100      	movs	r1, #0
   87768:	4620      	mov	r0, r4
   8776a:	6461      	str	r1, [r4, #68]	; 0x44
   8776c:	9125      	str	r1, [sp, #148]	; 0x94
   8776e:	f001 fb01 	bl	88d74 <_Balloc>
   87772:	f04f 33ff 	mov.w	r3, #4294967295
   87776:	9307      	str	r3, [sp, #28]
   87778:	930f      	str	r3, [sp, #60]	; 0x3c
   8777a:	2301      	movs	r3, #1
   8777c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8777e:	9004      	str	r0, [sp, #16]
   87780:	6420      	str	r0, [r4, #64]	; 0x40
   87782:	9224      	str	r2, [sp, #144]	; 0x90
   87784:	930b      	str	r3, [sp, #44]	; 0x2c
   87786:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87788:	2b00      	cmp	r3, #0
   8778a:	f2c0 80d3 	blt.w	87934 <_dtoa_r+0x3a4>
   8778e:	9a02      	ldr	r2, [sp, #8]
   87790:	2a0e      	cmp	r2, #14
   87792:	f300 80cf 	bgt.w	87934 <_dtoa_r+0x3a4>
   87796:	4b2d      	ldr	r3, [pc, #180]	; (8784c <_dtoa_r+0x2bc>)
   87798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8779c:	e9d3 2300 	ldrd	r2, r3, [r3]
   877a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   877a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   877a6:	2b00      	cmp	r3, #0
   877a8:	f2c0 83b4 	blt.w	87f14 <_dtoa_r+0x984>
   877ac:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   877b0:	4650      	mov	r0, sl
   877b2:	462a      	mov	r2, r5
   877b4:	4633      	mov	r3, r6
   877b6:	4659      	mov	r1, fp
   877b8:	f002 fb9e 	bl	89ef8 <__aeabi_ddiv>
   877bc:	f002 fd22 	bl	8a204 <__aeabi_d2iz>
   877c0:	4680      	mov	r8, r0
   877c2:	f002 fa09 	bl	89bd8 <__aeabi_i2d>
   877c6:	462a      	mov	r2, r5
   877c8:	4633      	mov	r3, r6
   877ca:	f002 fa6b 	bl	89ca4 <__aeabi_dmul>
   877ce:	4602      	mov	r2, r0
   877d0:	460b      	mov	r3, r1
   877d2:	4650      	mov	r0, sl
   877d4:	4659      	mov	r1, fp
   877d6:	f002 f8b1 	bl	8993c <__aeabi_dsub>
   877da:	9e07      	ldr	r6, [sp, #28]
   877dc:	9f04      	ldr	r7, [sp, #16]
   877de:	f108 0530 	add.w	r5, r8, #48	; 0x30
   877e2:	2e01      	cmp	r6, #1
   877e4:	703d      	strb	r5, [r7, #0]
   877e6:	4602      	mov	r2, r0
   877e8:	460b      	mov	r3, r1
   877ea:	f107 0501 	add.w	r5, r7, #1
   877ee:	d064      	beq.n	878ba <_dtoa_r+0x32a>
   877f0:	2200      	movs	r2, #0
   877f2:	4b18      	ldr	r3, [pc, #96]	; (87854 <_dtoa_r+0x2c4>)
   877f4:	f002 fa56 	bl	89ca4 <__aeabi_dmul>
   877f8:	2200      	movs	r2, #0
   877fa:	2300      	movs	r3, #0
   877fc:	4606      	mov	r6, r0
   877fe:	460f      	mov	r7, r1
   87800:	f002 fcb8 	bl	8a174 <__aeabi_dcmpeq>
   87804:	2800      	cmp	r0, #0
   87806:	f040 8082 	bne.w	8790e <_dtoa_r+0x37e>
   8780a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8780e:	f04f 0a00 	mov.w	sl, #0
   87812:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   87816:	f04f 0b00 	mov.w	fp, #0
   8781a:	940b      	str	r4, [sp, #44]	; 0x2c
   8781c:	e029      	b.n	87872 <_dtoa_r+0x2e2>
   8781e:	bf00      	nop
   87820:	636f4361 	.word	0x636f4361
   87824:	3fd287a7 	.word	0x3fd287a7
   87828:	8b60c8b3 	.word	0x8b60c8b3
   8782c:	3fc68a28 	.word	0x3fc68a28
   87830:	509f79fb 	.word	0x509f79fb
   87834:	3fd34413 	.word	0x3fd34413
   87838:	7ff00000 	.word	0x7ff00000
   8783c:	0008a9ad 	.word	0x0008a9ad
   87840:	0008a9d0 	.word	0x0008a9d0
   87844:	0008a9dc 	.word	0x0008a9dc
   87848:	3ff80000 	.word	0x3ff80000
   8784c:	0008aa18 	.word	0x0008aa18
   87850:	0008a9ac 	.word	0x0008a9ac
   87854:	40240000 	.word	0x40240000
   87858:	2200      	movs	r2, #0
   8785a:	4b81      	ldr	r3, [pc, #516]	; (87a60 <_dtoa_r+0x4d0>)
   8785c:	f002 fa22 	bl	89ca4 <__aeabi_dmul>
   87860:	4652      	mov	r2, sl
   87862:	465b      	mov	r3, fp
   87864:	4606      	mov	r6, r0
   87866:	460f      	mov	r7, r1
   87868:	f002 fc84 	bl	8a174 <__aeabi_dcmpeq>
   8786c:	2800      	cmp	r0, #0
   8786e:	f040 83ba 	bne.w	87fe6 <_dtoa_r+0xa56>
   87872:	4642      	mov	r2, r8
   87874:	464b      	mov	r3, r9
   87876:	4630      	mov	r0, r6
   87878:	4639      	mov	r1, r7
   8787a:	f002 fb3d 	bl	89ef8 <__aeabi_ddiv>
   8787e:	f002 fcc1 	bl	8a204 <__aeabi_d2iz>
   87882:	4604      	mov	r4, r0
   87884:	f002 f9a8 	bl	89bd8 <__aeabi_i2d>
   87888:	4642      	mov	r2, r8
   8788a:	464b      	mov	r3, r9
   8788c:	f002 fa0a 	bl	89ca4 <__aeabi_dmul>
   87890:	4602      	mov	r2, r0
   87892:	460b      	mov	r3, r1
   87894:	4630      	mov	r0, r6
   87896:	4639      	mov	r1, r7
   87898:	f002 f850 	bl	8993c <__aeabi_dsub>
   8789c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   878a0:	f805 6b01 	strb.w	r6, [r5], #1
   878a4:	9e04      	ldr	r6, [sp, #16]
   878a6:	9f07      	ldr	r7, [sp, #28]
   878a8:	1bae      	subs	r6, r5, r6
   878aa:	42be      	cmp	r6, r7
   878ac:	4602      	mov	r2, r0
   878ae:	460b      	mov	r3, r1
   878b0:	d1d2      	bne.n	87858 <_dtoa_r+0x2c8>
   878b2:	46a0      	mov	r8, r4
   878b4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   878b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   878ba:	4610      	mov	r0, r2
   878bc:	4619      	mov	r1, r3
   878be:	f002 f83f 	bl	89940 <__adddf3>
   878c2:	4606      	mov	r6, r0
   878c4:	460f      	mov	r7, r1
   878c6:	4602      	mov	r2, r0
   878c8:	460b      	mov	r3, r1
   878ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   878ce:	f002 fc5b 	bl	8a188 <__aeabi_dcmplt>
   878d2:	b948      	cbnz	r0, 878e8 <_dtoa_r+0x358>
   878d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   878d8:	4632      	mov	r2, r6
   878da:	463b      	mov	r3, r7
   878dc:	f002 fc4a 	bl	8a174 <__aeabi_dcmpeq>
   878e0:	b1a8      	cbz	r0, 8790e <_dtoa_r+0x37e>
   878e2:	f018 0f01 	tst.w	r8, #1
   878e6:	d012      	beq.n	8790e <_dtoa_r+0x37e>
   878e8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   878ec:	1e6b      	subs	r3, r5, #1
   878ee:	9a04      	ldr	r2, [sp, #16]
   878f0:	e004      	b.n	878fc <_dtoa_r+0x36c>
   878f2:	429a      	cmp	r2, r3
   878f4:	f000 8402 	beq.w	880fc <_dtoa_r+0xb6c>
   878f8:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   878fc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   87900:	f103 0501 	add.w	r5, r3, #1
   87904:	d0f5      	beq.n	878f2 <_dtoa_r+0x362>
   87906:	f108 0801 	add.w	r8, r8, #1
   8790a:	f883 8000 	strb.w	r8, [r3]
   8790e:	4649      	mov	r1, r9
   87910:	4620      	mov	r0, r4
   87912:	f001 fa55 	bl	88dc0 <_Bfree>
   87916:	2200      	movs	r2, #0
   87918:	9b02      	ldr	r3, [sp, #8]
   8791a:	702a      	strb	r2, [r5, #0]
   8791c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8791e:	3301      	adds	r3, #1
   87920:	6013      	str	r3, [r2, #0]
   87922:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87924:	2b00      	cmp	r3, #0
   87926:	f000 839f 	beq.w	88068 <_dtoa_r+0xad8>
   8792a:	9804      	ldr	r0, [sp, #16]
   8792c:	601d      	str	r5, [r3, #0]
   8792e:	b01b      	add	sp, #108	; 0x6c
   87930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87936:	2a00      	cmp	r2, #0
   87938:	d03e      	beq.n	879b8 <_dtoa_r+0x428>
   8793a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8793c:	2a01      	cmp	r2, #1
   8793e:	f340 8311 	ble.w	87f64 <_dtoa_r+0x9d4>
   87942:	9b07      	ldr	r3, [sp, #28]
   87944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87946:	1e5f      	subs	r7, r3, #1
   87948:	42ba      	cmp	r2, r7
   8794a:	f2c0 8390 	blt.w	8806e <_dtoa_r+0xade>
   8794e:	1bd7      	subs	r7, r2, r7
   87950:	9b07      	ldr	r3, [sp, #28]
   87952:	2b00      	cmp	r3, #0
   87954:	f2c0 848c 	blt.w	88270 <_dtoa_r+0xce0>
   87958:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8795a:	9b07      	ldr	r3, [sp, #28]
   8795c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8795e:	2101      	movs	r1, #1
   87960:	441a      	add	r2, r3
   87962:	920a      	str	r2, [sp, #40]	; 0x28
   87964:	9a08      	ldr	r2, [sp, #32]
   87966:	4620      	mov	r0, r4
   87968:	441a      	add	r2, r3
   8796a:	9208      	str	r2, [sp, #32]
   8796c:	f001 fac4 	bl	88ef8 <__i2b>
   87970:	4606      	mov	r6, r0
   87972:	e023      	b.n	879bc <_dtoa_r+0x42c>
   87974:	2301      	movs	r3, #1
   87976:	930e      	str	r3, [sp, #56]	; 0x38
   87978:	e6b5      	b.n	876e6 <_dtoa_r+0x156>
   8797a:	2300      	movs	r3, #0
   8797c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8797e:	930d      	str	r3, [sp, #52]	; 0x34
   87980:	9b02      	ldr	r3, [sp, #8]
   87982:	1ad2      	subs	r2, r2, r3
   87984:	425b      	negs	r3, r3
   87986:	920a      	str	r2, [sp, #40]	; 0x28
   87988:	930c      	str	r3, [sp, #48]	; 0x30
   8798a:	e6be      	b.n	8770a <_dtoa_r+0x17a>
   8798c:	f1c7 0301 	rsb	r3, r7, #1
   87990:	930a      	str	r3, [sp, #40]	; 0x28
   87992:	2300      	movs	r3, #0
   87994:	9308      	str	r3, [sp, #32]
   87996:	e6ad      	b.n	876f4 <_dtoa_r+0x164>
   87998:	9d02      	ldr	r5, [sp, #8]
   8799a:	4628      	mov	r0, r5
   8799c:	f002 f91c 	bl	89bd8 <__aeabi_i2d>
   879a0:	4602      	mov	r2, r0
   879a2:	460b      	mov	r3, r1
   879a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   879a8:	f002 fbe4 	bl	8a174 <__aeabi_dcmpeq>
   879ac:	2800      	cmp	r0, #0
   879ae:	f47f ae86 	bne.w	876be <_dtoa_r+0x12e>
   879b2:	1e6b      	subs	r3, r5, #1
   879b4:	9302      	str	r3, [sp, #8]
   879b6:	e682      	b.n	876be <_dtoa_r+0x12e>
   879b8:	ad0a      	add	r5, sp, #40	; 0x28
   879ba:	cde0      	ldmia	r5, {r5, r6, r7}
   879bc:	2d00      	cmp	r5, #0
   879be:	dd0c      	ble.n	879da <_dtoa_r+0x44a>
   879c0:	9908      	ldr	r1, [sp, #32]
   879c2:	2900      	cmp	r1, #0
   879c4:	460b      	mov	r3, r1
   879c6:	dd08      	ble.n	879da <_dtoa_r+0x44a>
   879c8:	42a9      	cmp	r1, r5
   879ca:	bfa8      	it	ge
   879cc:	462b      	movge	r3, r5
   879ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   879d0:	1aed      	subs	r5, r5, r3
   879d2:	1ad2      	subs	r2, r2, r3
   879d4:	1acb      	subs	r3, r1, r3
   879d6:	920a      	str	r2, [sp, #40]	; 0x28
   879d8:	9308      	str	r3, [sp, #32]
   879da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   879dc:	b1d3      	cbz	r3, 87a14 <_dtoa_r+0x484>
   879de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   879e0:	2b00      	cmp	r3, #0
   879e2:	f000 82b8 	beq.w	87f56 <_dtoa_r+0x9c6>
   879e6:	2f00      	cmp	r7, #0
   879e8:	dd10      	ble.n	87a0c <_dtoa_r+0x47c>
   879ea:	4631      	mov	r1, r6
   879ec:	463a      	mov	r2, r7
   879ee:	4620      	mov	r0, r4
   879f0:	f001 fb1e 	bl	89030 <__pow5mult>
   879f4:	464a      	mov	r2, r9
   879f6:	4601      	mov	r1, r0
   879f8:	4606      	mov	r6, r0
   879fa:	4620      	mov	r0, r4
   879fc:	f001 fa86 	bl	88f0c <__multiply>
   87a00:	4603      	mov	r3, r0
   87a02:	4649      	mov	r1, r9
   87a04:	4620      	mov	r0, r4
   87a06:	4699      	mov	r9, r3
   87a08:	f001 f9da 	bl	88dc0 <_Bfree>
   87a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87a0e:	1bda      	subs	r2, r3, r7
   87a10:	f040 82a2 	bne.w	87f58 <_dtoa_r+0x9c8>
   87a14:	2101      	movs	r1, #1
   87a16:	4620      	mov	r0, r4
   87a18:	f001 fa6e 	bl	88ef8 <__i2b>
   87a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87a1e:	4680      	mov	r8, r0
   87a20:	2b00      	cmp	r3, #0
   87a22:	dd1f      	ble.n	87a64 <_dtoa_r+0x4d4>
   87a24:	4601      	mov	r1, r0
   87a26:	461a      	mov	r2, r3
   87a28:	4620      	mov	r0, r4
   87a2a:	f001 fb01 	bl	89030 <__pow5mult>
   87a2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a30:	4680      	mov	r8, r0
   87a32:	2b01      	cmp	r3, #1
   87a34:	f340 8255 	ble.w	87ee2 <_dtoa_r+0x952>
   87a38:	2300      	movs	r3, #0
   87a3a:	930c      	str	r3, [sp, #48]	; 0x30
   87a3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   87a40:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   87a44:	6918      	ldr	r0, [r3, #16]
   87a46:	f001 fa07 	bl	88e58 <__hi0bits>
   87a4a:	f1c0 0020 	rsb	r0, r0, #32
   87a4e:	e013      	b.n	87a78 <_dtoa_r+0x4e8>
   87a50:	f1c3 0520 	rsb	r5, r3, #32
   87a54:	fa0a f005 	lsl.w	r0, sl, r5
   87a58:	e67b      	b.n	87752 <_dtoa_r+0x1c2>
   87a5a:	900e      	str	r0, [sp, #56]	; 0x38
   87a5c:	e643      	b.n	876e6 <_dtoa_r+0x156>
   87a5e:	bf00      	nop
   87a60:	40240000 	.word	0x40240000
   87a64:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a66:	2b01      	cmp	r3, #1
   87a68:	f340 8285 	ble.w	87f76 <_dtoa_r+0x9e6>
   87a6c:	2300      	movs	r3, #0
   87a6e:	930c      	str	r3, [sp, #48]	; 0x30
   87a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87a72:	2001      	movs	r0, #1
   87a74:	2b00      	cmp	r3, #0
   87a76:	d1e1      	bne.n	87a3c <_dtoa_r+0x4ac>
   87a78:	9a08      	ldr	r2, [sp, #32]
   87a7a:	4410      	add	r0, r2
   87a7c:	f010 001f 	ands.w	r0, r0, #31
   87a80:	f000 80a1 	beq.w	87bc6 <_dtoa_r+0x636>
   87a84:	f1c0 0320 	rsb	r3, r0, #32
   87a88:	2b04      	cmp	r3, #4
   87a8a:	f340 8486 	ble.w	8839a <_dtoa_r+0xe0a>
   87a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87a90:	f1c0 001c 	rsb	r0, r0, #28
   87a94:	4403      	add	r3, r0
   87a96:	930a      	str	r3, [sp, #40]	; 0x28
   87a98:	4613      	mov	r3, r2
   87a9a:	4403      	add	r3, r0
   87a9c:	4405      	add	r5, r0
   87a9e:	9308      	str	r3, [sp, #32]
   87aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87aa2:	2b00      	cmp	r3, #0
   87aa4:	dd05      	ble.n	87ab2 <_dtoa_r+0x522>
   87aa6:	4649      	mov	r1, r9
   87aa8:	461a      	mov	r2, r3
   87aaa:	4620      	mov	r0, r4
   87aac:	f001 fb10 	bl	890d0 <__lshift>
   87ab0:	4681      	mov	r9, r0
   87ab2:	9b08      	ldr	r3, [sp, #32]
   87ab4:	2b00      	cmp	r3, #0
   87ab6:	dd05      	ble.n	87ac4 <_dtoa_r+0x534>
   87ab8:	4641      	mov	r1, r8
   87aba:	461a      	mov	r2, r3
   87abc:	4620      	mov	r0, r4
   87abe:	f001 fb07 	bl	890d0 <__lshift>
   87ac2:	4680      	mov	r8, r0
   87ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ac6:	2b00      	cmp	r3, #0
   87ac8:	f040 8086 	bne.w	87bd8 <_dtoa_r+0x648>
   87acc:	9b07      	ldr	r3, [sp, #28]
   87ace:	2b00      	cmp	r3, #0
   87ad0:	f340 8264 	ble.w	87f9c <_dtoa_r+0xa0c>
   87ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87ad6:	2b00      	cmp	r3, #0
   87ad8:	f000 8098 	beq.w	87c0c <_dtoa_r+0x67c>
   87adc:	2d00      	cmp	r5, #0
   87ade:	dd05      	ble.n	87aec <_dtoa_r+0x55c>
   87ae0:	4631      	mov	r1, r6
   87ae2:	462a      	mov	r2, r5
   87ae4:	4620      	mov	r0, r4
   87ae6:	f001 faf3 	bl	890d0 <__lshift>
   87aea:	4606      	mov	r6, r0
   87aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87aee:	2b00      	cmp	r3, #0
   87af0:	f040 8336 	bne.w	88160 <_dtoa_r+0xbd0>
   87af4:	9608      	str	r6, [sp, #32]
   87af6:	9b07      	ldr	r3, [sp, #28]
   87af8:	9a04      	ldr	r2, [sp, #16]
   87afa:	3b01      	subs	r3, #1
   87afc:	18d3      	adds	r3, r2, r3
   87afe:	930b      	str	r3, [sp, #44]	; 0x2c
   87b00:	4617      	mov	r7, r2
   87b02:	f00a 0301 	and.w	r3, sl, #1
   87b06:	46c2      	mov	sl, r8
   87b08:	f8dd b020 	ldr.w	fp, [sp, #32]
   87b0c:	930c      	str	r3, [sp, #48]	; 0x30
   87b0e:	4651      	mov	r1, sl
   87b10:	4648      	mov	r0, r9
   87b12:	f7ff fca9 	bl	87468 <quorem>
   87b16:	4631      	mov	r1, r6
   87b18:	4605      	mov	r5, r0
   87b1a:	4648      	mov	r0, r9
   87b1c:	f001 fb28 	bl	89170 <__mcmp>
   87b20:	465a      	mov	r2, fp
   87b22:	9007      	str	r0, [sp, #28]
   87b24:	4651      	mov	r1, sl
   87b26:	4620      	mov	r0, r4
   87b28:	f001 fb3e 	bl	891a8 <__mdiff>
   87b2c:	68c2      	ldr	r2, [r0, #12]
   87b2e:	4680      	mov	r8, r0
   87b30:	f105 0330 	add.w	r3, r5, #48	; 0x30
   87b34:	2a00      	cmp	r2, #0
   87b36:	f040 8229 	bne.w	87f8c <_dtoa_r+0x9fc>
   87b3a:	4601      	mov	r1, r0
   87b3c:	4648      	mov	r0, r9
   87b3e:	930a      	str	r3, [sp, #40]	; 0x28
   87b40:	f001 fb16 	bl	89170 <__mcmp>
   87b44:	4641      	mov	r1, r8
   87b46:	9008      	str	r0, [sp, #32]
   87b48:	4620      	mov	r0, r4
   87b4a:	f001 f939 	bl	88dc0 <_Bfree>
   87b4e:	9a08      	ldr	r2, [sp, #32]
   87b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87b52:	b932      	cbnz	r2, 87b62 <_dtoa_r+0x5d2>
   87b54:	9924      	ldr	r1, [sp, #144]	; 0x90
   87b56:	b921      	cbnz	r1, 87b62 <_dtoa_r+0x5d2>
   87b58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87b5a:	2a00      	cmp	r2, #0
   87b5c:	f000 83ee 	beq.w	8833c <_dtoa_r+0xdac>
   87b60:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87b62:	9907      	ldr	r1, [sp, #28]
   87b64:	2900      	cmp	r1, #0
   87b66:	f2c0 829f 	blt.w	880a8 <_dtoa_r+0xb18>
   87b6a:	d105      	bne.n	87b78 <_dtoa_r+0x5e8>
   87b6c:	9924      	ldr	r1, [sp, #144]	; 0x90
   87b6e:	b919      	cbnz	r1, 87b78 <_dtoa_r+0x5e8>
   87b70:	990c      	ldr	r1, [sp, #48]	; 0x30
   87b72:	2900      	cmp	r1, #0
   87b74:	f000 8298 	beq.w	880a8 <_dtoa_r+0xb18>
   87b78:	2a00      	cmp	r2, #0
   87b7a:	f300 8305 	bgt.w	88188 <_dtoa_r+0xbf8>
   87b7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87b80:	f107 0801 	add.w	r8, r7, #1
   87b84:	4297      	cmp	r7, r2
   87b86:	703b      	strb	r3, [r7, #0]
   87b88:	4645      	mov	r5, r8
   87b8a:	f000 830b 	beq.w	881a4 <_dtoa_r+0xc14>
   87b8e:	4649      	mov	r1, r9
   87b90:	2300      	movs	r3, #0
   87b92:	220a      	movs	r2, #10
   87b94:	4620      	mov	r0, r4
   87b96:	f001 f91d 	bl	88dd4 <__multadd>
   87b9a:	455e      	cmp	r6, fp
   87b9c:	4681      	mov	r9, r0
   87b9e:	4631      	mov	r1, r6
   87ba0:	f04f 0300 	mov.w	r3, #0
   87ba4:	f04f 020a 	mov.w	r2, #10
   87ba8:	4620      	mov	r0, r4
   87baa:	f000 81e9 	beq.w	87f80 <_dtoa_r+0x9f0>
   87bae:	f001 f911 	bl	88dd4 <__multadd>
   87bb2:	4659      	mov	r1, fp
   87bb4:	4606      	mov	r6, r0
   87bb6:	2300      	movs	r3, #0
   87bb8:	220a      	movs	r2, #10
   87bba:	4620      	mov	r0, r4
   87bbc:	f001 f90a 	bl	88dd4 <__multadd>
   87bc0:	4647      	mov	r7, r8
   87bc2:	4683      	mov	fp, r0
   87bc4:	e7a3      	b.n	87b0e <_dtoa_r+0x57e>
   87bc6:	201c      	movs	r0, #28
   87bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87bca:	4405      	add	r5, r0
   87bcc:	4403      	add	r3, r0
   87bce:	930a      	str	r3, [sp, #40]	; 0x28
   87bd0:	9b08      	ldr	r3, [sp, #32]
   87bd2:	4403      	add	r3, r0
   87bd4:	9308      	str	r3, [sp, #32]
   87bd6:	e763      	b.n	87aa0 <_dtoa_r+0x510>
   87bd8:	4641      	mov	r1, r8
   87bda:	4648      	mov	r0, r9
   87bdc:	f001 fac8 	bl	89170 <__mcmp>
   87be0:	2800      	cmp	r0, #0
   87be2:	f6bf af73 	bge.w	87acc <_dtoa_r+0x53c>
   87be6:	9f02      	ldr	r7, [sp, #8]
   87be8:	4649      	mov	r1, r9
   87bea:	2300      	movs	r3, #0
   87bec:	220a      	movs	r2, #10
   87bee:	4620      	mov	r0, r4
   87bf0:	3f01      	subs	r7, #1
   87bf2:	9702      	str	r7, [sp, #8]
   87bf4:	f001 f8ee 	bl	88dd4 <__multadd>
   87bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87bfa:	4681      	mov	r9, r0
   87bfc:	2b00      	cmp	r3, #0
   87bfe:	f040 83b5 	bne.w	8836c <_dtoa_r+0xddc>
   87c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87c04:	2b00      	cmp	r3, #0
   87c06:	f340 83be 	ble.w	88386 <_dtoa_r+0xdf6>
   87c0a:	9307      	str	r3, [sp, #28]
   87c0c:	f8dd a010 	ldr.w	sl, [sp, #16]
   87c10:	9f07      	ldr	r7, [sp, #28]
   87c12:	4655      	mov	r5, sl
   87c14:	e006      	b.n	87c24 <_dtoa_r+0x694>
   87c16:	4649      	mov	r1, r9
   87c18:	2300      	movs	r3, #0
   87c1a:	220a      	movs	r2, #10
   87c1c:	4620      	mov	r0, r4
   87c1e:	f001 f8d9 	bl	88dd4 <__multadd>
   87c22:	4681      	mov	r9, r0
   87c24:	4641      	mov	r1, r8
   87c26:	4648      	mov	r0, r9
   87c28:	f7ff fc1e 	bl	87468 <quorem>
   87c2c:	3030      	adds	r0, #48	; 0x30
   87c2e:	f805 0b01 	strb.w	r0, [r5], #1
   87c32:	eba5 030a 	sub.w	r3, r5, sl
   87c36:	42bb      	cmp	r3, r7
   87c38:	dbed      	blt.n	87c16 <_dtoa_r+0x686>
   87c3a:	9b04      	ldr	r3, [sp, #16]
   87c3c:	9a07      	ldr	r2, [sp, #28]
   87c3e:	4682      	mov	sl, r0
   87c40:	2a01      	cmp	r2, #1
   87c42:	bfac      	ite	ge
   87c44:	189b      	addge	r3, r3, r2
   87c46:	3301      	addlt	r3, #1
   87c48:	f04f 0b00 	mov.w	fp, #0
   87c4c:	461d      	mov	r5, r3
   87c4e:	4649      	mov	r1, r9
   87c50:	2201      	movs	r2, #1
   87c52:	4620      	mov	r0, r4
   87c54:	f001 fa3c 	bl	890d0 <__lshift>
   87c58:	4641      	mov	r1, r8
   87c5a:	4681      	mov	r9, r0
   87c5c:	f001 fa88 	bl	89170 <__mcmp>
   87c60:	2800      	cmp	r0, #0
   87c62:	f340 823f 	ble.w	880e4 <_dtoa_r+0xb54>
   87c66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   87c6a:	1e6b      	subs	r3, r5, #1
   87c6c:	9904      	ldr	r1, [sp, #16]
   87c6e:	e004      	b.n	87c7a <_dtoa_r+0x6ea>
   87c70:	428b      	cmp	r3, r1
   87c72:	f000 81ae 	beq.w	87fd2 <_dtoa_r+0xa42>
   87c76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   87c7a:	2a39      	cmp	r2, #57	; 0x39
   87c7c:	f103 0501 	add.w	r5, r3, #1
   87c80:	d0f6      	beq.n	87c70 <_dtoa_r+0x6e0>
   87c82:	3201      	adds	r2, #1
   87c84:	701a      	strb	r2, [r3, #0]
   87c86:	4641      	mov	r1, r8
   87c88:	4620      	mov	r0, r4
   87c8a:	f001 f899 	bl	88dc0 <_Bfree>
   87c8e:	2e00      	cmp	r6, #0
   87c90:	f43f ae3d 	beq.w	8790e <_dtoa_r+0x37e>
   87c94:	f1bb 0f00 	cmp.w	fp, #0
   87c98:	d005      	beq.n	87ca6 <_dtoa_r+0x716>
   87c9a:	45b3      	cmp	fp, r6
   87c9c:	d003      	beq.n	87ca6 <_dtoa_r+0x716>
   87c9e:	4659      	mov	r1, fp
   87ca0:	4620      	mov	r0, r4
   87ca2:	f001 f88d 	bl	88dc0 <_Bfree>
   87ca6:	4631      	mov	r1, r6
   87ca8:	4620      	mov	r0, r4
   87caa:	f001 f889 	bl	88dc0 <_Bfree>
   87cae:	e62e      	b.n	8790e <_dtoa_r+0x37e>
   87cb0:	2300      	movs	r3, #0
   87cb2:	930b      	str	r3, [sp, #44]	; 0x2c
   87cb4:	9b02      	ldr	r3, [sp, #8]
   87cb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   87cb8:	4413      	add	r3, r2
   87cba:	930f      	str	r3, [sp, #60]	; 0x3c
   87cbc:	3301      	adds	r3, #1
   87cbe:	2b01      	cmp	r3, #1
   87cc0:	461f      	mov	r7, r3
   87cc2:	461e      	mov	r6, r3
   87cc4:	bfb8      	it	lt
   87cc6:	2701      	movlt	r7, #1
   87cc8:	9307      	str	r3, [sp, #28]
   87cca:	2100      	movs	r1, #0
   87ccc:	2f17      	cmp	r7, #23
   87cce:	6461      	str	r1, [r4, #68]	; 0x44
   87cd0:	d90a      	bls.n	87ce8 <_dtoa_r+0x758>
   87cd2:	2201      	movs	r2, #1
   87cd4:	2304      	movs	r3, #4
   87cd6:	005b      	lsls	r3, r3, #1
   87cd8:	f103 0014 	add.w	r0, r3, #20
   87cdc:	4287      	cmp	r7, r0
   87cde:	4611      	mov	r1, r2
   87ce0:	f102 0201 	add.w	r2, r2, #1
   87ce4:	d2f7      	bcs.n	87cd6 <_dtoa_r+0x746>
   87ce6:	6461      	str	r1, [r4, #68]	; 0x44
   87ce8:	4620      	mov	r0, r4
   87cea:	f001 f843 	bl	88d74 <_Balloc>
   87cee:	2e0e      	cmp	r6, #14
   87cf0:	9004      	str	r0, [sp, #16]
   87cf2:	6420      	str	r0, [r4, #64]	; 0x40
   87cf4:	f63f ad47 	bhi.w	87786 <_dtoa_r+0x1f6>
   87cf8:	2d00      	cmp	r5, #0
   87cfa:	f43f ad44 	beq.w	87786 <_dtoa_r+0x1f6>
   87cfe:	9902      	ldr	r1, [sp, #8]
   87d00:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   87d04:	2900      	cmp	r1, #0
   87d06:	f340 8203 	ble.w	88110 <_dtoa_r+0xb80>
   87d0a:	4bb9      	ldr	r3, [pc, #740]	; (87ff0 <_dtoa_r+0xa60>)
   87d0c:	f001 020f 	and.w	r2, r1, #15
   87d10:	110d      	asrs	r5, r1, #4
   87d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87d16:	06e9      	lsls	r1, r5, #27
   87d18:	e9d3 6700 	ldrd	r6, r7, [r3]
   87d1c:	f140 81af 	bpl.w	8807e <_dtoa_r+0xaee>
   87d20:	4bb4      	ldr	r3, [pc, #720]	; (87ff4 <_dtoa_r+0xa64>)
   87d22:	4650      	mov	r0, sl
   87d24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87d28:	4659      	mov	r1, fp
   87d2a:	f002 f8e5 	bl	89ef8 <__aeabi_ddiv>
   87d2e:	f04f 0a03 	mov.w	sl, #3
   87d32:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   87d36:	f005 050f 	and.w	r5, r5, #15
   87d3a:	b18d      	cbz	r5, 87d60 <_dtoa_r+0x7d0>
   87d3c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 87ff4 <_dtoa_r+0xa64>
   87d40:	07ea      	lsls	r2, r5, #31
   87d42:	d509      	bpl.n	87d58 <_dtoa_r+0x7c8>
   87d44:	e9d8 2300 	ldrd	r2, r3, [r8]
   87d48:	4630      	mov	r0, r6
   87d4a:	4639      	mov	r1, r7
   87d4c:	f001 ffaa 	bl	89ca4 <__aeabi_dmul>
   87d50:	4606      	mov	r6, r0
   87d52:	460f      	mov	r7, r1
   87d54:	f10a 0a01 	add.w	sl, sl, #1
   87d58:	106d      	asrs	r5, r5, #1
   87d5a:	f108 0808 	add.w	r8, r8, #8
   87d5e:	d1ef      	bne.n	87d40 <_dtoa_r+0x7b0>
   87d60:	463b      	mov	r3, r7
   87d62:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   87d66:	4632      	mov	r2, r6
   87d68:	f002 f8c6 	bl	89ef8 <__aeabi_ddiv>
   87d6c:	4607      	mov	r7, r0
   87d6e:	4688      	mov	r8, r1
   87d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d72:	b143      	cbz	r3, 87d86 <_dtoa_r+0x7f6>
   87d74:	2200      	movs	r2, #0
   87d76:	4ba0      	ldr	r3, [pc, #640]	; (87ff8 <_dtoa_r+0xa68>)
   87d78:	4638      	mov	r0, r7
   87d7a:	4641      	mov	r1, r8
   87d7c:	f002 fa04 	bl	8a188 <__aeabi_dcmplt>
   87d80:	2800      	cmp	r0, #0
   87d82:	f040 8287 	bne.w	88294 <_dtoa_r+0xd04>
   87d86:	4650      	mov	r0, sl
   87d88:	f001 ff26 	bl	89bd8 <__aeabi_i2d>
   87d8c:	463a      	mov	r2, r7
   87d8e:	4643      	mov	r3, r8
   87d90:	f001 ff88 	bl	89ca4 <__aeabi_dmul>
   87d94:	4b99      	ldr	r3, [pc, #612]	; (87ffc <_dtoa_r+0xa6c>)
   87d96:	2200      	movs	r2, #0
   87d98:	f001 fdd2 	bl	89940 <__adddf3>
   87d9c:	9b07      	ldr	r3, [sp, #28]
   87d9e:	4605      	mov	r5, r0
   87da0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   87da4:	2b00      	cmp	r3, #0
   87da6:	f000 813f 	beq.w	88028 <_dtoa_r+0xa98>
   87daa:	9b02      	ldr	r3, [sp, #8]
   87dac:	9315      	str	r3, [sp, #84]	; 0x54
   87dae:	9b07      	ldr	r3, [sp, #28]
   87db0:	9312      	str	r3, [sp, #72]	; 0x48
   87db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87db4:	2b00      	cmp	r3, #0
   87db6:	f000 81fb 	beq.w	881b0 <_dtoa_r+0xc20>
   87dba:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87dbc:	4b8c      	ldr	r3, [pc, #560]	; (87ff0 <_dtoa_r+0xa60>)
   87dbe:	2000      	movs	r0, #0
   87dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87dc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87dc8:	498d      	ldr	r1, [pc, #564]	; (88000 <_dtoa_r+0xa70>)
   87dca:	f002 f895 	bl	89ef8 <__aeabi_ddiv>
   87dce:	462a      	mov	r2, r5
   87dd0:	4633      	mov	r3, r6
   87dd2:	f001 fdb3 	bl	8993c <__aeabi_dsub>
   87dd6:	4682      	mov	sl, r0
   87dd8:	468b      	mov	fp, r1
   87dda:	4638      	mov	r0, r7
   87ddc:	4641      	mov	r1, r8
   87dde:	f002 fa11 	bl	8a204 <__aeabi_d2iz>
   87de2:	4605      	mov	r5, r0
   87de4:	f001 fef8 	bl	89bd8 <__aeabi_i2d>
   87de8:	4602      	mov	r2, r0
   87dea:	460b      	mov	r3, r1
   87dec:	4638      	mov	r0, r7
   87dee:	4641      	mov	r1, r8
   87df0:	f001 fda4 	bl	8993c <__aeabi_dsub>
   87df4:	3530      	adds	r5, #48	; 0x30
   87df6:	fa5f f885 	uxtb.w	r8, r5
   87dfa:	9d04      	ldr	r5, [sp, #16]
   87dfc:	4606      	mov	r6, r0
   87dfe:	460f      	mov	r7, r1
   87e00:	f885 8000 	strb.w	r8, [r5]
   87e04:	4602      	mov	r2, r0
   87e06:	460b      	mov	r3, r1
   87e08:	4650      	mov	r0, sl
   87e0a:	4659      	mov	r1, fp
   87e0c:	3501      	adds	r5, #1
   87e0e:	f002 f9d9 	bl	8a1c4 <__aeabi_dcmpgt>
   87e12:	2800      	cmp	r0, #0
   87e14:	d154      	bne.n	87ec0 <_dtoa_r+0x930>
   87e16:	4632      	mov	r2, r6
   87e18:	463b      	mov	r3, r7
   87e1a:	2000      	movs	r0, #0
   87e1c:	4976      	ldr	r1, [pc, #472]	; (87ff8 <_dtoa_r+0xa68>)
   87e1e:	f001 fd8d 	bl	8993c <__aeabi_dsub>
   87e22:	4602      	mov	r2, r0
   87e24:	460b      	mov	r3, r1
   87e26:	4650      	mov	r0, sl
   87e28:	4659      	mov	r1, fp
   87e2a:	f002 f9cb 	bl	8a1c4 <__aeabi_dcmpgt>
   87e2e:	2800      	cmp	r0, #0
   87e30:	f040 8270 	bne.w	88314 <_dtoa_r+0xd84>
   87e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87e36:	2a01      	cmp	r2, #1
   87e38:	f000 8112 	beq.w	88060 <_dtoa_r+0xad0>
   87e3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87e3e:	9a04      	ldr	r2, [sp, #16]
   87e40:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   87e44:	4413      	add	r3, r2
   87e46:	4699      	mov	r9, r3
   87e48:	e00f      	b.n	87e6a <_dtoa_r+0x8da>
   87e4a:	4632      	mov	r2, r6
   87e4c:	463b      	mov	r3, r7
   87e4e:	2000      	movs	r0, #0
   87e50:	4969      	ldr	r1, [pc, #420]	; (87ff8 <_dtoa_r+0xa68>)
   87e52:	f001 fd73 	bl	8993c <__aeabi_dsub>
   87e56:	4652      	mov	r2, sl
   87e58:	465b      	mov	r3, fp
   87e5a:	f002 f995 	bl	8a188 <__aeabi_dcmplt>
   87e5e:	2800      	cmp	r0, #0
   87e60:	f040 8256 	bne.w	88310 <_dtoa_r+0xd80>
   87e64:	454d      	cmp	r5, r9
   87e66:	f000 80f9 	beq.w	8805c <_dtoa_r+0xacc>
   87e6a:	4650      	mov	r0, sl
   87e6c:	4659      	mov	r1, fp
   87e6e:	2200      	movs	r2, #0
   87e70:	4b64      	ldr	r3, [pc, #400]	; (88004 <_dtoa_r+0xa74>)
   87e72:	f001 ff17 	bl	89ca4 <__aeabi_dmul>
   87e76:	2200      	movs	r2, #0
   87e78:	4b62      	ldr	r3, [pc, #392]	; (88004 <_dtoa_r+0xa74>)
   87e7a:	4682      	mov	sl, r0
   87e7c:	468b      	mov	fp, r1
   87e7e:	4630      	mov	r0, r6
   87e80:	4639      	mov	r1, r7
   87e82:	f001 ff0f 	bl	89ca4 <__aeabi_dmul>
   87e86:	460f      	mov	r7, r1
   87e88:	4606      	mov	r6, r0
   87e8a:	f002 f9bb 	bl	8a204 <__aeabi_d2iz>
   87e8e:	4680      	mov	r8, r0
   87e90:	f001 fea2 	bl	89bd8 <__aeabi_i2d>
   87e94:	4602      	mov	r2, r0
   87e96:	460b      	mov	r3, r1
   87e98:	4630      	mov	r0, r6
   87e9a:	4639      	mov	r1, r7
   87e9c:	f001 fd4e 	bl	8993c <__aeabi_dsub>
   87ea0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   87ea4:	fa5f f888 	uxtb.w	r8, r8
   87ea8:	f805 8b01 	strb.w	r8, [r5], #1
   87eac:	4652      	mov	r2, sl
   87eae:	465b      	mov	r3, fp
   87eb0:	4606      	mov	r6, r0
   87eb2:	460f      	mov	r7, r1
   87eb4:	f002 f968 	bl	8a188 <__aeabi_dcmplt>
   87eb8:	2800      	cmp	r0, #0
   87eba:	d0c6      	beq.n	87e4a <_dtoa_r+0x8ba>
   87ebc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   87ec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87ec2:	9302      	str	r3, [sp, #8]
   87ec4:	e523      	b.n	8790e <_dtoa_r+0x37e>
   87ec6:	2300      	movs	r3, #0
   87ec8:	930b      	str	r3, [sp, #44]	; 0x2c
   87eca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87ecc:	2b00      	cmp	r3, #0
   87ece:	f340 80dd 	ble.w	8808c <_dtoa_r+0xafc>
   87ed2:	461f      	mov	r7, r3
   87ed4:	461e      	mov	r6, r3
   87ed6:	930f      	str	r3, [sp, #60]	; 0x3c
   87ed8:	9307      	str	r3, [sp, #28]
   87eda:	e6f6      	b.n	87cca <_dtoa_r+0x73a>
   87edc:	2301      	movs	r3, #1
   87ede:	930b      	str	r3, [sp, #44]	; 0x2c
   87ee0:	e7f3      	b.n	87eca <_dtoa_r+0x93a>
   87ee2:	f1ba 0f00 	cmp.w	sl, #0
   87ee6:	f47f ada7 	bne.w	87a38 <_dtoa_r+0x4a8>
   87eea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   87eee:	2b00      	cmp	r3, #0
   87ef0:	f47f adbc 	bne.w	87a6c <_dtoa_r+0x4dc>
   87ef4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   87ef8:	0d3f      	lsrs	r7, r7, #20
   87efa:	053f      	lsls	r7, r7, #20
   87efc:	2f00      	cmp	r7, #0
   87efe:	f000 820d 	beq.w	8831c <_dtoa_r+0xd8c>
   87f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87f04:	3301      	adds	r3, #1
   87f06:	930a      	str	r3, [sp, #40]	; 0x28
   87f08:	9b08      	ldr	r3, [sp, #32]
   87f0a:	3301      	adds	r3, #1
   87f0c:	9308      	str	r3, [sp, #32]
   87f0e:	2301      	movs	r3, #1
   87f10:	930c      	str	r3, [sp, #48]	; 0x30
   87f12:	e5ad      	b.n	87a70 <_dtoa_r+0x4e0>
   87f14:	9b07      	ldr	r3, [sp, #28]
   87f16:	2b00      	cmp	r3, #0
   87f18:	f73f ac48 	bgt.w	877ac <_dtoa_r+0x21c>
   87f1c:	f040 8222 	bne.w	88364 <_dtoa_r+0xdd4>
   87f20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87f24:	2200      	movs	r2, #0
   87f26:	4b38      	ldr	r3, [pc, #224]	; (88008 <_dtoa_r+0xa78>)
   87f28:	f001 febc 	bl	89ca4 <__aeabi_dmul>
   87f2c:	4652      	mov	r2, sl
   87f2e:	465b      	mov	r3, fp
   87f30:	f002 f93e 	bl	8a1b0 <__aeabi_dcmpge>
   87f34:	f8dd 801c 	ldr.w	r8, [sp, #28]
   87f38:	4646      	mov	r6, r8
   87f3a:	2800      	cmp	r0, #0
   87f3c:	d041      	beq.n	87fc2 <_dtoa_r+0xa32>
   87f3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   87f40:	9d04      	ldr	r5, [sp, #16]
   87f42:	43db      	mvns	r3, r3
   87f44:	9302      	str	r3, [sp, #8]
   87f46:	4641      	mov	r1, r8
   87f48:	4620      	mov	r0, r4
   87f4a:	f000 ff39 	bl	88dc0 <_Bfree>
   87f4e:	2e00      	cmp	r6, #0
   87f50:	f43f acdd 	beq.w	8790e <_dtoa_r+0x37e>
   87f54:	e6a7      	b.n	87ca6 <_dtoa_r+0x716>
   87f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87f58:	4649      	mov	r1, r9
   87f5a:	4620      	mov	r0, r4
   87f5c:	f001 f868 	bl	89030 <__pow5mult>
   87f60:	4681      	mov	r9, r0
   87f62:	e557      	b.n	87a14 <_dtoa_r+0x484>
   87f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
   87f66:	2a00      	cmp	r2, #0
   87f68:	f000 8188 	beq.w	8827c <_dtoa_r+0xcec>
   87f6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   87f70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87f72:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   87f74:	e4f2      	b.n	8795c <_dtoa_r+0x3cc>
   87f76:	f1ba 0f00 	cmp.w	sl, #0
   87f7a:	f47f ad77 	bne.w	87a6c <_dtoa_r+0x4dc>
   87f7e:	e7b4      	b.n	87eea <_dtoa_r+0x95a>
   87f80:	f000 ff28 	bl	88dd4 <__multadd>
   87f84:	4647      	mov	r7, r8
   87f86:	4606      	mov	r6, r0
   87f88:	4683      	mov	fp, r0
   87f8a:	e5c0      	b.n	87b0e <_dtoa_r+0x57e>
   87f8c:	4601      	mov	r1, r0
   87f8e:	4620      	mov	r0, r4
   87f90:	9308      	str	r3, [sp, #32]
   87f92:	f000 ff15 	bl	88dc0 <_Bfree>
   87f96:	2201      	movs	r2, #1
   87f98:	9b08      	ldr	r3, [sp, #32]
   87f9a:	e5e2      	b.n	87b62 <_dtoa_r+0x5d2>
   87f9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87f9e:	2b02      	cmp	r3, #2
   87fa0:	f77f ad98 	ble.w	87ad4 <_dtoa_r+0x544>
   87fa4:	9b07      	ldr	r3, [sp, #28]
   87fa6:	2b00      	cmp	r3, #0
   87fa8:	d1c9      	bne.n	87f3e <_dtoa_r+0x9ae>
   87faa:	4641      	mov	r1, r8
   87fac:	2205      	movs	r2, #5
   87fae:	4620      	mov	r0, r4
   87fb0:	f000 ff10 	bl	88dd4 <__multadd>
   87fb4:	4601      	mov	r1, r0
   87fb6:	4680      	mov	r8, r0
   87fb8:	4648      	mov	r0, r9
   87fba:	f001 f8d9 	bl	89170 <__mcmp>
   87fbe:	2800      	cmp	r0, #0
   87fc0:	ddbd      	ble.n	87f3e <_dtoa_r+0x9ae>
   87fc2:	2331      	movs	r3, #49	; 0x31
   87fc4:	9a02      	ldr	r2, [sp, #8]
   87fc6:	9904      	ldr	r1, [sp, #16]
   87fc8:	3201      	adds	r2, #1
   87fca:	9202      	str	r2, [sp, #8]
   87fcc:	700b      	strb	r3, [r1, #0]
   87fce:	1c4d      	adds	r5, r1, #1
   87fd0:	e7b9      	b.n	87f46 <_dtoa_r+0x9b6>
   87fd2:	2331      	movs	r3, #49	; 0x31
   87fd4:	9a02      	ldr	r2, [sp, #8]
   87fd6:	3201      	adds	r2, #1
   87fd8:	9202      	str	r2, [sp, #8]
   87fda:	9a04      	ldr	r2, [sp, #16]
   87fdc:	7013      	strb	r3, [r2, #0]
   87fde:	e652      	b.n	87c86 <_dtoa_r+0x6f6>
   87fe0:	2301      	movs	r3, #1
   87fe2:	930b      	str	r3, [sp, #44]	; 0x2c
   87fe4:	e666      	b.n	87cb4 <_dtoa_r+0x724>
   87fe6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87fea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87fec:	e48f      	b.n	8790e <_dtoa_r+0x37e>
   87fee:	bf00      	nop
   87ff0:	0008aa18 	.word	0x0008aa18
   87ff4:	0008a9f0 	.word	0x0008a9f0
   87ff8:	3ff00000 	.word	0x3ff00000
   87ffc:	401c0000 	.word	0x401c0000
   88000:	3fe00000 	.word	0x3fe00000
   88004:	40240000 	.word	0x40240000
   88008:	40140000 	.word	0x40140000
   8800c:	4650      	mov	r0, sl
   8800e:	f001 fde3 	bl	89bd8 <__aeabi_i2d>
   88012:	463a      	mov	r2, r7
   88014:	4643      	mov	r3, r8
   88016:	f001 fe45 	bl	89ca4 <__aeabi_dmul>
   8801a:	2200      	movs	r2, #0
   8801c:	4bc1      	ldr	r3, [pc, #772]	; (88324 <_dtoa_r+0xd94>)
   8801e:	f001 fc8f 	bl	89940 <__adddf3>
   88022:	4605      	mov	r5, r0
   88024:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   88028:	4641      	mov	r1, r8
   8802a:	2200      	movs	r2, #0
   8802c:	4bbe      	ldr	r3, [pc, #760]	; (88328 <_dtoa_r+0xd98>)
   8802e:	4638      	mov	r0, r7
   88030:	f001 fc84 	bl	8993c <__aeabi_dsub>
   88034:	462a      	mov	r2, r5
   88036:	4633      	mov	r3, r6
   88038:	4682      	mov	sl, r0
   8803a:	468b      	mov	fp, r1
   8803c:	f002 f8c2 	bl	8a1c4 <__aeabi_dcmpgt>
   88040:	4680      	mov	r8, r0
   88042:	2800      	cmp	r0, #0
   88044:	f040 8110 	bne.w	88268 <_dtoa_r+0xcd8>
   88048:	462a      	mov	r2, r5
   8804a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8804e:	4650      	mov	r0, sl
   88050:	4659      	mov	r1, fp
   88052:	f002 f899 	bl	8a188 <__aeabi_dcmplt>
   88056:	b118      	cbz	r0, 88060 <_dtoa_r+0xad0>
   88058:	4646      	mov	r6, r8
   8805a:	e770      	b.n	87f3e <_dtoa_r+0x9ae>
   8805c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   88060:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   88064:	f7ff bb8f 	b.w	87786 <_dtoa_r+0x1f6>
   88068:	9804      	ldr	r0, [sp, #16]
   8806a:	f7ff bac0 	b.w	875ee <_dtoa_r+0x5e>
   8806e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   88072:	1afb      	subs	r3, r7, r3
   88074:	441a      	add	r2, r3
   88076:	970c      	str	r7, [sp, #48]	; 0x30
   88078:	920d      	str	r2, [sp, #52]	; 0x34
   8807a:	2700      	movs	r7, #0
   8807c:	e468      	b.n	87950 <_dtoa_r+0x3c0>
   8807e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88082:	f04f 0a02 	mov.w	sl, #2
   88086:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8808a:	e656      	b.n	87d3a <_dtoa_r+0x7aa>
   8808c:	2100      	movs	r1, #0
   8808e:	2301      	movs	r3, #1
   88090:	4620      	mov	r0, r4
   88092:	6461      	str	r1, [r4, #68]	; 0x44
   88094:	9325      	str	r3, [sp, #148]	; 0x94
   88096:	f000 fe6d 	bl	88d74 <_Balloc>
   8809a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8809c:	9004      	str	r0, [sp, #16]
   8809e:	9307      	str	r3, [sp, #28]
   880a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   880a2:	6420      	str	r0, [r4, #64]	; 0x40
   880a4:	930f      	str	r3, [sp, #60]	; 0x3c
   880a6:	e627      	b.n	87cf8 <_dtoa_r+0x768>
   880a8:	2a00      	cmp	r2, #0
   880aa:	46d0      	mov	r8, sl
   880ac:	f8cd b020 	str.w	fp, [sp, #32]
   880b0:	469a      	mov	sl, r3
   880b2:	dd11      	ble.n	880d8 <_dtoa_r+0xb48>
   880b4:	4649      	mov	r1, r9
   880b6:	2201      	movs	r2, #1
   880b8:	4620      	mov	r0, r4
   880ba:	f001 f809 	bl	890d0 <__lshift>
   880be:	4641      	mov	r1, r8
   880c0:	4681      	mov	r9, r0
   880c2:	f001 f855 	bl	89170 <__mcmp>
   880c6:	2800      	cmp	r0, #0
   880c8:	f340 8145 	ble.w	88356 <_dtoa_r+0xdc6>
   880cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   880d0:	f000 8105 	beq.w	882de <_dtoa_r+0xd4e>
   880d4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   880d8:	46b3      	mov	fp, r6
   880da:	f887 a000 	strb.w	sl, [r7]
   880de:	1c7d      	adds	r5, r7, #1
   880e0:	9e08      	ldr	r6, [sp, #32]
   880e2:	e5d0      	b.n	87c86 <_dtoa_r+0x6f6>
   880e4:	d104      	bne.n	880f0 <_dtoa_r+0xb60>
   880e6:	f01a 0f01 	tst.w	sl, #1
   880ea:	d001      	beq.n	880f0 <_dtoa_r+0xb60>
   880ec:	e5bb      	b.n	87c66 <_dtoa_r+0x6d6>
   880ee:	4615      	mov	r5, r2
   880f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   880f4:	1e6a      	subs	r2, r5, #1
   880f6:	2b30      	cmp	r3, #48	; 0x30
   880f8:	d0f9      	beq.n	880ee <_dtoa_r+0xb5e>
   880fa:	e5c4      	b.n	87c86 <_dtoa_r+0x6f6>
   880fc:	2230      	movs	r2, #48	; 0x30
   880fe:	9904      	ldr	r1, [sp, #16]
   88100:	700a      	strb	r2, [r1, #0]
   88102:	9a02      	ldr	r2, [sp, #8]
   88104:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   88108:	3201      	adds	r2, #1
   8810a:	9202      	str	r2, [sp, #8]
   8810c:	f7ff bbfb 	b.w	87906 <_dtoa_r+0x376>
   88110:	f000 80bb 	beq.w	8828a <_dtoa_r+0xcfa>
   88114:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88118:	9b02      	ldr	r3, [sp, #8]
   8811a:	f04f 0a02 	mov.w	sl, #2
   8811e:	425d      	negs	r5, r3
   88120:	4b82      	ldr	r3, [pc, #520]	; (8832c <_dtoa_r+0xd9c>)
   88122:	f005 020f 	and.w	r2, r5, #15
   88126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8812a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8812e:	f001 fdb9 	bl	89ca4 <__aeabi_dmul>
   88132:	112d      	asrs	r5, r5, #4
   88134:	4607      	mov	r7, r0
   88136:	4688      	mov	r8, r1
   88138:	f43f ae1a 	beq.w	87d70 <_dtoa_r+0x7e0>
   8813c:	4e7c      	ldr	r6, [pc, #496]	; (88330 <_dtoa_r+0xda0>)
   8813e:	07eb      	lsls	r3, r5, #31
   88140:	d509      	bpl.n	88156 <_dtoa_r+0xbc6>
   88142:	e9d6 2300 	ldrd	r2, r3, [r6]
   88146:	4638      	mov	r0, r7
   88148:	4641      	mov	r1, r8
   8814a:	f001 fdab 	bl	89ca4 <__aeabi_dmul>
   8814e:	4607      	mov	r7, r0
   88150:	4688      	mov	r8, r1
   88152:	f10a 0a01 	add.w	sl, sl, #1
   88156:	106d      	asrs	r5, r5, #1
   88158:	f106 0608 	add.w	r6, r6, #8
   8815c:	d1ef      	bne.n	8813e <_dtoa_r+0xbae>
   8815e:	e607      	b.n	87d70 <_dtoa_r+0x7e0>
   88160:	6871      	ldr	r1, [r6, #4]
   88162:	4620      	mov	r0, r4
   88164:	f000 fe06 	bl	88d74 <_Balloc>
   88168:	4605      	mov	r5, r0
   8816a:	6933      	ldr	r3, [r6, #16]
   8816c:	f106 010c 	add.w	r1, r6, #12
   88170:	3302      	adds	r3, #2
   88172:	009a      	lsls	r2, r3, #2
   88174:	300c      	adds	r0, #12
   88176:	f7fd fd71 	bl	85c5c <memcpy>
   8817a:	4629      	mov	r1, r5
   8817c:	2201      	movs	r2, #1
   8817e:	4620      	mov	r0, r4
   88180:	f000 ffa6 	bl	890d0 <__lshift>
   88184:	9008      	str	r0, [sp, #32]
   88186:	e4b6      	b.n	87af6 <_dtoa_r+0x566>
   88188:	2b39      	cmp	r3, #57	; 0x39
   8818a:	f8cd b020 	str.w	fp, [sp, #32]
   8818e:	46d0      	mov	r8, sl
   88190:	f000 80a5 	beq.w	882de <_dtoa_r+0xd4e>
   88194:	f103 0a01 	add.w	sl, r3, #1
   88198:	46b3      	mov	fp, r6
   8819a:	f887 a000 	strb.w	sl, [r7]
   8819e:	1c7d      	adds	r5, r7, #1
   881a0:	9e08      	ldr	r6, [sp, #32]
   881a2:	e570      	b.n	87c86 <_dtoa_r+0x6f6>
   881a4:	465a      	mov	r2, fp
   881a6:	46d0      	mov	r8, sl
   881a8:	46b3      	mov	fp, r6
   881aa:	469a      	mov	sl, r3
   881ac:	4616      	mov	r6, r2
   881ae:	e54e      	b.n	87c4e <_dtoa_r+0x6be>
   881b0:	9812      	ldr	r0, [sp, #72]	; 0x48
   881b2:	495e      	ldr	r1, [pc, #376]	; (8832c <_dtoa_r+0xd9c>)
   881b4:	462a      	mov	r2, r5
   881b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   881ba:	4633      	mov	r3, r6
   881bc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   881c0:	f001 fd70 	bl	89ca4 <__aeabi_dmul>
   881c4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   881c8:	4638      	mov	r0, r7
   881ca:	4641      	mov	r1, r8
   881cc:	f002 f81a 	bl	8a204 <__aeabi_d2iz>
   881d0:	4605      	mov	r5, r0
   881d2:	f001 fd01 	bl	89bd8 <__aeabi_i2d>
   881d6:	4602      	mov	r2, r0
   881d8:	460b      	mov	r3, r1
   881da:	4638      	mov	r0, r7
   881dc:	4641      	mov	r1, r8
   881de:	f001 fbad 	bl	8993c <__aeabi_dsub>
   881e2:	4606      	mov	r6, r0
   881e4:	9812      	ldr	r0, [sp, #72]	; 0x48
   881e6:	9a04      	ldr	r2, [sp, #16]
   881e8:	3530      	adds	r5, #48	; 0x30
   881ea:	2801      	cmp	r0, #1
   881ec:	7015      	strb	r5, [r2, #0]
   881ee:	460f      	mov	r7, r1
   881f0:	f102 0501 	add.w	r5, r2, #1
   881f4:	d026      	beq.n	88244 <_dtoa_r+0xcb4>
   881f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   881f8:	9a04      	ldr	r2, [sp, #16]
   881fa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   881fe:	4413      	add	r3, r2
   88200:	f04f 0a00 	mov.w	sl, #0
   88204:	4699      	mov	r9, r3
   88206:	f8df b130 	ldr.w	fp, [pc, #304]	; 88338 <_dtoa_r+0xda8>
   8820a:	4652      	mov	r2, sl
   8820c:	465b      	mov	r3, fp
   8820e:	4630      	mov	r0, r6
   88210:	4639      	mov	r1, r7
   88212:	f001 fd47 	bl	89ca4 <__aeabi_dmul>
   88216:	460f      	mov	r7, r1
   88218:	4606      	mov	r6, r0
   8821a:	f001 fff3 	bl	8a204 <__aeabi_d2iz>
   8821e:	4680      	mov	r8, r0
   88220:	f001 fcda 	bl	89bd8 <__aeabi_i2d>
   88224:	4602      	mov	r2, r0
   88226:	460b      	mov	r3, r1
   88228:	4630      	mov	r0, r6
   8822a:	4639      	mov	r1, r7
   8822c:	f001 fb86 	bl	8993c <__aeabi_dsub>
   88230:	f108 0830 	add.w	r8, r8, #48	; 0x30
   88234:	f805 8b01 	strb.w	r8, [r5], #1
   88238:	454d      	cmp	r5, r9
   8823a:	4606      	mov	r6, r0
   8823c:	460f      	mov	r7, r1
   8823e:	d1e4      	bne.n	8820a <_dtoa_r+0xc7a>
   88240:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   88244:	2200      	movs	r2, #0
   88246:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8824a:	4b3a      	ldr	r3, [pc, #232]	; (88334 <_dtoa_r+0xda4>)
   8824c:	f001 fb78 	bl	89940 <__adddf3>
   88250:	4632      	mov	r2, r6
   88252:	463b      	mov	r3, r7
   88254:	f001 ff98 	bl	8a188 <__aeabi_dcmplt>
   88258:	2800      	cmp	r0, #0
   8825a:	d046      	beq.n	882ea <_dtoa_r+0xd5a>
   8825c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8825e:	9302      	str	r3, [sp, #8]
   88260:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   88264:	f7ff bb42 	b.w	878ec <_dtoa_r+0x35c>
   88268:	f04f 0800 	mov.w	r8, #0
   8826c:	4646      	mov	r6, r8
   8826e:	e6a8      	b.n	87fc2 <_dtoa_r+0xa32>
   88270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88272:	9a07      	ldr	r2, [sp, #28]
   88274:	1a9d      	subs	r5, r3, r2
   88276:	2300      	movs	r3, #0
   88278:	f7ff bb70 	b.w	8795c <_dtoa_r+0x3cc>
   8827c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8827e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   88280:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   88284:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   88286:	f7ff bb69 	b.w	8795c <_dtoa_r+0x3cc>
   8828a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8828e:	f04f 0a02 	mov.w	sl, #2
   88292:	e56d      	b.n	87d70 <_dtoa_r+0x7e0>
   88294:	9b07      	ldr	r3, [sp, #28]
   88296:	2b00      	cmp	r3, #0
   88298:	f43f aeb8 	beq.w	8800c <_dtoa_r+0xa7c>
   8829c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8829e:	2b00      	cmp	r3, #0
   882a0:	f77f aede 	ble.w	88060 <_dtoa_r+0xad0>
   882a4:	2200      	movs	r2, #0
   882a6:	4b24      	ldr	r3, [pc, #144]	; (88338 <_dtoa_r+0xda8>)
   882a8:	4638      	mov	r0, r7
   882aa:	4641      	mov	r1, r8
   882ac:	f001 fcfa 	bl	89ca4 <__aeabi_dmul>
   882b0:	4607      	mov	r7, r0
   882b2:	4688      	mov	r8, r1
   882b4:	f10a 0001 	add.w	r0, sl, #1
   882b8:	f001 fc8e 	bl	89bd8 <__aeabi_i2d>
   882bc:	463a      	mov	r2, r7
   882be:	4643      	mov	r3, r8
   882c0:	f001 fcf0 	bl	89ca4 <__aeabi_dmul>
   882c4:	2200      	movs	r2, #0
   882c6:	4b17      	ldr	r3, [pc, #92]	; (88324 <_dtoa_r+0xd94>)
   882c8:	f001 fb3a 	bl	89940 <__adddf3>
   882cc:	9a02      	ldr	r2, [sp, #8]
   882ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   882d0:	3a01      	subs	r2, #1
   882d2:	4605      	mov	r5, r0
   882d4:	9215      	str	r2, [sp, #84]	; 0x54
   882d6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   882da:	9312      	str	r3, [sp, #72]	; 0x48
   882dc:	e569      	b.n	87db2 <_dtoa_r+0x822>
   882de:	2239      	movs	r2, #57	; 0x39
   882e0:	46b3      	mov	fp, r6
   882e2:	703a      	strb	r2, [r7, #0]
   882e4:	9e08      	ldr	r6, [sp, #32]
   882e6:	1c7d      	adds	r5, r7, #1
   882e8:	e4bf      	b.n	87c6a <_dtoa_r+0x6da>
   882ea:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   882ee:	2000      	movs	r0, #0
   882f0:	4910      	ldr	r1, [pc, #64]	; (88334 <_dtoa_r+0xda4>)
   882f2:	f001 fb23 	bl	8993c <__aeabi_dsub>
   882f6:	4632      	mov	r2, r6
   882f8:	463b      	mov	r3, r7
   882fa:	f001 ff63 	bl	8a1c4 <__aeabi_dcmpgt>
   882fe:	b908      	cbnz	r0, 88304 <_dtoa_r+0xd74>
   88300:	e6ae      	b.n	88060 <_dtoa_r+0xad0>
   88302:	4615      	mov	r5, r2
   88304:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   88308:	1e6a      	subs	r2, r5, #1
   8830a:	2b30      	cmp	r3, #48	; 0x30
   8830c:	d0f9      	beq.n	88302 <_dtoa_r+0xd72>
   8830e:	e5d7      	b.n	87ec0 <_dtoa_r+0x930>
   88310:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   88314:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88316:	9302      	str	r3, [sp, #8]
   88318:	f7ff bae8 	b.w	878ec <_dtoa_r+0x35c>
   8831c:	970c      	str	r7, [sp, #48]	; 0x30
   8831e:	f7ff bba7 	b.w	87a70 <_dtoa_r+0x4e0>
   88322:	bf00      	nop
   88324:	401c0000 	.word	0x401c0000
   88328:	40140000 	.word	0x40140000
   8832c:	0008aa18 	.word	0x0008aa18
   88330:	0008a9f0 	.word	0x0008a9f0
   88334:	3fe00000 	.word	0x3fe00000
   88338:	40240000 	.word	0x40240000
   8833c:	2b39      	cmp	r3, #57	; 0x39
   8833e:	f8cd b020 	str.w	fp, [sp, #32]
   88342:	46d0      	mov	r8, sl
   88344:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88348:	469a      	mov	sl, r3
   8834a:	d0c8      	beq.n	882de <_dtoa_r+0xd4e>
   8834c:	f1bb 0f00 	cmp.w	fp, #0
   88350:	f73f aec0 	bgt.w	880d4 <_dtoa_r+0xb44>
   88354:	e6c0      	b.n	880d8 <_dtoa_r+0xb48>
   88356:	f47f aebf 	bne.w	880d8 <_dtoa_r+0xb48>
   8835a:	f01a 0f01 	tst.w	sl, #1
   8835e:	f43f aebb 	beq.w	880d8 <_dtoa_r+0xb48>
   88362:	e6b3      	b.n	880cc <_dtoa_r+0xb3c>
   88364:	f04f 0800 	mov.w	r8, #0
   88368:	4646      	mov	r6, r8
   8836a:	e5e8      	b.n	87f3e <_dtoa_r+0x9ae>
   8836c:	4631      	mov	r1, r6
   8836e:	2300      	movs	r3, #0
   88370:	220a      	movs	r2, #10
   88372:	4620      	mov	r0, r4
   88374:	f000 fd2e 	bl	88dd4 <__multadd>
   88378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8837a:	4606      	mov	r6, r0
   8837c:	2b00      	cmp	r3, #0
   8837e:	dd07      	ble.n	88390 <_dtoa_r+0xe00>
   88380:	9307      	str	r3, [sp, #28]
   88382:	f7ff bbab 	b.w	87adc <_dtoa_r+0x54c>
   88386:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88388:	2b02      	cmp	r3, #2
   8838a:	dc1f      	bgt.n	883cc <_dtoa_r+0xe3c>
   8838c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8838e:	e43c      	b.n	87c0a <_dtoa_r+0x67a>
   88390:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88392:	2b02      	cmp	r3, #2
   88394:	dc1a      	bgt.n	883cc <_dtoa_r+0xe3c>
   88396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88398:	e7f2      	b.n	88380 <_dtoa_r+0xdf0>
   8839a:	f43f ab81 	beq.w	87aa0 <_dtoa_r+0x510>
   8839e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   883a2:	e411      	b.n	87bc8 <_dtoa_r+0x638>
   883a4:	2500      	movs	r5, #0
   883a6:	4620      	mov	r0, r4
   883a8:	6465      	str	r5, [r4, #68]	; 0x44
   883aa:	4629      	mov	r1, r5
   883ac:	f000 fce2 	bl	88d74 <_Balloc>
   883b0:	f04f 33ff 	mov.w	r3, #4294967295
   883b4:	9307      	str	r3, [sp, #28]
   883b6:	930f      	str	r3, [sp, #60]	; 0x3c
   883b8:	2301      	movs	r3, #1
   883ba:	9004      	str	r0, [sp, #16]
   883bc:	9525      	str	r5, [sp, #148]	; 0x94
   883be:	6420      	str	r0, [r4, #64]	; 0x40
   883c0:	930b      	str	r3, [sp, #44]	; 0x2c
   883c2:	f7ff b9e0 	b.w	87786 <_dtoa_r+0x1f6>
   883c6:	2501      	movs	r5, #1
   883c8:	f7ff b9a8 	b.w	8771c <_dtoa_r+0x18c>
   883cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   883ce:	9307      	str	r3, [sp, #28]
   883d0:	e5e8      	b.n	87fa4 <_dtoa_r+0xa14>
   883d2:	bf00      	nop

000883d4 <__libc_fini_array>:
   883d4:	b538      	push	{r3, r4, r5, lr}
   883d6:	4c0a      	ldr	r4, [pc, #40]	; (88400 <__libc_fini_array+0x2c>)
   883d8:	4d0a      	ldr	r5, [pc, #40]	; (88404 <__libc_fini_array+0x30>)
   883da:	1b64      	subs	r4, r4, r5
   883dc:	10a4      	asrs	r4, r4, #2
   883de:	d00a      	beq.n	883f6 <__libc_fini_array+0x22>
   883e0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   883e4:	3b01      	subs	r3, #1
   883e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   883ea:	3c01      	subs	r4, #1
   883ec:	f855 3904 	ldr.w	r3, [r5], #-4
   883f0:	4798      	blx	r3
   883f2:	2c00      	cmp	r4, #0
   883f4:	d1f9      	bne.n	883ea <__libc_fini_array+0x16>
   883f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   883fa:	f002 bc03 	b.w	8ac04 <_fini>
   883fe:	bf00      	nop
   88400:	0008ac14 	.word	0x0008ac14
   88404:	0008ac10 	.word	0x0008ac10

00088408 <_malloc_trim_r>:
   88408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8840a:	460c      	mov	r4, r1
   8840c:	4f23      	ldr	r7, [pc, #140]	; (8849c <_malloc_trim_r+0x94>)
   8840e:	4606      	mov	r6, r0
   88410:	f000 fca4 	bl	88d5c <__malloc_lock>
   88414:	68bb      	ldr	r3, [r7, #8]
   88416:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8841a:	685d      	ldr	r5, [r3, #4]
   8841c:	310f      	adds	r1, #15
   8841e:	f025 0503 	bic.w	r5, r5, #3
   88422:	4429      	add	r1, r5
   88424:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88428:	f021 010f 	bic.w	r1, r1, #15
   8842c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88430:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88434:	db07      	blt.n	88446 <_malloc_trim_r+0x3e>
   88436:	2100      	movs	r1, #0
   88438:	4630      	mov	r0, r6
   8843a:	f001 f94d 	bl	896d8 <_sbrk_r>
   8843e:	68bb      	ldr	r3, [r7, #8]
   88440:	442b      	add	r3, r5
   88442:	4298      	cmp	r0, r3
   88444:	d004      	beq.n	88450 <_malloc_trim_r+0x48>
   88446:	4630      	mov	r0, r6
   88448:	f000 fc8e 	bl	88d68 <__malloc_unlock>
   8844c:	2000      	movs	r0, #0
   8844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88450:	4261      	negs	r1, r4
   88452:	4630      	mov	r0, r6
   88454:	f001 f940 	bl	896d8 <_sbrk_r>
   88458:	3001      	adds	r0, #1
   8845a:	d00d      	beq.n	88478 <_malloc_trim_r+0x70>
   8845c:	4b10      	ldr	r3, [pc, #64]	; (884a0 <_malloc_trim_r+0x98>)
   8845e:	68ba      	ldr	r2, [r7, #8]
   88460:	6819      	ldr	r1, [r3, #0]
   88462:	1b2d      	subs	r5, r5, r4
   88464:	f045 0501 	orr.w	r5, r5, #1
   88468:	4630      	mov	r0, r6
   8846a:	1b09      	subs	r1, r1, r4
   8846c:	6055      	str	r5, [r2, #4]
   8846e:	6019      	str	r1, [r3, #0]
   88470:	f000 fc7a 	bl	88d68 <__malloc_unlock>
   88474:	2001      	movs	r0, #1
   88476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88478:	2100      	movs	r1, #0
   8847a:	4630      	mov	r0, r6
   8847c:	f001 f92c 	bl	896d8 <_sbrk_r>
   88480:	68ba      	ldr	r2, [r7, #8]
   88482:	1a83      	subs	r3, r0, r2
   88484:	2b0f      	cmp	r3, #15
   88486:	ddde      	ble.n	88446 <_malloc_trim_r+0x3e>
   88488:	4c06      	ldr	r4, [pc, #24]	; (884a4 <_malloc_trim_r+0x9c>)
   8848a:	4905      	ldr	r1, [pc, #20]	; (884a0 <_malloc_trim_r+0x98>)
   8848c:	6824      	ldr	r4, [r4, #0]
   8848e:	f043 0301 	orr.w	r3, r3, #1
   88492:	1b00      	subs	r0, r0, r4
   88494:	6053      	str	r3, [r2, #4]
   88496:	6008      	str	r0, [r1, #0]
   88498:	e7d5      	b.n	88446 <_malloc_trim_r+0x3e>
   8849a:	bf00      	nop
   8849c:	20070848 	.word	0x20070848
   884a0:	200758cc 	.word	0x200758cc
   884a4:	20070c50 	.word	0x20070c50

000884a8 <_free_r>:
   884a8:	2900      	cmp	r1, #0
   884aa:	d044      	beq.n	88536 <_free_r+0x8e>
   884ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   884b0:	460d      	mov	r5, r1
   884b2:	4680      	mov	r8, r0
   884b4:	f000 fc52 	bl	88d5c <__malloc_lock>
   884b8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   884bc:	4969      	ldr	r1, [pc, #420]	; (88664 <_free_r+0x1bc>)
   884be:	f1a5 0408 	sub.w	r4, r5, #8
   884c2:	f027 0301 	bic.w	r3, r7, #1
   884c6:	18e2      	adds	r2, r4, r3
   884c8:	688e      	ldr	r6, [r1, #8]
   884ca:	6850      	ldr	r0, [r2, #4]
   884cc:	42b2      	cmp	r2, r6
   884ce:	f020 0003 	bic.w	r0, r0, #3
   884d2:	d05e      	beq.n	88592 <_free_r+0xea>
   884d4:	07fe      	lsls	r6, r7, #31
   884d6:	6050      	str	r0, [r2, #4]
   884d8:	d40b      	bmi.n	884f2 <_free_r+0x4a>
   884da:	f855 7c08 	ldr.w	r7, [r5, #-8]
   884de:	f101 0e08 	add.w	lr, r1, #8
   884e2:	1be4      	subs	r4, r4, r7
   884e4:	68a5      	ldr	r5, [r4, #8]
   884e6:	443b      	add	r3, r7
   884e8:	4575      	cmp	r5, lr
   884ea:	d06d      	beq.n	885c8 <_free_r+0x120>
   884ec:	68e7      	ldr	r7, [r4, #12]
   884ee:	60ef      	str	r7, [r5, #12]
   884f0:	60bd      	str	r5, [r7, #8]
   884f2:	1815      	adds	r5, r2, r0
   884f4:	686d      	ldr	r5, [r5, #4]
   884f6:	07ed      	lsls	r5, r5, #31
   884f8:	d53e      	bpl.n	88578 <_free_r+0xd0>
   884fa:	f043 0201 	orr.w	r2, r3, #1
   884fe:	6062      	str	r2, [r4, #4]
   88500:	50e3      	str	r3, [r4, r3]
   88502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88506:	d217      	bcs.n	88538 <_free_r+0x90>
   88508:	2201      	movs	r2, #1
   8850a:	08db      	lsrs	r3, r3, #3
   8850c:	1098      	asrs	r0, r3, #2
   8850e:	684d      	ldr	r5, [r1, #4]
   88510:	4413      	add	r3, r2
   88512:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   88516:	4082      	lsls	r2, r0
   88518:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8851c:	432a      	orrs	r2, r5
   8851e:	3808      	subs	r0, #8
   88520:	60e0      	str	r0, [r4, #12]
   88522:	60a7      	str	r7, [r4, #8]
   88524:	604a      	str	r2, [r1, #4]
   88526:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8852a:	60fc      	str	r4, [r7, #12]
   8852c:	4640      	mov	r0, r8
   8852e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88532:	f000 bc19 	b.w	88d68 <__malloc_unlock>
   88536:	4770      	bx	lr
   88538:	0a5a      	lsrs	r2, r3, #9
   8853a:	2a04      	cmp	r2, #4
   8853c:	d852      	bhi.n	885e4 <_free_r+0x13c>
   8853e:	099a      	lsrs	r2, r3, #6
   88540:	f102 0739 	add.w	r7, r2, #57	; 0x39
   88544:	00ff      	lsls	r7, r7, #3
   88546:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8854a:	19c8      	adds	r0, r1, r7
   8854c:	59ca      	ldr	r2, [r1, r7]
   8854e:	3808      	subs	r0, #8
   88550:	4290      	cmp	r0, r2
   88552:	d04f      	beq.n	885f4 <_free_r+0x14c>
   88554:	6851      	ldr	r1, [r2, #4]
   88556:	f021 0103 	bic.w	r1, r1, #3
   8855a:	428b      	cmp	r3, r1
   8855c:	d232      	bcs.n	885c4 <_free_r+0x11c>
   8855e:	6892      	ldr	r2, [r2, #8]
   88560:	4290      	cmp	r0, r2
   88562:	d1f7      	bne.n	88554 <_free_r+0xac>
   88564:	68c3      	ldr	r3, [r0, #12]
   88566:	60a0      	str	r0, [r4, #8]
   88568:	60e3      	str	r3, [r4, #12]
   8856a:	609c      	str	r4, [r3, #8]
   8856c:	60c4      	str	r4, [r0, #12]
   8856e:	4640      	mov	r0, r8
   88570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   88574:	f000 bbf8 	b.w	88d68 <__malloc_unlock>
   88578:	6895      	ldr	r5, [r2, #8]
   8857a:	4f3b      	ldr	r7, [pc, #236]	; (88668 <_free_r+0x1c0>)
   8857c:	4403      	add	r3, r0
   8857e:	42bd      	cmp	r5, r7
   88580:	d040      	beq.n	88604 <_free_r+0x15c>
   88582:	68d0      	ldr	r0, [r2, #12]
   88584:	f043 0201 	orr.w	r2, r3, #1
   88588:	60e8      	str	r0, [r5, #12]
   8858a:	6085      	str	r5, [r0, #8]
   8858c:	6062      	str	r2, [r4, #4]
   8858e:	50e3      	str	r3, [r4, r3]
   88590:	e7b7      	b.n	88502 <_free_r+0x5a>
   88592:	07ff      	lsls	r7, r7, #31
   88594:	4403      	add	r3, r0
   88596:	d407      	bmi.n	885a8 <_free_r+0x100>
   88598:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8859c:	1b64      	subs	r4, r4, r5
   8859e:	68e2      	ldr	r2, [r4, #12]
   885a0:	68a0      	ldr	r0, [r4, #8]
   885a2:	442b      	add	r3, r5
   885a4:	60c2      	str	r2, [r0, #12]
   885a6:	6090      	str	r0, [r2, #8]
   885a8:	4a30      	ldr	r2, [pc, #192]	; (8866c <_free_r+0x1c4>)
   885aa:	f043 0001 	orr.w	r0, r3, #1
   885ae:	6812      	ldr	r2, [r2, #0]
   885b0:	6060      	str	r0, [r4, #4]
   885b2:	4293      	cmp	r3, r2
   885b4:	608c      	str	r4, [r1, #8]
   885b6:	d3b9      	bcc.n	8852c <_free_r+0x84>
   885b8:	4b2d      	ldr	r3, [pc, #180]	; (88670 <_free_r+0x1c8>)
   885ba:	4640      	mov	r0, r8
   885bc:	6819      	ldr	r1, [r3, #0]
   885be:	f7ff ff23 	bl	88408 <_malloc_trim_r>
   885c2:	e7b3      	b.n	8852c <_free_r+0x84>
   885c4:	4610      	mov	r0, r2
   885c6:	e7cd      	b.n	88564 <_free_r+0xbc>
   885c8:	1811      	adds	r1, r2, r0
   885ca:	6849      	ldr	r1, [r1, #4]
   885cc:	07c9      	lsls	r1, r1, #31
   885ce:	d444      	bmi.n	8865a <_free_r+0x1b2>
   885d0:	6891      	ldr	r1, [r2, #8]
   885d2:	4403      	add	r3, r0
   885d4:	68d2      	ldr	r2, [r2, #12]
   885d6:	f043 0001 	orr.w	r0, r3, #1
   885da:	60ca      	str	r2, [r1, #12]
   885dc:	6091      	str	r1, [r2, #8]
   885de:	6060      	str	r0, [r4, #4]
   885e0:	50e3      	str	r3, [r4, r3]
   885e2:	e7a3      	b.n	8852c <_free_r+0x84>
   885e4:	2a14      	cmp	r2, #20
   885e6:	d816      	bhi.n	88616 <_free_r+0x16e>
   885e8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   885ec:	00ff      	lsls	r7, r7, #3
   885ee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   885f2:	e7aa      	b.n	8854a <_free_r+0xa2>
   885f4:	2301      	movs	r3, #1
   885f6:	10aa      	asrs	r2, r5, #2
   885f8:	684d      	ldr	r5, [r1, #4]
   885fa:	4093      	lsls	r3, r2
   885fc:	432b      	orrs	r3, r5
   885fe:	604b      	str	r3, [r1, #4]
   88600:	4603      	mov	r3, r0
   88602:	e7b0      	b.n	88566 <_free_r+0xbe>
   88604:	f043 0201 	orr.w	r2, r3, #1
   88608:	614c      	str	r4, [r1, #20]
   8860a:	610c      	str	r4, [r1, #16]
   8860c:	60e5      	str	r5, [r4, #12]
   8860e:	60a5      	str	r5, [r4, #8]
   88610:	6062      	str	r2, [r4, #4]
   88612:	50e3      	str	r3, [r4, r3]
   88614:	e78a      	b.n	8852c <_free_r+0x84>
   88616:	2a54      	cmp	r2, #84	; 0x54
   88618:	d806      	bhi.n	88628 <_free_r+0x180>
   8861a:	0b1a      	lsrs	r2, r3, #12
   8861c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88620:	00ff      	lsls	r7, r7, #3
   88622:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   88626:	e790      	b.n	8854a <_free_r+0xa2>
   88628:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8862c:	d806      	bhi.n	8863c <_free_r+0x194>
   8862e:	0bda      	lsrs	r2, r3, #15
   88630:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88634:	00ff      	lsls	r7, r7, #3
   88636:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8863a:	e786      	b.n	8854a <_free_r+0xa2>
   8863c:	f240 5054 	movw	r0, #1364	; 0x554
   88640:	4282      	cmp	r2, r0
   88642:	d806      	bhi.n	88652 <_free_r+0x1aa>
   88644:	0c9a      	lsrs	r2, r3, #18
   88646:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8864a:	00ff      	lsls	r7, r7, #3
   8864c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   88650:	e77b      	b.n	8854a <_free_r+0xa2>
   88652:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88656:	257e      	movs	r5, #126	; 0x7e
   88658:	e777      	b.n	8854a <_free_r+0xa2>
   8865a:	f043 0101 	orr.w	r1, r3, #1
   8865e:	6061      	str	r1, [r4, #4]
   88660:	6013      	str	r3, [r2, #0]
   88662:	e763      	b.n	8852c <_free_r+0x84>
   88664:	20070848 	.word	0x20070848
   88668:	20070850 	.word	0x20070850
   8866c:	20070c54 	.word	0x20070c54
   88670:	200758fc 	.word	0x200758fc

00088674 <_localeconv_r>:
   88674:	4a04      	ldr	r2, [pc, #16]	; (88688 <_localeconv_r+0x14>)
   88676:	4b05      	ldr	r3, [pc, #20]	; (8868c <_localeconv_r+0x18>)
   88678:	6812      	ldr	r2, [r2, #0]
   8867a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8867c:	2800      	cmp	r0, #0
   8867e:	bf08      	it	eq
   88680:	4618      	moveq	r0, r3
   88682:	30f0      	adds	r0, #240	; 0xf0
   88684:	4770      	bx	lr
   88686:	bf00      	nop
   88688:	200702a8 	.word	0x200702a8
   8868c:	200706dc 	.word	0x200706dc

00088690 <__retarget_lock_acquire_recursive>:
   88690:	4770      	bx	lr
   88692:	bf00      	nop

00088694 <__retarget_lock_release_recursive>:
   88694:	4770      	bx	lr
   88696:	bf00      	nop

00088698 <_malloc_r>:
   88698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8869c:	f101 060b 	add.w	r6, r1, #11
   886a0:	2e16      	cmp	r6, #22
   886a2:	b083      	sub	sp, #12
   886a4:	4605      	mov	r5, r0
   886a6:	f240 809e 	bls.w	887e6 <_malloc_r+0x14e>
   886aa:	f036 0607 	bics.w	r6, r6, #7
   886ae:	f100 80bd 	bmi.w	8882c <_malloc_r+0x194>
   886b2:	42b1      	cmp	r1, r6
   886b4:	f200 80ba 	bhi.w	8882c <_malloc_r+0x194>
   886b8:	f000 fb50 	bl	88d5c <__malloc_lock>
   886bc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   886c0:	f0c0 8285 	bcc.w	88bce <_malloc_r+0x536>
   886c4:	0a73      	lsrs	r3, r6, #9
   886c6:	f000 80b8 	beq.w	8883a <_malloc_r+0x1a2>
   886ca:	2b04      	cmp	r3, #4
   886cc:	f200 816c 	bhi.w	889a8 <_malloc_r+0x310>
   886d0:	09b3      	lsrs	r3, r6, #6
   886d2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   886d6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   886da:	00c1      	lsls	r1, r0, #3
   886dc:	4fb8      	ldr	r7, [pc, #736]	; (889c0 <_malloc_r+0x328>)
   886de:	4439      	add	r1, r7
   886e0:	684c      	ldr	r4, [r1, #4]
   886e2:	3908      	subs	r1, #8
   886e4:	42a1      	cmp	r1, r4
   886e6:	d106      	bne.n	886f6 <_malloc_r+0x5e>
   886e8:	e00c      	b.n	88704 <_malloc_r+0x6c>
   886ea:	2a00      	cmp	r2, #0
   886ec:	f280 80ab 	bge.w	88846 <_malloc_r+0x1ae>
   886f0:	68e4      	ldr	r4, [r4, #12]
   886f2:	42a1      	cmp	r1, r4
   886f4:	d006      	beq.n	88704 <_malloc_r+0x6c>
   886f6:	6863      	ldr	r3, [r4, #4]
   886f8:	f023 0303 	bic.w	r3, r3, #3
   886fc:	1b9a      	subs	r2, r3, r6
   886fe:	2a0f      	cmp	r2, #15
   88700:	ddf3      	ble.n	886ea <_malloc_r+0x52>
   88702:	4670      	mov	r0, lr
   88704:	693c      	ldr	r4, [r7, #16]
   88706:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 889d4 <_malloc_r+0x33c>
   8870a:	4574      	cmp	r4, lr
   8870c:	f000 819e 	beq.w	88a4c <_malloc_r+0x3b4>
   88710:	6863      	ldr	r3, [r4, #4]
   88712:	f023 0303 	bic.w	r3, r3, #3
   88716:	1b9a      	subs	r2, r3, r6
   88718:	2a0f      	cmp	r2, #15
   8871a:	f300 8183 	bgt.w	88a24 <_malloc_r+0x38c>
   8871e:	2a00      	cmp	r2, #0
   88720:	f8c7 e014 	str.w	lr, [r7, #20]
   88724:	f8c7 e010 	str.w	lr, [r7, #16]
   88728:	f280 8091 	bge.w	8884e <_malloc_r+0x1b6>
   8872c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88730:	f080 8154 	bcs.w	889dc <_malloc_r+0x344>
   88734:	2201      	movs	r2, #1
   88736:	08db      	lsrs	r3, r3, #3
   88738:	6879      	ldr	r1, [r7, #4]
   8873a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8873e:	4413      	add	r3, r2
   88740:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   88744:	fa02 f20c 	lsl.w	r2, r2, ip
   88748:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8874c:	430a      	orrs	r2, r1
   8874e:	f1ac 0108 	sub.w	r1, ip, #8
   88752:	60e1      	str	r1, [r4, #12]
   88754:	f8c4 8008 	str.w	r8, [r4, #8]
   88758:	607a      	str	r2, [r7, #4]
   8875a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8875e:	f8c8 400c 	str.w	r4, [r8, #12]
   88762:	2401      	movs	r4, #1
   88764:	1083      	asrs	r3, r0, #2
   88766:	409c      	lsls	r4, r3
   88768:	4294      	cmp	r4, r2
   8876a:	d87d      	bhi.n	88868 <_malloc_r+0x1d0>
   8876c:	4214      	tst	r4, r2
   8876e:	d106      	bne.n	8877e <_malloc_r+0xe6>
   88770:	f020 0003 	bic.w	r0, r0, #3
   88774:	0064      	lsls	r4, r4, #1
   88776:	4214      	tst	r4, r2
   88778:	f100 0004 	add.w	r0, r0, #4
   8877c:	d0fa      	beq.n	88774 <_malloc_r+0xdc>
   8877e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   88782:	46cc      	mov	ip, r9
   88784:	4680      	mov	r8, r0
   88786:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8878a:	459c      	cmp	ip, r3
   8878c:	d107      	bne.n	8879e <_malloc_r+0x106>
   8878e:	e15f      	b.n	88a50 <_malloc_r+0x3b8>
   88790:	2a00      	cmp	r2, #0
   88792:	f280 816d 	bge.w	88a70 <_malloc_r+0x3d8>
   88796:	68db      	ldr	r3, [r3, #12]
   88798:	459c      	cmp	ip, r3
   8879a:	f000 8159 	beq.w	88a50 <_malloc_r+0x3b8>
   8879e:	6859      	ldr	r1, [r3, #4]
   887a0:	f021 0103 	bic.w	r1, r1, #3
   887a4:	1b8a      	subs	r2, r1, r6
   887a6:	2a0f      	cmp	r2, #15
   887a8:	ddf2      	ble.n	88790 <_malloc_r+0xf8>
   887aa:	68dc      	ldr	r4, [r3, #12]
   887ac:	f8d3 c008 	ldr.w	ip, [r3, #8]
   887b0:	f046 0801 	orr.w	r8, r6, #1
   887b4:	4628      	mov	r0, r5
   887b6:	441e      	add	r6, r3
   887b8:	f042 0501 	orr.w	r5, r2, #1
   887bc:	f8c3 8004 	str.w	r8, [r3, #4]
   887c0:	f8cc 400c 	str.w	r4, [ip, #12]
   887c4:	f8c4 c008 	str.w	ip, [r4, #8]
   887c8:	617e      	str	r6, [r7, #20]
   887ca:	613e      	str	r6, [r7, #16]
   887cc:	f8c6 e00c 	str.w	lr, [r6, #12]
   887d0:	f8c6 e008 	str.w	lr, [r6, #8]
   887d4:	6075      	str	r5, [r6, #4]
   887d6:	505a      	str	r2, [r3, r1]
   887d8:	9300      	str	r3, [sp, #0]
   887da:	f000 fac5 	bl	88d68 <__malloc_unlock>
   887de:	9b00      	ldr	r3, [sp, #0]
   887e0:	f103 0408 	add.w	r4, r3, #8
   887e4:	e01e      	b.n	88824 <_malloc_r+0x18c>
   887e6:	2910      	cmp	r1, #16
   887e8:	d820      	bhi.n	8882c <_malloc_r+0x194>
   887ea:	f000 fab7 	bl	88d5c <__malloc_lock>
   887ee:	2610      	movs	r6, #16
   887f0:	2318      	movs	r3, #24
   887f2:	2002      	movs	r0, #2
   887f4:	4f72      	ldr	r7, [pc, #456]	; (889c0 <_malloc_r+0x328>)
   887f6:	443b      	add	r3, r7
   887f8:	685c      	ldr	r4, [r3, #4]
   887fa:	f1a3 0208 	sub.w	r2, r3, #8
   887fe:	4294      	cmp	r4, r2
   88800:	f000 812f 	beq.w	88a62 <_malloc_r+0x3ca>
   88804:	6863      	ldr	r3, [r4, #4]
   88806:	68e1      	ldr	r1, [r4, #12]
   88808:	f023 0303 	bic.w	r3, r3, #3
   8880c:	4423      	add	r3, r4
   8880e:	685a      	ldr	r2, [r3, #4]
   88810:	68a6      	ldr	r6, [r4, #8]
   88812:	f042 0201 	orr.w	r2, r2, #1
   88816:	60f1      	str	r1, [r6, #12]
   88818:	4628      	mov	r0, r5
   8881a:	608e      	str	r6, [r1, #8]
   8881c:	605a      	str	r2, [r3, #4]
   8881e:	f000 faa3 	bl	88d68 <__malloc_unlock>
   88822:	3408      	adds	r4, #8
   88824:	4620      	mov	r0, r4
   88826:	b003      	add	sp, #12
   88828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8882c:	2400      	movs	r4, #0
   8882e:	230c      	movs	r3, #12
   88830:	4620      	mov	r0, r4
   88832:	602b      	str	r3, [r5, #0]
   88834:	b003      	add	sp, #12
   88836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8883a:	2040      	movs	r0, #64	; 0x40
   8883c:	f44f 7100 	mov.w	r1, #512	; 0x200
   88840:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   88844:	e74a      	b.n	886dc <_malloc_r+0x44>
   88846:	4423      	add	r3, r4
   88848:	685a      	ldr	r2, [r3, #4]
   8884a:	68e1      	ldr	r1, [r4, #12]
   8884c:	e7e0      	b.n	88810 <_malloc_r+0x178>
   8884e:	4423      	add	r3, r4
   88850:	685a      	ldr	r2, [r3, #4]
   88852:	4628      	mov	r0, r5
   88854:	f042 0201 	orr.w	r2, r2, #1
   88858:	605a      	str	r2, [r3, #4]
   8885a:	3408      	adds	r4, #8
   8885c:	f000 fa84 	bl	88d68 <__malloc_unlock>
   88860:	4620      	mov	r0, r4
   88862:	b003      	add	sp, #12
   88864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88868:	68bc      	ldr	r4, [r7, #8]
   8886a:	6863      	ldr	r3, [r4, #4]
   8886c:	f023 0803 	bic.w	r8, r3, #3
   88870:	45b0      	cmp	r8, r6
   88872:	d304      	bcc.n	8887e <_malloc_r+0x1e6>
   88874:	eba8 0306 	sub.w	r3, r8, r6
   88878:	2b0f      	cmp	r3, #15
   8887a:	f300 8085 	bgt.w	88988 <_malloc_r+0x2f0>
   8887e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 889d8 <_malloc_r+0x340>
   88882:	4b50      	ldr	r3, [pc, #320]	; (889c4 <_malloc_r+0x32c>)
   88884:	f8d9 2000 	ldr.w	r2, [r9]
   88888:	681b      	ldr	r3, [r3, #0]
   8888a:	3201      	adds	r2, #1
   8888c:	4433      	add	r3, r6
   8888e:	eb04 0a08 	add.w	sl, r4, r8
   88892:	f000 8154 	beq.w	88b3e <_malloc_r+0x4a6>
   88896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8889a:	330f      	adds	r3, #15
   8889c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   888a0:	f02b 0b0f 	bic.w	fp, fp, #15
   888a4:	4659      	mov	r1, fp
   888a6:	4628      	mov	r0, r5
   888a8:	f000 ff16 	bl	896d8 <_sbrk_r>
   888ac:	1c41      	adds	r1, r0, #1
   888ae:	4602      	mov	r2, r0
   888b0:	f000 80fb 	beq.w	88aaa <_malloc_r+0x412>
   888b4:	4582      	cmp	sl, r0
   888b6:	f200 80f6 	bhi.w	88aa6 <_malloc_r+0x40e>
   888ba:	4b43      	ldr	r3, [pc, #268]	; (889c8 <_malloc_r+0x330>)
   888bc:	6819      	ldr	r1, [r3, #0]
   888be:	4459      	add	r1, fp
   888c0:	6019      	str	r1, [r3, #0]
   888c2:	f000 814c 	beq.w	88b5e <_malloc_r+0x4c6>
   888c6:	f8d9 0000 	ldr.w	r0, [r9]
   888ca:	3001      	adds	r0, #1
   888cc:	bf1b      	ittet	ne
   888ce:	eba2 0a0a 	subne.w	sl, r2, sl
   888d2:	4451      	addne	r1, sl
   888d4:	f8c9 2000 	streq.w	r2, [r9]
   888d8:	6019      	strne	r1, [r3, #0]
   888da:	f012 0107 	ands.w	r1, r2, #7
   888de:	f000 8114 	beq.w	88b0a <_malloc_r+0x472>
   888e2:	f1c1 0008 	rsb	r0, r1, #8
   888e6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   888ea:	4402      	add	r2, r0
   888ec:	3108      	adds	r1, #8
   888ee:	eb02 090b 	add.w	r9, r2, fp
   888f2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   888f6:	eba1 0909 	sub.w	r9, r1, r9
   888fa:	4649      	mov	r1, r9
   888fc:	4628      	mov	r0, r5
   888fe:	9301      	str	r3, [sp, #4]
   88900:	9200      	str	r2, [sp, #0]
   88902:	f000 fee9 	bl	896d8 <_sbrk_r>
   88906:	1c43      	adds	r3, r0, #1
   88908:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8890c:	f000 8142 	beq.w	88b94 <_malloc_r+0x4fc>
   88910:	1a80      	subs	r0, r0, r2
   88912:	4448      	add	r0, r9
   88914:	f040 0001 	orr.w	r0, r0, #1
   88918:	6819      	ldr	r1, [r3, #0]
   8891a:	42bc      	cmp	r4, r7
   8891c:	4449      	add	r1, r9
   8891e:	60ba      	str	r2, [r7, #8]
   88920:	6019      	str	r1, [r3, #0]
   88922:	6050      	str	r0, [r2, #4]
   88924:	d017      	beq.n	88956 <_malloc_r+0x2be>
   88926:	f1b8 0f0f 	cmp.w	r8, #15
   8892a:	f240 80fa 	bls.w	88b22 <_malloc_r+0x48a>
   8892e:	f04f 0c05 	mov.w	ip, #5
   88932:	6862      	ldr	r2, [r4, #4]
   88934:	f1a8 000c 	sub.w	r0, r8, #12
   88938:	f020 0007 	bic.w	r0, r0, #7
   8893c:	f002 0201 	and.w	r2, r2, #1
   88940:	eb04 0e00 	add.w	lr, r4, r0
   88944:	4302      	orrs	r2, r0
   88946:	280f      	cmp	r0, #15
   88948:	6062      	str	r2, [r4, #4]
   8894a:	f8ce c004 	str.w	ip, [lr, #4]
   8894e:	f8ce c008 	str.w	ip, [lr, #8]
   88952:	f200 8116 	bhi.w	88b82 <_malloc_r+0x4ea>
   88956:	4b1d      	ldr	r3, [pc, #116]	; (889cc <_malloc_r+0x334>)
   88958:	68bc      	ldr	r4, [r7, #8]
   8895a:	681a      	ldr	r2, [r3, #0]
   8895c:	4291      	cmp	r1, r2
   8895e:	bf88      	it	hi
   88960:	6019      	strhi	r1, [r3, #0]
   88962:	4b1b      	ldr	r3, [pc, #108]	; (889d0 <_malloc_r+0x338>)
   88964:	681a      	ldr	r2, [r3, #0]
   88966:	4291      	cmp	r1, r2
   88968:	6862      	ldr	r2, [r4, #4]
   8896a:	bf88      	it	hi
   8896c:	6019      	strhi	r1, [r3, #0]
   8896e:	f022 0203 	bic.w	r2, r2, #3
   88972:	4296      	cmp	r6, r2
   88974:	eba2 0306 	sub.w	r3, r2, r6
   88978:	d801      	bhi.n	8897e <_malloc_r+0x2e6>
   8897a:	2b0f      	cmp	r3, #15
   8897c:	dc04      	bgt.n	88988 <_malloc_r+0x2f0>
   8897e:	4628      	mov	r0, r5
   88980:	f000 f9f2 	bl	88d68 <__malloc_unlock>
   88984:	2400      	movs	r4, #0
   88986:	e74d      	b.n	88824 <_malloc_r+0x18c>
   88988:	f046 0201 	orr.w	r2, r6, #1
   8898c:	f043 0301 	orr.w	r3, r3, #1
   88990:	4426      	add	r6, r4
   88992:	6062      	str	r2, [r4, #4]
   88994:	4628      	mov	r0, r5
   88996:	60be      	str	r6, [r7, #8]
   88998:	3408      	adds	r4, #8
   8899a:	6073      	str	r3, [r6, #4]
   8899c:	f000 f9e4 	bl	88d68 <__malloc_unlock>
   889a0:	4620      	mov	r0, r4
   889a2:	b003      	add	sp, #12
   889a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   889a8:	2b14      	cmp	r3, #20
   889aa:	d970      	bls.n	88a8e <_malloc_r+0x3f6>
   889ac:	2b54      	cmp	r3, #84	; 0x54
   889ae:	f200 80a2 	bhi.w	88af6 <_malloc_r+0x45e>
   889b2:	0b33      	lsrs	r3, r6, #12
   889b4:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   889b8:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   889bc:	00c1      	lsls	r1, r0, #3
   889be:	e68d      	b.n	886dc <_malloc_r+0x44>
   889c0:	20070848 	.word	0x20070848
   889c4:	200758fc 	.word	0x200758fc
   889c8:	200758cc 	.word	0x200758cc
   889cc:	200758f4 	.word	0x200758f4
   889d0:	200758f8 	.word	0x200758f8
   889d4:	20070850 	.word	0x20070850
   889d8:	20070c50 	.word	0x20070c50
   889dc:	0a5a      	lsrs	r2, r3, #9
   889de:	2a04      	cmp	r2, #4
   889e0:	d95b      	bls.n	88a9a <_malloc_r+0x402>
   889e2:	2a14      	cmp	r2, #20
   889e4:	f200 80ae 	bhi.w	88b44 <_malloc_r+0x4ac>
   889e8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   889ec:	00c9      	lsls	r1, r1, #3
   889ee:	325b      	adds	r2, #91	; 0x5b
   889f0:	eb07 0c01 	add.w	ip, r7, r1
   889f4:	5879      	ldr	r1, [r7, r1]
   889f6:	f1ac 0c08 	sub.w	ip, ip, #8
   889fa:	458c      	cmp	ip, r1
   889fc:	f000 8088 	beq.w	88b10 <_malloc_r+0x478>
   88a00:	684a      	ldr	r2, [r1, #4]
   88a02:	f022 0203 	bic.w	r2, r2, #3
   88a06:	4293      	cmp	r3, r2
   88a08:	d273      	bcs.n	88af2 <_malloc_r+0x45a>
   88a0a:	6889      	ldr	r1, [r1, #8]
   88a0c:	458c      	cmp	ip, r1
   88a0e:	d1f7      	bne.n	88a00 <_malloc_r+0x368>
   88a10:	f8dc 300c 	ldr.w	r3, [ip, #12]
   88a14:	687a      	ldr	r2, [r7, #4]
   88a16:	60e3      	str	r3, [r4, #12]
   88a18:	f8c4 c008 	str.w	ip, [r4, #8]
   88a1c:	609c      	str	r4, [r3, #8]
   88a1e:	f8cc 400c 	str.w	r4, [ip, #12]
   88a22:	e69e      	b.n	88762 <_malloc_r+0xca>
   88a24:	f046 0c01 	orr.w	ip, r6, #1
   88a28:	f042 0101 	orr.w	r1, r2, #1
   88a2c:	4426      	add	r6, r4
   88a2e:	f8c4 c004 	str.w	ip, [r4, #4]
   88a32:	4628      	mov	r0, r5
   88a34:	617e      	str	r6, [r7, #20]
   88a36:	613e      	str	r6, [r7, #16]
   88a38:	f8c6 e00c 	str.w	lr, [r6, #12]
   88a3c:	f8c6 e008 	str.w	lr, [r6, #8]
   88a40:	6071      	str	r1, [r6, #4]
   88a42:	50e2      	str	r2, [r4, r3]
   88a44:	f000 f990 	bl	88d68 <__malloc_unlock>
   88a48:	3408      	adds	r4, #8
   88a4a:	e6eb      	b.n	88824 <_malloc_r+0x18c>
   88a4c:	687a      	ldr	r2, [r7, #4]
   88a4e:	e688      	b.n	88762 <_malloc_r+0xca>
   88a50:	f108 0801 	add.w	r8, r8, #1
   88a54:	f018 0f03 	tst.w	r8, #3
   88a58:	f10c 0c08 	add.w	ip, ip, #8
   88a5c:	f47f ae93 	bne.w	88786 <_malloc_r+0xee>
   88a60:	e02d      	b.n	88abe <_malloc_r+0x426>
   88a62:	68dc      	ldr	r4, [r3, #12]
   88a64:	42a3      	cmp	r3, r4
   88a66:	bf08      	it	eq
   88a68:	3002      	addeq	r0, #2
   88a6a:	f43f ae4b 	beq.w	88704 <_malloc_r+0x6c>
   88a6e:	e6c9      	b.n	88804 <_malloc_r+0x16c>
   88a70:	461c      	mov	r4, r3
   88a72:	4419      	add	r1, r3
   88a74:	684a      	ldr	r2, [r1, #4]
   88a76:	68db      	ldr	r3, [r3, #12]
   88a78:	f854 6f08 	ldr.w	r6, [r4, #8]!
   88a7c:	f042 0201 	orr.w	r2, r2, #1
   88a80:	604a      	str	r2, [r1, #4]
   88a82:	4628      	mov	r0, r5
   88a84:	60f3      	str	r3, [r6, #12]
   88a86:	609e      	str	r6, [r3, #8]
   88a88:	f000 f96e 	bl	88d68 <__malloc_unlock>
   88a8c:	e6ca      	b.n	88824 <_malloc_r+0x18c>
   88a8e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88a92:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   88a96:	00c1      	lsls	r1, r0, #3
   88a98:	e620      	b.n	886dc <_malloc_r+0x44>
   88a9a:	099a      	lsrs	r2, r3, #6
   88a9c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   88aa0:	00c9      	lsls	r1, r1, #3
   88aa2:	3238      	adds	r2, #56	; 0x38
   88aa4:	e7a4      	b.n	889f0 <_malloc_r+0x358>
   88aa6:	42bc      	cmp	r4, r7
   88aa8:	d054      	beq.n	88b54 <_malloc_r+0x4bc>
   88aaa:	68bc      	ldr	r4, [r7, #8]
   88aac:	6862      	ldr	r2, [r4, #4]
   88aae:	f022 0203 	bic.w	r2, r2, #3
   88ab2:	e75e      	b.n	88972 <_malloc_r+0x2da>
   88ab4:	f859 3908 	ldr.w	r3, [r9], #-8
   88ab8:	4599      	cmp	r9, r3
   88aba:	f040 8086 	bne.w	88bca <_malloc_r+0x532>
   88abe:	f010 0f03 	tst.w	r0, #3
   88ac2:	f100 30ff 	add.w	r0, r0, #4294967295
   88ac6:	d1f5      	bne.n	88ab4 <_malloc_r+0x41c>
   88ac8:	687b      	ldr	r3, [r7, #4]
   88aca:	ea23 0304 	bic.w	r3, r3, r4
   88ace:	607b      	str	r3, [r7, #4]
   88ad0:	0064      	lsls	r4, r4, #1
   88ad2:	429c      	cmp	r4, r3
   88ad4:	f63f aec8 	bhi.w	88868 <_malloc_r+0x1d0>
   88ad8:	2c00      	cmp	r4, #0
   88ada:	f43f aec5 	beq.w	88868 <_malloc_r+0x1d0>
   88ade:	421c      	tst	r4, r3
   88ae0:	4640      	mov	r0, r8
   88ae2:	f47f ae4c 	bne.w	8877e <_malloc_r+0xe6>
   88ae6:	0064      	lsls	r4, r4, #1
   88ae8:	421c      	tst	r4, r3
   88aea:	f100 0004 	add.w	r0, r0, #4
   88aee:	d0fa      	beq.n	88ae6 <_malloc_r+0x44e>
   88af0:	e645      	b.n	8877e <_malloc_r+0xe6>
   88af2:	468c      	mov	ip, r1
   88af4:	e78c      	b.n	88a10 <_malloc_r+0x378>
   88af6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88afa:	d815      	bhi.n	88b28 <_malloc_r+0x490>
   88afc:	0bf3      	lsrs	r3, r6, #15
   88afe:	f103 0078 	add.w	r0, r3, #120	; 0x78
   88b02:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   88b06:	00c1      	lsls	r1, r0, #3
   88b08:	e5e8      	b.n	886dc <_malloc_r+0x44>
   88b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   88b0e:	e6ee      	b.n	888ee <_malloc_r+0x256>
   88b10:	2101      	movs	r1, #1
   88b12:	687b      	ldr	r3, [r7, #4]
   88b14:	1092      	asrs	r2, r2, #2
   88b16:	fa01 f202 	lsl.w	r2, r1, r2
   88b1a:	431a      	orrs	r2, r3
   88b1c:	607a      	str	r2, [r7, #4]
   88b1e:	4663      	mov	r3, ip
   88b20:	e779      	b.n	88a16 <_malloc_r+0x37e>
   88b22:	2301      	movs	r3, #1
   88b24:	6053      	str	r3, [r2, #4]
   88b26:	e72a      	b.n	8897e <_malloc_r+0x2e6>
   88b28:	f240 5254 	movw	r2, #1364	; 0x554
   88b2c:	4293      	cmp	r3, r2
   88b2e:	d822      	bhi.n	88b76 <_malloc_r+0x4de>
   88b30:	0cb3      	lsrs	r3, r6, #18
   88b32:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88b36:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   88b3a:	00c1      	lsls	r1, r0, #3
   88b3c:	e5ce      	b.n	886dc <_malloc_r+0x44>
   88b3e:	f103 0b10 	add.w	fp, r3, #16
   88b42:	e6af      	b.n	888a4 <_malloc_r+0x20c>
   88b44:	2a54      	cmp	r2, #84	; 0x54
   88b46:	d829      	bhi.n	88b9c <_malloc_r+0x504>
   88b48:	0b1a      	lsrs	r2, r3, #12
   88b4a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   88b4e:	00c9      	lsls	r1, r1, #3
   88b50:	326e      	adds	r2, #110	; 0x6e
   88b52:	e74d      	b.n	889f0 <_malloc_r+0x358>
   88b54:	4b20      	ldr	r3, [pc, #128]	; (88bd8 <_malloc_r+0x540>)
   88b56:	6819      	ldr	r1, [r3, #0]
   88b58:	4459      	add	r1, fp
   88b5a:	6019      	str	r1, [r3, #0]
   88b5c:	e6b3      	b.n	888c6 <_malloc_r+0x22e>
   88b5e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   88b62:	2800      	cmp	r0, #0
   88b64:	f47f aeaf 	bne.w	888c6 <_malloc_r+0x22e>
   88b68:	eb08 030b 	add.w	r3, r8, fp
   88b6c:	68ba      	ldr	r2, [r7, #8]
   88b6e:	f043 0301 	orr.w	r3, r3, #1
   88b72:	6053      	str	r3, [r2, #4]
   88b74:	e6ef      	b.n	88956 <_malloc_r+0x2be>
   88b76:	207f      	movs	r0, #127	; 0x7f
   88b78:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88b7c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   88b80:	e5ac      	b.n	886dc <_malloc_r+0x44>
   88b82:	f104 0108 	add.w	r1, r4, #8
   88b86:	4628      	mov	r0, r5
   88b88:	9300      	str	r3, [sp, #0]
   88b8a:	f7ff fc8d 	bl	884a8 <_free_r>
   88b8e:	9b00      	ldr	r3, [sp, #0]
   88b90:	6819      	ldr	r1, [r3, #0]
   88b92:	e6e0      	b.n	88956 <_malloc_r+0x2be>
   88b94:	2001      	movs	r0, #1
   88b96:	f04f 0900 	mov.w	r9, #0
   88b9a:	e6bd      	b.n	88918 <_malloc_r+0x280>
   88b9c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88ba0:	d805      	bhi.n	88bae <_malloc_r+0x516>
   88ba2:	0bda      	lsrs	r2, r3, #15
   88ba4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   88ba8:	00c9      	lsls	r1, r1, #3
   88baa:	3277      	adds	r2, #119	; 0x77
   88bac:	e720      	b.n	889f0 <_malloc_r+0x358>
   88bae:	f240 5154 	movw	r1, #1364	; 0x554
   88bb2:	428a      	cmp	r2, r1
   88bb4:	d805      	bhi.n	88bc2 <_malloc_r+0x52a>
   88bb6:	0c9a      	lsrs	r2, r3, #18
   88bb8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   88bbc:	00c9      	lsls	r1, r1, #3
   88bbe:	327c      	adds	r2, #124	; 0x7c
   88bc0:	e716      	b.n	889f0 <_malloc_r+0x358>
   88bc2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   88bc6:	227e      	movs	r2, #126	; 0x7e
   88bc8:	e712      	b.n	889f0 <_malloc_r+0x358>
   88bca:	687b      	ldr	r3, [r7, #4]
   88bcc:	e780      	b.n	88ad0 <_malloc_r+0x438>
   88bce:	08f0      	lsrs	r0, r6, #3
   88bd0:	f106 0308 	add.w	r3, r6, #8
   88bd4:	e60e      	b.n	887f4 <_malloc_r+0x15c>
   88bd6:	bf00      	nop
   88bd8:	200758cc 	.word	0x200758cc

00088bdc <__ascii_mbtowc>:
   88bdc:	b082      	sub	sp, #8
   88bde:	b149      	cbz	r1, 88bf4 <__ascii_mbtowc+0x18>
   88be0:	b15a      	cbz	r2, 88bfa <__ascii_mbtowc+0x1e>
   88be2:	b16b      	cbz	r3, 88c00 <__ascii_mbtowc+0x24>
   88be4:	7813      	ldrb	r3, [r2, #0]
   88be6:	600b      	str	r3, [r1, #0]
   88be8:	7812      	ldrb	r2, [r2, #0]
   88bea:	1c10      	adds	r0, r2, #0
   88bec:	bf18      	it	ne
   88bee:	2001      	movne	r0, #1
   88bf0:	b002      	add	sp, #8
   88bf2:	4770      	bx	lr
   88bf4:	a901      	add	r1, sp, #4
   88bf6:	2a00      	cmp	r2, #0
   88bf8:	d1f3      	bne.n	88be2 <__ascii_mbtowc+0x6>
   88bfa:	4610      	mov	r0, r2
   88bfc:	b002      	add	sp, #8
   88bfe:	4770      	bx	lr
   88c00:	f06f 0001 	mvn.w	r0, #1
   88c04:	e7f4      	b.n	88bf0 <__ascii_mbtowc+0x14>
   88c06:	bf00      	nop

00088c08 <memchr>:
   88c08:	0783      	lsls	r3, r0, #30
   88c0a:	b470      	push	{r4, r5, r6}
   88c0c:	b2cd      	uxtb	r5, r1
   88c0e:	d03d      	beq.n	88c8c <memchr+0x84>
   88c10:	1e54      	subs	r4, r2, #1
   88c12:	b30a      	cbz	r2, 88c58 <memchr+0x50>
   88c14:	7803      	ldrb	r3, [r0, #0]
   88c16:	42ab      	cmp	r3, r5
   88c18:	d01f      	beq.n	88c5a <memchr+0x52>
   88c1a:	1c43      	adds	r3, r0, #1
   88c1c:	e005      	b.n	88c2a <memchr+0x22>
   88c1e:	f114 34ff 	adds.w	r4, r4, #4294967295
   88c22:	d319      	bcc.n	88c58 <memchr+0x50>
   88c24:	7802      	ldrb	r2, [r0, #0]
   88c26:	42aa      	cmp	r2, r5
   88c28:	d017      	beq.n	88c5a <memchr+0x52>
   88c2a:	f013 0f03 	tst.w	r3, #3
   88c2e:	4618      	mov	r0, r3
   88c30:	f103 0301 	add.w	r3, r3, #1
   88c34:	d1f3      	bne.n	88c1e <memchr+0x16>
   88c36:	2c03      	cmp	r4, #3
   88c38:	d811      	bhi.n	88c5e <memchr+0x56>
   88c3a:	b34c      	cbz	r4, 88c90 <memchr+0x88>
   88c3c:	7803      	ldrb	r3, [r0, #0]
   88c3e:	42ab      	cmp	r3, r5
   88c40:	d00b      	beq.n	88c5a <memchr+0x52>
   88c42:	4404      	add	r4, r0
   88c44:	1c43      	adds	r3, r0, #1
   88c46:	e002      	b.n	88c4e <memchr+0x46>
   88c48:	7802      	ldrb	r2, [r0, #0]
   88c4a:	42aa      	cmp	r2, r5
   88c4c:	d005      	beq.n	88c5a <memchr+0x52>
   88c4e:	429c      	cmp	r4, r3
   88c50:	4618      	mov	r0, r3
   88c52:	f103 0301 	add.w	r3, r3, #1
   88c56:	d1f7      	bne.n	88c48 <memchr+0x40>
   88c58:	2000      	movs	r0, #0
   88c5a:	bc70      	pop	{r4, r5, r6}
   88c5c:	4770      	bx	lr
   88c5e:	0209      	lsls	r1, r1, #8
   88c60:	b289      	uxth	r1, r1
   88c62:	4329      	orrs	r1, r5
   88c64:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   88c68:	6803      	ldr	r3, [r0, #0]
   88c6a:	4606      	mov	r6, r0
   88c6c:	404b      	eors	r3, r1
   88c6e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   88c72:	ea22 0303 	bic.w	r3, r2, r3
   88c76:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   88c7a:	f100 0004 	add.w	r0, r0, #4
   88c7e:	d103      	bne.n	88c88 <memchr+0x80>
   88c80:	3c04      	subs	r4, #4
   88c82:	2c03      	cmp	r4, #3
   88c84:	d8f0      	bhi.n	88c68 <memchr+0x60>
   88c86:	e7d8      	b.n	88c3a <memchr+0x32>
   88c88:	4630      	mov	r0, r6
   88c8a:	e7d7      	b.n	88c3c <memchr+0x34>
   88c8c:	4614      	mov	r4, r2
   88c8e:	e7d2      	b.n	88c36 <memchr+0x2e>
   88c90:	4620      	mov	r0, r4
   88c92:	e7e2      	b.n	88c5a <memchr+0x52>

00088c94 <memmove>:
   88c94:	4288      	cmp	r0, r1
   88c96:	b5f0      	push	{r4, r5, r6, r7, lr}
   88c98:	d90d      	bls.n	88cb6 <memmove+0x22>
   88c9a:	188b      	adds	r3, r1, r2
   88c9c:	4298      	cmp	r0, r3
   88c9e:	d20a      	bcs.n	88cb6 <memmove+0x22>
   88ca0:	1884      	adds	r4, r0, r2
   88ca2:	2a00      	cmp	r2, #0
   88ca4:	d051      	beq.n	88d4a <memmove+0xb6>
   88ca6:	4622      	mov	r2, r4
   88ca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   88cac:	4299      	cmp	r1, r3
   88cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   88cb2:	d1f9      	bne.n	88ca8 <memmove+0x14>
   88cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88cb6:	2a0f      	cmp	r2, #15
   88cb8:	d948      	bls.n	88d4c <memmove+0xb8>
   88cba:	ea41 0300 	orr.w	r3, r1, r0
   88cbe:	079b      	lsls	r3, r3, #30
   88cc0:	d146      	bne.n	88d50 <memmove+0xbc>
   88cc2:	4615      	mov	r5, r2
   88cc4:	f100 0410 	add.w	r4, r0, #16
   88cc8:	f101 0310 	add.w	r3, r1, #16
   88ccc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   88cd0:	3d10      	subs	r5, #16
   88cd2:	f844 6c10 	str.w	r6, [r4, #-16]
   88cd6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   88cda:	2d0f      	cmp	r5, #15
   88cdc:	f844 6c0c 	str.w	r6, [r4, #-12]
   88ce0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   88ce4:	f104 0410 	add.w	r4, r4, #16
   88ce8:	f844 6c18 	str.w	r6, [r4, #-24]
   88cec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   88cf0:	f103 0310 	add.w	r3, r3, #16
   88cf4:	f844 6c14 	str.w	r6, [r4, #-20]
   88cf8:	d8e8      	bhi.n	88ccc <memmove+0x38>
   88cfa:	f1a2 0310 	sub.w	r3, r2, #16
   88cfe:	f023 030f 	bic.w	r3, r3, #15
   88d02:	f002 0e0f 	and.w	lr, r2, #15
   88d06:	3310      	adds	r3, #16
   88d08:	f1be 0f03 	cmp.w	lr, #3
   88d0c:	4419      	add	r1, r3
   88d0e:	4403      	add	r3, r0
   88d10:	d921      	bls.n	88d56 <memmove+0xc2>
   88d12:	460e      	mov	r6, r1
   88d14:	4674      	mov	r4, lr
   88d16:	1f1d      	subs	r5, r3, #4
   88d18:	f856 7b04 	ldr.w	r7, [r6], #4
   88d1c:	3c04      	subs	r4, #4
   88d1e:	2c03      	cmp	r4, #3
   88d20:	f845 7f04 	str.w	r7, [r5, #4]!
   88d24:	d8f8      	bhi.n	88d18 <memmove+0x84>
   88d26:	f1ae 0404 	sub.w	r4, lr, #4
   88d2a:	f024 0403 	bic.w	r4, r4, #3
   88d2e:	3404      	adds	r4, #4
   88d30:	4421      	add	r1, r4
   88d32:	4423      	add	r3, r4
   88d34:	f002 0203 	and.w	r2, r2, #3
   88d38:	b162      	cbz	r2, 88d54 <memmove+0xc0>
   88d3a:	3b01      	subs	r3, #1
   88d3c:	440a      	add	r2, r1
   88d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   88d42:	428a      	cmp	r2, r1
   88d44:	f803 4f01 	strb.w	r4, [r3, #1]!
   88d48:	d1f9      	bne.n	88d3e <memmove+0xaa>
   88d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88d4c:	4603      	mov	r3, r0
   88d4e:	e7f3      	b.n	88d38 <memmove+0xa4>
   88d50:	4603      	mov	r3, r0
   88d52:	e7f2      	b.n	88d3a <memmove+0xa6>
   88d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88d56:	4672      	mov	r2, lr
   88d58:	e7ee      	b.n	88d38 <memmove+0xa4>
   88d5a:	bf00      	nop

00088d5c <__malloc_lock>:
   88d5c:	4801      	ldr	r0, [pc, #4]	; (88d64 <__malloc_lock+0x8>)
   88d5e:	f7ff bc97 	b.w	88690 <__retarget_lock_acquire_recursive>
   88d62:	bf00      	nop
   88d64:	20075974 	.word	0x20075974

00088d68 <__malloc_unlock>:
   88d68:	4801      	ldr	r0, [pc, #4]	; (88d70 <__malloc_unlock+0x8>)
   88d6a:	f7ff bc93 	b.w	88694 <__retarget_lock_release_recursive>
   88d6e:	bf00      	nop
   88d70:	20075974 	.word	0x20075974

00088d74 <_Balloc>:
   88d74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88d76:	b570      	push	{r4, r5, r6, lr}
   88d78:	4605      	mov	r5, r0
   88d7a:	460c      	mov	r4, r1
   88d7c:	b14b      	cbz	r3, 88d92 <_Balloc+0x1e>
   88d7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   88d82:	b180      	cbz	r0, 88da6 <_Balloc+0x32>
   88d84:	6802      	ldr	r2, [r0, #0]
   88d86:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   88d8a:	2300      	movs	r3, #0
   88d8c:	6103      	str	r3, [r0, #16]
   88d8e:	60c3      	str	r3, [r0, #12]
   88d90:	bd70      	pop	{r4, r5, r6, pc}
   88d92:	2221      	movs	r2, #33	; 0x21
   88d94:	2104      	movs	r1, #4
   88d96:	f000 fd9d 	bl	898d4 <_calloc_r>
   88d9a:	64e8      	str	r0, [r5, #76]	; 0x4c
   88d9c:	4603      	mov	r3, r0
   88d9e:	2800      	cmp	r0, #0
   88da0:	d1ed      	bne.n	88d7e <_Balloc+0xa>
   88da2:	2000      	movs	r0, #0
   88da4:	bd70      	pop	{r4, r5, r6, pc}
   88da6:	2101      	movs	r1, #1
   88da8:	fa01 f604 	lsl.w	r6, r1, r4
   88dac:	1d72      	adds	r2, r6, #5
   88dae:	4628      	mov	r0, r5
   88db0:	0092      	lsls	r2, r2, #2
   88db2:	f000 fd8f 	bl	898d4 <_calloc_r>
   88db6:	2800      	cmp	r0, #0
   88db8:	d0f3      	beq.n	88da2 <_Balloc+0x2e>
   88dba:	6044      	str	r4, [r0, #4]
   88dbc:	6086      	str	r6, [r0, #8]
   88dbe:	e7e4      	b.n	88d8a <_Balloc+0x16>

00088dc0 <_Bfree>:
   88dc0:	b131      	cbz	r1, 88dd0 <_Bfree+0x10>
   88dc2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   88dc4:	684a      	ldr	r2, [r1, #4]
   88dc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   88dca:	6008      	str	r0, [r1, #0]
   88dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   88dd0:	4770      	bx	lr
   88dd2:	bf00      	nop

00088dd4 <__multadd>:
   88dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   88dd6:	460c      	mov	r4, r1
   88dd8:	4605      	mov	r5, r0
   88dda:	f04f 0e00 	mov.w	lr, #0
   88dde:	690e      	ldr	r6, [r1, #16]
   88de0:	b083      	sub	sp, #12
   88de2:	f101 0714 	add.w	r7, r1, #20
   88de6:	6838      	ldr	r0, [r7, #0]
   88de8:	f10e 0e01 	add.w	lr, lr, #1
   88dec:	b281      	uxth	r1, r0
   88dee:	fb02 3301 	mla	r3, r2, r1, r3
   88df2:	0c01      	lsrs	r1, r0, #16
   88df4:	0c18      	lsrs	r0, r3, #16
   88df6:	fb02 0101 	mla	r1, r2, r1, r0
   88dfa:	b29b      	uxth	r3, r3
   88dfc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   88e00:	4576      	cmp	r6, lr
   88e02:	f847 3b04 	str.w	r3, [r7], #4
   88e06:	ea4f 4311 	mov.w	r3, r1, lsr #16
   88e0a:	dcec      	bgt.n	88de6 <__multadd+0x12>
   88e0c:	b13b      	cbz	r3, 88e1e <__multadd+0x4a>
   88e0e:	68a2      	ldr	r2, [r4, #8]
   88e10:	4296      	cmp	r6, r2
   88e12:	da07      	bge.n	88e24 <__multadd+0x50>
   88e14:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   88e18:	3601      	adds	r6, #1
   88e1a:	6153      	str	r3, [r2, #20]
   88e1c:	6126      	str	r6, [r4, #16]
   88e1e:	4620      	mov	r0, r4
   88e20:	b003      	add	sp, #12
   88e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88e24:	6861      	ldr	r1, [r4, #4]
   88e26:	4628      	mov	r0, r5
   88e28:	3101      	adds	r1, #1
   88e2a:	9301      	str	r3, [sp, #4]
   88e2c:	f7ff ffa2 	bl	88d74 <_Balloc>
   88e30:	4607      	mov	r7, r0
   88e32:	6922      	ldr	r2, [r4, #16]
   88e34:	f104 010c 	add.w	r1, r4, #12
   88e38:	3202      	adds	r2, #2
   88e3a:	0092      	lsls	r2, r2, #2
   88e3c:	300c      	adds	r0, #12
   88e3e:	f7fc ff0d 	bl	85c5c <memcpy>
   88e42:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   88e44:	6861      	ldr	r1, [r4, #4]
   88e46:	9b01      	ldr	r3, [sp, #4]
   88e48:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   88e4c:	6020      	str	r0, [r4, #0]
   88e4e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   88e52:	463c      	mov	r4, r7
   88e54:	e7de      	b.n	88e14 <__multadd+0x40>
   88e56:	bf00      	nop

00088e58 <__hi0bits>:
   88e58:	0c02      	lsrs	r2, r0, #16
   88e5a:	0412      	lsls	r2, r2, #16
   88e5c:	4603      	mov	r3, r0
   88e5e:	b9b2      	cbnz	r2, 88e8e <__hi0bits+0x36>
   88e60:	0403      	lsls	r3, r0, #16
   88e62:	2010      	movs	r0, #16
   88e64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   88e68:	bf04      	itt	eq
   88e6a:	021b      	lsleq	r3, r3, #8
   88e6c:	3008      	addeq	r0, #8
   88e6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   88e72:	bf04      	itt	eq
   88e74:	011b      	lsleq	r3, r3, #4
   88e76:	3004      	addeq	r0, #4
   88e78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   88e7c:	bf04      	itt	eq
   88e7e:	009b      	lsleq	r3, r3, #2
   88e80:	3002      	addeq	r0, #2
   88e82:	2b00      	cmp	r3, #0
   88e84:	db02      	blt.n	88e8c <__hi0bits+0x34>
   88e86:	005b      	lsls	r3, r3, #1
   88e88:	d403      	bmi.n	88e92 <__hi0bits+0x3a>
   88e8a:	2020      	movs	r0, #32
   88e8c:	4770      	bx	lr
   88e8e:	2000      	movs	r0, #0
   88e90:	e7e8      	b.n	88e64 <__hi0bits+0xc>
   88e92:	3001      	adds	r0, #1
   88e94:	4770      	bx	lr
   88e96:	bf00      	nop

00088e98 <__lo0bits>:
   88e98:	6803      	ldr	r3, [r0, #0]
   88e9a:	4601      	mov	r1, r0
   88e9c:	f013 0207 	ands.w	r2, r3, #7
   88ea0:	d007      	beq.n	88eb2 <__lo0bits+0x1a>
   88ea2:	07da      	lsls	r2, r3, #31
   88ea4:	d421      	bmi.n	88eea <__lo0bits+0x52>
   88ea6:	0798      	lsls	r0, r3, #30
   88ea8:	d421      	bmi.n	88eee <__lo0bits+0x56>
   88eaa:	089b      	lsrs	r3, r3, #2
   88eac:	600b      	str	r3, [r1, #0]
   88eae:	2002      	movs	r0, #2
   88eb0:	4770      	bx	lr
   88eb2:	b298      	uxth	r0, r3
   88eb4:	b198      	cbz	r0, 88ede <__lo0bits+0x46>
   88eb6:	4610      	mov	r0, r2
   88eb8:	f013 0fff 	tst.w	r3, #255	; 0xff
   88ebc:	bf04      	itt	eq
   88ebe:	0a1b      	lsreq	r3, r3, #8
   88ec0:	3008      	addeq	r0, #8
   88ec2:	071a      	lsls	r2, r3, #28
   88ec4:	bf04      	itt	eq
   88ec6:	091b      	lsreq	r3, r3, #4
   88ec8:	3004      	addeq	r0, #4
   88eca:	079a      	lsls	r2, r3, #30
   88ecc:	bf04      	itt	eq
   88ece:	089b      	lsreq	r3, r3, #2
   88ed0:	3002      	addeq	r0, #2
   88ed2:	07da      	lsls	r2, r3, #31
   88ed4:	d407      	bmi.n	88ee6 <__lo0bits+0x4e>
   88ed6:	085b      	lsrs	r3, r3, #1
   88ed8:	d104      	bne.n	88ee4 <__lo0bits+0x4c>
   88eda:	2020      	movs	r0, #32
   88edc:	4770      	bx	lr
   88ede:	0c1b      	lsrs	r3, r3, #16
   88ee0:	2010      	movs	r0, #16
   88ee2:	e7e9      	b.n	88eb8 <__lo0bits+0x20>
   88ee4:	3001      	adds	r0, #1
   88ee6:	600b      	str	r3, [r1, #0]
   88ee8:	4770      	bx	lr
   88eea:	2000      	movs	r0, #0
   88eec:	4770      	bx	lr
   88eee:	085b      	lsrs	r3, r3, #1
   88ef0:	600b      	str	r3, [r1, #0]
   88ef2:	2001      	movs	r0, #1
   88ef4:	4770      	bx	lr
   88ef6:	bf00      	nop

00088ef8 <__i2b>:
   88ef8:	b510      	push	{r4, lr}
   88efa:	460c      	mov	r4, r1
   88efc:	2101      	movs	r1, #1
   88efe:	f7ff ff39 	bl	88d74 <_Balloc>
   88f02:	2201      	movs	r2, #1
   88f04:	6144      	str	r4, [r0, #20]
   88f06:	6102      	str	r2, [r0, #16]
   88f08:	bd10      	pop	{r4, pc}
   88f0a:	bf00      	nop

00088f0c <__multiply>:
   88f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88f10:	690c      	ldr	r4, [r1, #16]
   88f12:	6915      	ldr	r5, [r2, #16]
   88f14:	b083      	sub	sp, #12
   88f16:	42ac      	cmp	r4, r5
   88f18:	468b      	mov	fp, r1
   88f1a:	4616      	mov	r6, r2
   88f1c:	da04      	bge.n	88f28 <__multiply+0x1c>
   88f1e:	4622      	mov	r2, r4
   88f20:	46b3      	mov	fp, r6
   88f22:	462c      	mov	r4, r5
   88f24:	460e      	mov	r6, r1
   88f26:	4615      	mov	r5, r2
   88f28:	f8db 3008 	ldr.w	r3, [fp, #8]
   88f2c:	eb04 0805 	add.w	r8, r4, r5
   88f30:	f8db 1004 	ldr.w	r1, [fp, #4]
   88f34:	4598      	cmp	r8, r3
   88f36:	bfc8      	it	gt
   88f38:	3101      	addgt	r1, #1
   88f3a:	f7ff ff1b 	bl	88d74 <_Balloc>
   88f3e:	f100 0914 	add.w	r9, r0, #20
   88f42:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   88f46:	45d1      	cmp	r9, sl
   88f48:	9000      	str	r0, [sp, #0]
   88f4a:	d205      	bcs.n	88f58 <__multiply+0x4c>
   88f4c:	464b      	mov	r3, r9
   88f4e:	2100      	movs	r1, #0
   88f50:	f843 1b04 	str.w	r1, [r3], #4
   88f54:	459a      	cmp	sl, r3
   88f56:	d8fb      	bhi.n	88f50 <__multiply+0x44>
   88f58:	f106 0c14 	add.w	ip, r6, #20
   88f5c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   88f60:	f10b 0b14 	add.w	fp, fp, #20
   88f64:	459c      	cmp	ip, r3
   88f66:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   88f6a:	d24b      	bcs.n	89004 <__multiply+0xf8>
   88f6c:	f8cd a004 	str.w	sl, [sp, #4]
   88f70:	469a      	mov	sl, r3
   88f72:	f8dc 5000 	ldr.w	r5, [ip]
   88f76:	b2af      	uxth	r7, r5
   88f78:	b1e7      	cbz	r7, 88fb4 <__multiply+0xa8>
   88f7a:	464d      	mov	r5, r9
   88f7c:	465e      	mov	r6, fp
   88f7e:	2100      	movs	r1, #0
   88f80:	f856 2b04 	ldr.w	r2, [r6], #4
   88f84:	6828      	ldr	r0, [r5, #0]
   88f86:	b293      	uxth	r3, r2
   88f88:	b284      	uxth	r4, r0
   88f8a:	0c12      	lsrs	r2, r2, #16
   88f8c:	fb07 4303 	mla	r3, r7, r3, r4
   88f90:	0c00      	lsrs	r0, r0, #16
   88f92:	fb07 0202 	mla	r2, r7, r2, r0
   88f96:	440b      	add	r3, r1
   88f98:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   88f9c:	b29b      	uxth	r3, r3
   88f9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   88fa2:	45b6      	cmp	lr, r6
   88fa4:	f845 3b04 	str.w	r3, [r5], #4
   88fa8:	ea4f 4111 	mov.w	r1, r1, lsr #16
   88fac:	d8e8      	bhi.n	88f80 <__multiply+0x74>
   88fae:	6029      	str	r1, [r5, #0]
   88fb0:	f8dc 5000 	ldr.w	r5, [ip]
   88fb4:	0c2d      	lsrs	r5, r5, #16
   88fb6:	d01d      	beq.n	88ff4 <__multiply+0xe8>
   88fb8:	f8d9 3000 	ldr.w	r3, [r9]
   88fbc:	4648      	mov	r0, r9
   88fbe:	461c      	mov	r4, r3
   88fc0:	4659      	mov	r1, fp
   88fc2:	2200      	movs	r2, #0
   88fc4:	880e      	ldrh	r6, [r1, #0]
   88fc6:	0c24      	lsrs	r4, r4, #16
   88fc8:	fb05 4406 	mla	r4, r5, r6, r4
   88fcc:	b29b      	uxth	r3, r3
   88fce:	4422      	add	r2, r4
   88fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   88fd4:	f840 3b04 	str.w	r3, [r0], #4
   88fd8:	f851 3b04 	ldr.w	r3, [r1], #4
   88fdc:	6804      	ldr	r4, [r0, #0]
   88fde:	0c1b      	lsrs	r3, r3, #16
   88fe0:	b2a6      	uxth	r6, r4
   88fe2:	fb05 6303 	mla	r3, r5, r3, r6
   88fe6:	458e      	cmp	lr, r1
   88fe8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   88fec:	ea4f 4213 	mov.w	r2, r3, lsr #16
   88ff0:	d8e8      	bhi.n	88fc4 <__multiply+0xb8>
   88ff2:	6003      	str	r3, [r0, #0]
   88ff4:	f10c 0c04 	add.w	ip, ip, #4
   88ff8:	45e2      	cmp	sl, ip
   88ffa:	f109 0904 	add.w	r9, r9, #4
   88ffe:	d8b8      	bhi.n	88f72 <__multiply+0x66>
   89000:	f8dd a004 	ldr.w	sl, [sp, #4]
   89004:	f1b8 0f00 	cmp.w	r8, #0
   89008:	dd0b      	ble.n	89022 <__multiply+0x116>
   8900a:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8900e:	f1aa 0a04 	sub.w	sl, sl, #4
   89012:	b11b      	cbz	r3, 8901c <__multiply+0x110>
   89014:	e005      	b.n	89022 <__multiply+0x116>
   89016:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8901a:	b913      	cbnz	r3, 89022 <__multiply+0x116>
   8901c:	f1b8 0801 	subs.w	r8, r8, #1
   89020:	d1f9      	bne.n	89016 <__multiply+0x10a>
   89022:	9800      	ldr	r0, [sp, #0]
   89024:	f8c0 8010 	str.w	r8, [r0, #16]
   89028:	b003      	add	sp, #12
   8902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8902e:	bf00      	nop

00089030 <__pow5mult>:
   89030:	f012 0303 	ands.w	r3, r2, #3
   89034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89038:	4614      	mov	r4, r2
   8903a:	4607      	mov	r7, r0
   8903c:	d12e      	bne.n	8909c <__pow5mult+0x6c>
   8903e:	460d      	mov	r5, r1
   89040:	10a4      	asrs	r4, r4, #2
   89042:	d01c      	beq.n	8907e <__pow5mult+0x4e>
   89044:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   89046:	b396      	cbz	r6, 890ae <__pow5mult+0x7e>
   89048:	07e3      	lsls	r3, r4, #31
   8904a:	f04f 0800 	mov.w	r8, #0
   8904e:	d406      	bmi.n	8905e <__pow5mult+0x2e>
   89050:	1064      	asrs	r4, r4, #1
   89052:	d014      	beq.n	8907e <__pow5mult+0x4e>
   89054:	6830      	ldr	r0, [r6, #0]
   89056:	b1a8      	cbz	r0, 89084 <__pow5mult+0x54>
   89058:	4606      	mov	r6, r0
   8905a:	07e3      	lsls	r3, r4, #31
   8905c:	d5f8      	bpl.n	89050 <__pow5mult+0x20>
   8905e:	4632      	mov	r2, r6
   89060:	4629      	mov	r1, r5
   89062:	4638      	mov	r0, r7
   89064:	f7ff ff52 	bl	88f0c <__multiply>
   89068:	b1b5      	cbz	r5, 89098 <__pow5mult+0x68>
   8906a:	686a      	ldr	r2, [r5, #4]
   8906c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8906e:	1064      	asrs	r4, r4, #1
   89070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89074:	6029      	str	r1, [r5, #0]
   89076:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8907a:	4605      	mov	r5, r0
   8907c:	d1ea      	bne.n	89054 <__pow5mult+0x24>
   8907e:	4628      	mov	r0, r5
   89080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89084:	4632      	mov	r2, r6
   89086:	4631      	mov	r1, r6
   89088:	4638      	mov	r0, r7
   8908a:	f7ff ff3f 	bl	88f0c <__multiply>
   8908e:	6030      	str	r0, [r6, #0]
   89090:	f8c0 8000 	str.w	r8, [r0]
   89094:	4606      	mov	r6, r0
   89096:	e7e0      	b.n	8905a <__pow5mult+0x2a>
   89098:	4605      	mov	r5, r0
   8909a:	e7d9      	b.n	89050 <__pow5mult+0x20>
   8909c:	4a0b      	ldr	r2, [pc, #44]	; (890cc <__pow5mult+0x9c>)
   8909e:	3b01      	subs	r3, #1
   890a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   890a4:	2300      	movs	r3, #0
   890a6:	f7ff fe95 	bl	88dd4 <__multadd>
   890aa:	4605      	mov	r5, r0
   890ac:	e7c8      	b.n	89040 <__pow5mult+0x10>
   890ae:	2101      	movs	r1, #1
   890b0:	4638      	mov	r0, r7
   890b2:	f7ff fe5f 	bl	88d74 <_Balloc>
   890b6:	f240 2171 	movw	r1, #625	; 0x271
   890ba:	2201      	movs	r2, #1
   890bc:	2300      	movs	r3, #0
   890be:	6141      	str	r1, [r0, #20]
   890c0:	6102      	str	r2, [r0, #16]
   890c2:	4606      	mov	r6, r0
   890c4:	64b8      	str	r0, [r7, #72]	; 0x48
   890c6:	6003      	str	r3, [r0, #0]
   890c8:	e7be      	b.n	89048 <__pow5mult+0x18>
   890ca:	bf00      	nop
   890cc:	0008aae0 	.word	0x0008aae0

000890d0 <__lshift>:
   890d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   890d4:	690b      	ldr	r3, [r1, #16]
   890d6:	1154      	asrs	r4, r2, #5
   890d8:	eb04 0803 	add.w	r8, r4, r3
   890dc:	688b      	ldr	r3, [r1, #8]
   890de:	f108 0501 	add.w	r5, r8, #1
   890e2:	429d      	cmp	r5, r3
   890e4:	460e      	mov	r6, r1
   890e6:	4691      	mov	r9, r2
   890e8:	4607      	mov	r7, r0
   890ea:	6849      	ldr	r1, [r1, #4]
   890ec:	dd04      	ble.n	890f8 <__lshift+0x28>
   890ee:	005b      	lsls	r3, r3, #1
   890f0:	429d      	cmp	r5, r3
   890f2:	f101 0101 	add.w	r1, r1, #1
   890f6:	dcfa      	bgt.n	890ee <__lshift+0x1e>
   890f8:	4638      	mov	r0, r7
   890fa:	f7ff fe3b 	bl	88d74 <_Balloc>
   890fe:	2c00      	cmp	r4, #0
   89100:	f100 0314 	add.w	r3, r0, #20
   89104:	dd06      	ble.n	89114 <__lshift+0x44>
   89106:	2100      	movs	r1, #0
   89108:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   8910c:	f843 1b04 	str.w	r1, [r3], #4
   89110:	429a      	cmp	r2, r3
   89112:	d1fb      	bne.n	8910c <__lshift+0x3c>
   89114:	6934      	ldr	r4, [r6, #16]
   89116:	f106 0114 	add.w	r1, r6, #20
   8911a:	f019 091f 	ands.w	r9, r9, #31
   8911e:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   89122:	d01d      	beq.n	89160 <__lshift+0x90>
   89124:	2200      	movs	r2, #0
   89126:	f1c9 0c20 	rsb	ip, r9, #32
   8912a:	680c      	ldr	r4, [r1, #0]
   8912c:	fa04 f409 	lsl.w	r4, r4, r9
   89130:	4314      	orrs	r4, r2
   89132:	f843 4b04 	str.w	r4, [r3], #4
   89136:	f851 2b04 	ldr.w	r2, [r1], #4
   8913a:	458e      	cmp	lr, r1
   8913c:	fa22 f20c 	lsr.w	r2, r2, ip
   89140:	d8f3      	bhi.n	8912a <__lshift+0x5a>
   89142:	601a      	str	r2, [r3, #0]
   89144:	b10a      	cbz	r2, 8914a <__lshift+0x7a>
   89146:	f108 0502 	add.w	r5, r8, #2
   8914a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8914c:	6872      	ldr	r2, [r6, #4]
   8914e:	3d01      	subs	r5, #1
   89150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89154:	6105      	str	r5, [r0, #16]
   89156:	6031      	str	r1, [r6, #0]
   89158:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8915c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89160:	3b04      	subs	r3, #4
   89162:	f851 2b04 	ldr.w	r2, [r1], #4
   89166:	458e      	cmp	lr, r1
   89168:	f843 2f04 	str.w	r2, [r3, #4]!
   8916c:	d8f9      	bhi.n	89162 <__lshift+0x92>
   8916e:	e7ec      	b.n	8914a <__lshift+0x7a>

00089170 <__mcmp>:
   89170:	b430      	push	{r4, r5}
   89172:	690b      	ldr	r3, [r1, #16]
   89174:	4605      	mov	r5, r0
   89176:	6900      	ldr	r0, [r0, #16]
   89178:	1ac0      	subs	r0, r0, r3
   8917a:	d10f      	bne.n	8919c <__mcmp+0x2c>
   8917c:	009b      	lsls	r3, r3, #2
   8917e:	3514      	adds	r5, #20
   89180:	3114      	adds	r1, #20
   89182:	4419      	add	r1, r3
   89184:	442b      	add	r3, r5
   89186:	e001      	b.n	8918c <__mcmp+0x1c>
   89188:	429d      	cmp	r5, r3
   8918a:	d207      	bcs.n	8919c <__mcmp+0x2c>
   8918c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   89190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   89194:	4294      	cmp	r4, r2
   89196:	d0f7      	beq.n	89188 <__mcmp+0x18>
   89198:	d302      	bcc.n	891a0 <__mcmp+0x30>
   8919a:	2001      	movs	r0, #1
   8919c:	bc30      	pop	{r4, r5}
   8919e:	4770      	bx	lr
   891a0:	f04f 30ff 	mov.w	r0, #4294967295
   891a4:	e7fa      	b.n	8919c <__mcmp+0x2c>
   891a6:	bf00      	nop

000891a8 <__mdiff>:
   891a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   891ac:	690c      	ldr	r4, [r1, #16]
   891ae:	4689      	mov	r9, r1
   891b0:	6911      	ldr	r1, [r2, #16]
   891b2:	4692      	mov	sl, r2
   891b4:	1a64      	subs	r4, r4, r1
   891b6:	2c00      	cmp	r4, #0
   891b8:	d117      	bne.n	891ea <__mdiff+0x42>
   891ba:	0089      	lsls	r1, r1, #2
   891bc:	f109 0714 	add.w	r7, r9, #20
   891c0:	f102 0614 	add.w	r6, r2, #20
   891c4:	187b      	adds	r3, r7, r1
   891c6:	4431      	add	r1, r6
   891c8:	e001      	b.n	891ce <__mdiff+0x26>
   891ca:	429f      	cmp	r7, r3
   891cc:	d265      	bcs.n	8929a <__mdiff+0xf2>
   891ce:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   891d2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   891d6:	4295      	cmp	r5, r2
   891d8:	d0f7      	beq.n	891ca <__mdiff+0x22>
   891da:	d267      	bcs.n	892ac <__mdiff+0x104>
   891dc:	464b      	mov	r3, r9
   891de:	46bb      	mov	fp, r7
   891e0:	46d1      	mov	r9, sl
   891e2:	4637      	mov	r7, r6
   891e4:	469a      	mov	sl, r3
   891e6:	2401      	movs	r4, #1
   891e8:	e005      	b.n	891f6 <__mdiff+0x4e>
   891ea:	db61      	blt.n	892b0 <__mdiff+0x108>
   891ec:	2400      	movs	r4, #0
   891ee:	f109 0714 	add.w	r7, r9, #20
   891f2:	f10a 0b14 	add.w	fp, sl, #20
   891f6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   891fa:	f7ff fdbb 	bl	88d74 <_Balloc>
   891fe:	465d      	mov	r5, fp
   89200:	f04f 0800 	mov.w	r8, #0
   89204:	f8d9 e010 	ldr.w	lr, [r9, #16]
   89208:	f8da 3010 	ldr.w	r3, [sl, #16]
   8920c:	463e      	mov	r6, r7
   8920e:	60c4      	str	r4, [r0, #12]
   89210:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   89214:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   89218:	f100 0414 	add.w	r4, r0, #20
   8921c:	f856 9b04 	ldr.w	r9, [r6], #4
   89220:	f855 2b04 	ldr.w	r2, [r5], #4
   89224:	fa1f f389 	uxth.w	r3, r9
   89228:	4443      	add	r3, r8
   8922a:	fa1f f882 	uxth.w	r8, r2
   8922e:	0c12      	lsrs	r2, r2, #16
   89230:	eba3 0308 	sub.w	r3, r3, r8
   89234:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   89238:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8923c:	b29b      	uxth	r3, r3
   8923e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   89242:	45ac      	cmp	ip, r5
   89244:	f844 3b04 	str.w	r3, [r4], #4
   89248:	ea4f 4822 	mov.w	r8, r2, asr #16
   8924c:	d8e6      	bhi.n	8921c <__mdiff+0x74>
   8924e:	42b7      	cmp	r7, r6
   89250:	d917      	bls.n	89282 <__mdiff+0xda>
   89252:	46a4      	mov	ip, r4
   89254:	4635      	mov	r5, r6
   89256:	f855 3b04 	ldr.w	r3, [r5], #4
   8925a:	b299      	uxth	r1, r3
   8925c:	4441      	add	r1, r8
   8925e:	140a      	asrs	r2, r1, #16
   89260:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   89264:	b289      	uxth	r1, r1
   89266:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8926a:	42af      	cmp	r7, r5
   8926c:	f84c 3b04 	str.w	r3, [ip], #4
   89270:	ea4f 4822 	mov.w	r8, r2, asr #16
   89274:	d8ef      	bhi.n	89256 <__mdiff+0xae>
   89276:	43f6      	mvns	r6, r6
   89278:	4437      	add	r7, r6
   8927a:	f027 0703 	bic.w	r7, r7, #3
   8927e:	3704      	adds	r7, #4
   89280:	443c      	add	r4, r7
   89282:	3c04      	subs	r4, #4
   89284:	b92b      	cbnz	r3, 89292 <__mdiff+0xea>
   89286:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8928a:	f10e 3eff 	add.w	lr, lr, #4294967295
   8928e:	2b00      	cmp	r3, #0
   89290:	d0f9      	beq.n	89286 <__mdiff+0xde>
   89292:	f8c0 e010 	str.w	lr, [r0, #16]
   89296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8929a:	2100      	movs	r1, #0
   8929c:	f7ff fd6a 	bl	88d74 <_Balloc>
   892a0:	2201      	movs	r2, #1
   892a2:	2300      	movs	r3, #0
   892a4:	6102      	str	r2, [r0, #16]
   892a6:	6143      	str	r3, [r0, #20]
   892a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   892ac:	46b3      	mov	fp, r6
   892ae:	e7a2      	b.n	891f6 <__mdiff+0x4e>
   892b0:	464b      	mov	r3, r9
   892b2:	f109 0b14 	add.w	fp, r9, #20
   892b6:	f102 0714 	add.w	r7, r2, #20
   892ba:	4691      	mov	r9, r2
   892bc:	2401      	movs	r4, #1
   892be:	469a      	mov	sl, r3
   892c0:	e799      	b.n	891f6 <__mdiff+0x4e>
   892c2:	bf00      	nop

000892c4 <__d2b>:
   892c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   892c6:	2101      	movs	r1, #1
   892c8:	b083      	sub	sp, #12
   892ca:	461c      	mov	r4, r3
   892cc:	f3c3 550a 	ubfx	r5, r3, #20, #11
   892d0:	4616      	mov	r6, r2
   892d2:	f7ff fd4f 	bl	88d74 <_Balloc>
   892d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   892da:	4607      	mov	r7, r0
   892dc:	b10d      	cbz	r5, 892e2 <__d2b+0x1e>
   892de:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   892e2:	9401      	str	r4, [sp, #4]
   892e4:	b306      	cbz	r6, 89328 <__d2b+0x64>
   892e6:	a802      	add	r0, sp, #8
   892e8:	f840 6d08 	str.w	r6, [r0, #-8]!
   892ec:	f7ff fdd4 	bl	88e98 <__lo0bits>
   892f0:	2800      	cmp	r0, #0
   892f2:	d130      	bne.n	89356 <__d2b+0x92>
   892f4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   892f8:	617a      	str	r2, [r7, #20]
   892fa:	2b00      	cmp	r3, #0
   892fc:	bf0c      	ite	eq
   892fe:	2101      	moveq	r1, #1
   89300:	2102      	movne	r1, #2
   89302:	61bb      	str	r3, [r7, #24]
   89304:	6139      	str	r1, [r7, #16]
   89306:	b9d5      	cbnz	r5, 8933e <__d2b+0x7a>
   89308:	9a08      	ldr	r2, [sp, #32]
   8930a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8930e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   89312:	6010      	str	r0, [r2, #0]
   89314:	6918      	ldr	r0, [r3, #16]
   89316:	f7ff fd9f 	bl	88e58 <__hi0bits>
   8931a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8931c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   89320:	6018      	str	r0, [r3, #0]
   89322:	4638      	mov	r0, r7
   89324:	b003      	add	sp, #12
   89326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89328:	a801      	add	r0, sp, #4
   8932a:	f7ff fdb5 	bl	88e98 <__lo0bits>
   8932e:	2201      	movs	r2, #1
   89330:	9b01      	ldr	r3, [sp, #4]
   89332:	4611      	mov	r1, r2
   89334:	3020      	adds	r0, #32
   89336:	613a      	str	r2, [r7, #16]
   89338:	617b      	str	r3, [r7, #20]
   8933a:	2d00      	cmp	r5, #0
   8933c:	d0e4      	beq.n	89308 <__d2b+0x44>
   8933e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   89342:	9a08      	ldr	r2, [sp, #32]
   89344:	4403      	add	r3, r0
   89346:	6013      	str	r3, [r2, #0]
   89348:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8934a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8934e:	6018      	str	r0, [r3, #0]
   89350:	4638      	mov	r0, r7
   89352:	b003      	add	sp, #12
   89354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89356:	9b01      	ldr	r3, [sp, #4]
   89358:	f1c0 0220 	rsb	r2, r0, #32
   8935c:	9900      	ldr	r1, [sp, #0]
   8935e:	fa03 f202 	lsl.w	r2, r3, r2
   89362:	430a      	orrs	r2, r1
   89364:	40c3      	lsrs	r3, r0
   89366:	9301      	str	r3, [sp, #4]
   89368:	617a      	str	r2, [r7, #20]
   8936a:	e7c6      	b.n	892fa <__d2b+0x36>

0008936c <_realloc_r>:
   8936c:	2900      	cmp	r1, #0
   8936e:	f000 8094 	beq.w	8949a <_realloc_r+0x12e>
   89372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89376:	460c      	mov	r4, r1
   89378:	4615      	mov	r5, r2
   8937a:	b083      	sub	sp, #12
   8937c:	4680      	mov	r8, r0
   8937e:	f105 060b 	add.w	r6, r5, #11
   89382:	f7ff fceb 	bl	88d5c <__malloc_lock>
   89386:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8938a:	2e16      	cmp	r6, #22
   8938c:	f02e 0703 	bic.w	r7, lr, #3
   89390:	f1a4 0908 	sub.w	r9, r4, #8
   89394:	d83c      	bhi.n	89410 <_realloc_r+0xa4>
   89396:	2210      	movs	r2, #16
   89398:	4616      	mov	r6, r2
   8939a:	42b5      	cmp	r5, r6
   8939c:	d83d      	bhi.n	8941a <_realloc_r+0xae>
   8939e:	4297      	cmp	r7, r2
   893a0:	da43      	bge.n	8942a <_realloc_r+0xbe>
   893a2:	4bc6      	ldr	r3, [pc, #792]	; (896bc <_realloc_r+0x350>)
   893a4:	eb09 0007 	add.w	r0, r9, r7
   893a8:	6899      	ldr	r1, [r3, #8]
   893aa:	4288      	cmp	r0, r1
   893ac:	f000 80c3 	beq.w	89536 <_realloc_r+0x1ca>
   893b0:	6843      	ldr	r3, [r0, #4]
   893b2:	f023 0101 	bic.w	r1, r3, #1
   893b6:	4401      	add	r1, r0
   893b8:	6849      	ldr	r1, [r1, #4]
   893ba:	07c9      	lsls	r1, r1, #31
   893bc:	d54d      	bpl.n	8945a <_realloc_r+0xee>
   893be:	f01e 0f01 	tst.w	lr, #1
   893c2:	f000 809b 	beq.w	894fc <_realloc_r+0x190>
   893c6:	4629      	mov	r1, r5
   893c8:	4640      	mov	r0, r8
   893ca:	f7ff f965 	bl	88698 <_malloc_r>
   893ce:	4605      	mov	r5, r0
   893d0:	2800      	cmp	r0, #0
   893d2:	d03b      	beq.n	8944c <_realloc_r+0xe0>
   893d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   893d8:	f1a0 0208 	sub.w	r2, r0, #8
   893dc:	f023 0301 	bic.w	r3, r3, #1
   893e0:	444b      	add	r3, r9
   893e2:	429a      	cmp	r2, r3
   893e4:	f000 812b 	beq.w	8963e <_realloc_r+0x2d2>
   893e8:	1f3a      	subs	r2, r7, #4
   893ea:	2a24      	cmp	r2, #36	; 0x24
   893ec:	f200 8118 	bhi.w	89620 <_realloc_r+0x2b4>
   893f0:	2a13      	cmp	r2, #19
   893f2:	f200 80eb 	bhi.w	895cc <_realloc_r+0x260>
   893f6:	4603      	mov	r3, r0
   893f8:	4622      	mov	r2, r4
   893fa:	6811      	ldr	r1, [r2, #0]
   893fc:	6019      	str	r1, [r3, #0]
   893fe:	6851      	ldr	r1, [r2, #4]
   89400:	6059      	str	r1, [r3, #4]
   89402:	6892      	ldr	r2, [r2, #8]
   89404:	609a      	str	r2, [r3, #8]
   89406:	4621      	mov	r1, r4
   89408:	4640      	mov	r0, r8
   8940a:	f7ff f84d 	bl	884a8 <_free_r>
   8940e:	e01d      	b.n	8944c <_realloc_r+0xe0>
   89410:	f026 0607 	bic.w	r6, r6, #7
   89414:	2e00      	cmp	r6, #0
   89416:	4632      	mov	r2, r6
   89418:	dabf      	bge.n	8939a <_realloc_r+0x2e>
   8941a:	2500      	movs	r5, #0
   8941c:	230c      	movs	r3, #12
   8941e:	4628      	mov	r0, r5
   89420:	f8c8 3000 	str.w	r3, [r8]
   89424:	b003      	add	sp, #12
   89426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8942a:	4625      	mov	r5, r4
   8942c:	1bbb      	subs	r3, r7, r6
   8942e:	2b0f      	cmp	r3, #15
   89430:	f8d9 2004 	ldr.w	r2, [r9, #4]
   89434:	d81d      	bhi.n	89472 <_realloc_r+0x106>
   89436:	f002 0201 	and.w	r2, r2, #1
   8943a:	433a      	orrs	r2, r7
   8943c:	eb09 0107 	add.w	r1, r9, r7
   89440:	f8c9 2004 	str.w	r2, [r9, #4]
   89444:	684b      	ldr	r3, [r1, #4]
   89446:	f043 0301 	orr.w	r3, r3, #1
   8944a:	604b      	str	r3, [r1, #4]
   8944c:	4640      	mov	r0, r8
   8944e:	f7ff fc8b 	bl	88d68 <__malloc_unlock>
   89452:	4628      	mov	r0, r5
   89454:	b003      	add	sp, #12
   89456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8945a:	f023 0303 	bic.w	r3, r3, #3
   8945e:	18f9      	adds	r1, r7, r3
   89460:	4291      	cmp	r1, r2
   89462:	db1d      	blt.n	894a0 <_realloc_r+0x134>
   89464:	68c3      	ldr	r3, [r0, #12]
   89466:	6882      	ldr	r2, [r0, #8]
   89468:	4625      	mov	r5, r4
   8946a:	60d3      	str	r3, [r2, #12]
   8946c:	460f      	mov	r7, r1
   8946e:	609a      	str	r2, [r3, #8]
   89470:	e7dc      	b.n	8942c <_realloc_r+0xc0>
   89472:	f002 0201 	and.w	r2, r2, #1
   89476:	eb09 0106 	add.w	r1, r9, r6
   8947a:	f043 0301 	orr.w	r3, r3, #1
   8947e:	4332      	orrs	r2, r6
   89480:	f8c9 2004 	str.w	r2, [r9, #4]
   89484:	444f      	add	r7, r9
   89486:	604b      	str	r3, [r1, #4]
   89488:	687b      	ldr	r3, [r7, #4]
   8948a:	3108      	adds	r1, #8
   8948c:	f043 0301 	orr.w	r3, r3, #1
   89490:	607b      	str	r3, [r7, #4]
   89492:	4640      	mov	r0, r8
   89494:	f7ff f808 	bl	884a8 <_free_r>
   89498:	e7d8      	b.n	8944c <_realloc_r+0xe0>
   8949a:	4611      	mov	r1, r2
   8949c:	f7ff b8fc 	b.w	88698 <_malloc_r>
   894a0:	f01e 0f01 	tst.w	lr, #1
   894a4:	d18f      	bne.n	893c6 <_realloc_r+0x5a>
   894a6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   894aa:	eba9 0a01 	sub.w	sl, r9, r1
   894ae:	f8da 1004 	ldr.w	r1, [sl, #4]
   894b2:	f021 0103 	bic.w	r1, r1, #3
   894b6:	440b      	add	r3, r1
   894b8:	443b      	add	r3, r7
   894ba:	4293      	cmp	r3, r2
   894bc:	db26      	blt.n	8950c <_realloc_r+0x1a0>
   894be:	4655      	mov	r5, sl
   894c0:	68c1      	ldr	r1, [r0, #12]
   894c2:	6880      	ldr	r0, [r0, #8]
   894c4:	1f3a      	subs	r2, r7, #4
   894c6:	60c1      	str	r1, [r0, #12]
   894c8:	6088      	str	r0, [r1, #8]
   894ca:	f855 0f08 	ldr.w	r0, [r5, #8]!
   894ce:	f8da 100c 	ldr.w	r1, [sl, #12]
   894d2:	2a24      	cmp	r2, #36	; 0x24
   894d4:	60c1      	str	r1, [r0, #12]
   894d6:	6088      	str	r0, [r1, #8]
   894d8:	d826      	bhi.n	89528 <_realloc_r+0x1bc>
   894da:	2a13      	cmp	r2, #19
   894dc:	f240 8081 	bls.w	895e2 <_realloc_r+0x276>
   894e0:	6821      	ldr	r1, [r4, #0]
   894e2:	2a1b      	cmp	r2, #27
   894e4:	f8ca 1008 	str.w	r1, [sl, #8]
   894e8:	6861      	ldr	r1, [r4, #4]
   894ea:	f8ca 100c 	str.w	r1, [sl, #12]
   894ee:	f200 80ad 	bhi.w	8964c <_realloc_r+0x2e0>
   894f2:	f104 0008 	add.w	r0, r4, #8
   894f6:	f10a 0210 	add.w	r2, sl, #16
   894fa:	e074      	b.n	895e6 <_realloc_r+0x27a>
   894fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89500:	eba9 0a03 	sub.w	sl, r9, r3
   89504:	f8da 1004 	ldr.w	r1, [sl, #4]
   89508:	f021 0103 	bic.w	r1, r1, #3
   8950c:	187b      	adds	r3, r7, r1
   8950e:	4293      	cmp	r3, r2
   89510:	f6ff af59 	blt.w	893c6 <_realloc_r+0x5a>
   89514:	4655      	mov	r5, sl
   89516:	f8da 100c 	ldr.w	r1, [sl, #12]
   8951a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8951e:	1f3a      	subs	r2, r7, #4
   89520:	2a24      	cmp	r2, #36	; 0x24
   89522:	60c1      	str	r1, [r0, #12]
   89524:	6088      	str	r0, [r1, #8]
   89526:	d9d8      	bls.n	894da <_realloc_r+0x16e>
   89528:	4621      	mov	r1, r4
   8952a:	4628      	mov	r0, r5
   8952c:	461f      	mov	r7, r3
   8952e:	46d1      	mov	r9, sl
   89530:	f7ff fbb0 	bl	88c94 <memmove>
   89534:	e77a      	b.n	8942c <_realloc_r+0xc0>
   89536:	6841      	ldr	r1, [r0, #4]
   89538:	f106 0010 	add.w	r0, r6, #16
   8953c:	f021 0b03 	bic.w	fp, r1, #3
   89540:	44bb      	add	fp, r7
   89542:	4583      	cmp	fp, r0
   89544:	da58      	bge.n	895f8 <_realloc_r+0x28c>
   89546:	f01e 0f01 	tst.w	lr, #1
   8954a:	f47f af3c 	bne.w	893c6 <_realloc_r+0x5a>
   8954e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   89552:	eba9 0a01 	sub.w	sl, r9, r1
   89556:	f8da 1004 	ldr.w	r1, [sl, #4]
   8955a:	f021 0103 	bic.w	r1, r1, #3
   8955e:	448b      	add	fp, r1
   89560:	4558      	cmp	r0, fp
   89562:	dcd3      	bgt.n	8950c <_realloc_r+0x1a0>
   89564:	4655      	mov	r5, sl
   89566:	f8da 100c 	ldr.w	r1, [sl, #12]
   8956a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8956e:	1f3a      	subs	r2, r7, #4
   89570:	2a24      	cmp	r2, #36	; 0x24
   89572:	60c1      	str	r1, [r0, #12]
   89574:	6088      	str	r0, [r1, #8]
   89576:	f200 808d 	bhi.w	89694 <_realloc_r+0x328>
   8957a:	2a13      	cmp	r2, #19
   8957c:	f240 8087 	bls.w	8968e <_realloc_r+0x322>
   89580:	6821      	ldr	r1, [r4, #0]
   89582:	2a1b      	cmp	r2, #27
   89584:	f8ca 1008 	str.w	r1, [sl, #8]
   89588:	6861      	ldr	r1, [r4, #4]
   8958a:	f8ca 100c 	str.w	r1, [sl, #12]
   8958e:	f200 8088 	bhi.w	896a2 <_realloc_r+0x336>
   89592:	f104 0108 	add.w	r1, r4, #8
   89596:	f10a 0210 	add.w	r2, sl, #16
   8959a:	6808      	ldr	r0, [r1, #0]
   8959c:	6010      	str	r0, [r2, #0]
   8959e:	6848      	ldr	r0, [r1, #4]
   895a0:	6050      	str	r0, [r2, #4]
   895a2:	6889      	ldr	r1, [r1, #8]
   895a4:	6091      	str	r1, [r2, #8]
   895a6:	ebab 0206 	sub.w	r2, fp, r6
   895aa:	eb0a 0106 	add.w	r1, sl, r6
   895ae:	f042 0201 	orr.w	r2, r2, #1
   895b2:	6099      	str	r1, [r3, #8]
   895b4:	604a      	str	r2, [r1, #4]
   895b6:	f8da 3004 	ldr.w	r3, [sl, #4]
   895ba:	4640      	mov	r0, r8
   895bc:	f003 0301 	and.w	r3, r3, #1
   895c0:	431e      	orrs	r6, r3
   895c2:	f8ca 6004 	str.w	r6, [sl, #4]
   895c6:	f7ff fbcf 	bl	88d68 <__malloc_unlock>
   895ca:	e742      	b.n	89452 <_realloc_r+0xe6>
   895cc:	6823      	ldr	r3, [r4, #0]
   895ce:	2a1b      	cmp	r2, #27
   895d0:	6003      	str	r3, [r0, #0]
   895d2:	6863      	ldr	r3, [r4, #4]
   895d4:	6043      	str	r3, [r0, #4]
   895d6:	d827      	bhi.n	89628 <_realloc_r+0x2bc>
   895d8:	f100 0308 	add.w	r3, r0, #8
   895dc:	f104 0208 	add.w	r2, r4, #8
   895e0:	e70b      	b.n	893fa <_realloc_r+0x8e>
   895e2:	4620      	mov	r0, r4
   895e4:	462a      	mov	r2, r5
   895e6:	6801      	ldr	r1, [r0, #0]
   895e8:	461f      	mov	r7, r3
   895ea:	6011      	str	r1, [r2, #0]
   895ec:	6841      	ldr	r1, [r0, #4]
   895ee:	46d1      	mov	r9, sl
   895f0:	6051      	str	r1, [r2, #4]
   895f2:	6883      	ldr	r3, [r0, #8]
   895f4:	6093      	str	r3, [r2, #8]
   895f6:	e719      	b.n	8942c <_realloc_r+0xc0>
   895f8:	ebab 0b06 	sub.w	fp, fp, r6
   895fc:	eb09 0106 	add.w	r1, r9, r6
   89600:	f04b 0201 	orr.w	r2, fp, #1
   89604:	6099      	str	r1, [r3, #8]
   89606:	604a      	str	r2, [r1, #4]
   89608:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8960c:	4640      	mov	r0, r8
   8960e:	f003 0301 	and.w	r3, r3, #1
   89612:	431e      	orrs	r6, r3
   89614:	f844 6c04 	str.w	r6, [r4, #-4]
   89618:	f7ff fba6 	bl	88d68 <__malloc_unlock>
   8961c:	4625      	mov	r5, r4
   8961e:	e718      	b.n	89452 <_realloc_r+0xe6>
   89620:	4621      	mov	r1, r4
   89622:	f7ff fb37 	bl	88c94 <memmove>
   89626:	e6ee      	b.n	89406 <_realloc_r+0x9a>
   89628:	68a3      	ldr	r3, [r4, #8]
   8962a:	2a24      	cmp	r2, #36	; 0x24
   8962c:	6083      	str	r3, [r0, #8]
   8962e:	68e3      	ldr	r3, [r4, #12]
   89630:	60c3      	str	r3, [r0, #12]
   89632:	d018      	beq.n	89666 <_realloc_r+0x2fa>
   89634:	f100 0310 	add.w	r3, r0, #16
   89638:	f104 0210 	add.w	r2, r4, #16
   8963c:	e6dd      	b.n	893fa <_realloc_r+0x8e>
   8963e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   89642:	4625      	mov	r5, r4
   89644:	f023 0303 	bic.w	r3, r3, #3
   89648:	441f      	add	r7, r3
   8964a:	e6ef      	b.n	8942c <_realloc_r+0xc0>
   8964c:	68a1      	ldr	r1, [r4, #8]
   8964e:	2a24      	cmp	r2, #36	; 0x24
   89650:	f8ca 1010 	str.w	r1, [sl, #16]
   89654:	68e1      	ldr	r1, [r4, #12]
   89656:	f8ca 1014 	str.w	r1, [sl, #20]
   8965a:	d00d      	beq.n	89678 <_realloc_r+0x30c>
   8965c:	f104 0010 	add.w	r0, r4, #16
   89660:	f10a 0218 	add.w	r2, sl, #24
   89664:	e7bf      	b.n	895e6 <_realloc_r+0x27a>
   89666:	6922      	ldr	r2, [r4, #16]
   89668:	f100 0318 	add.w	r3, r0, #24
   8966c:	6102      	str	r2, [r0, #16]
   8966e:	6961      	ldr	r1, [r4, #20]
   89670:	f104 0218 	add.w	r2, r4, #24
   89674:	6141      	str	r1, [r0, #20]
   89676:	e6c0      	b.n	893fa <_realloc_r+0x8e>
   89678:	6922      	ldr	r2, [r4, #16]
   8967a:	f104 0018 	add.w	r0, r4, #24
   8967e:	f8ca 2018 	str.w	r2, [sl, #24]
   89682:	6961      	ldr	r1, [r4, #20]
   89684:	f10a 0220 	add.w	r2, sl, #32
   89688:	f8ca 101c 	str.w	r1, [sl, #28]
   8968c:	e7ab      	b.n	895e6 <_realloc_r+0x27a>
   8968e:	4621      	mov	r1, r4
   89690:	462a      	mov	r2, r5
   89692:	e782      	b.n	8959a <_realloc_r+0x22e>
   89694:	4621      	mov	r1, r4
   89696:	4628      	mov	r0, r5
   89698:	9301      	str	r3, [sp, #4]
   8969a:	f7ff fafb 	bl	88c94 <memmove>
   8969e:	9b01      	ldr	r3, [sp, #4]
   896a0:	e781      	b.n	895a6 <_realloc_r+0x23a>
   896a2:	68a1      	ldr	r1, [r4, #8]
   896a4:	2a24      	cmp	r2, #36	; 0x24
   896a6:	f8ca 1010 	str.w	r1, [sl, #16]
   896aa:	68e1      	ldr	r1, [r4, #12]
   896ac:	f8ca 1014 	str.w	r1, [sl, #20]
   896b0:	d006      	beq.n	896c0 <_realloc_r+0x354>
   896b2:	f104 0110 	add.w	r1, r4, #16
   896b6:	f10a 0218 	add.w	r2, sl, #24
   896ba:	e76e      	b.n	8959a <_realloc_r+0x22e>
   896bc:	20070848 	.word	0x20070848
   896c0:	6922      	ldr	r2, [r4, #16]
   896c2:	f104 0118 	add.w	r1, r4, #24
   896c6:	f8ca 2018 	str.w	r2, [sl, #24]
   896ca:	6960      	ldr	r0, [r4, #20]
   896cc:	f10a 0220 	add.w	r2, sl, #32
   896d0:	f8ca 001c 	str.w	r0, [sl, #28]
   896d4:	e761      	b.n	8959a <_realloc_r+0x22e>
   896d6:	bf00      	nop

000896d8 <_sbrk_r>:
   896d8:	b538      	push	{r3, r4, r5, lr}
   896da:	2300      	movs	r3, #0
   896dc:	4c06      	ldr	r4, [pc, #24]	; (896f8 <_sbrk_r+0x20>)
   896de:	4605      	mov	r5, r0
   896e0:	4608      	mov	r0, r1
   896e2:	6023      	str	r3, [r4, #0]
   896e4:	f7f9 ffdc 	bl	836a0 <_sbrk>
   896e8:	1c43      	adds	r3, r0, #1
   896ea:	d000      	beq.n	896ee <_sbrk_r+0x16>
   896ec:	bd38      	pop	{r3, r4, r5, pc}
   896ee:	6823      	ldr	r3, [r4, #0]
   896f0:	2b00      	cmp	r3, #0
   896f2:	d0fb      	beq.n	896ec <_sbrk_r+0x14>
   896f4:	602b      	str	r3, [r5, #0]
   896f6:	bd38      	pop	{r3, r4, r5, pc}
   896f8:	20075988 	.word	0x20075988

000896fc <__ssprint_r>:
   896fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89700:	6893      	ldr	r3, [r2, #8]
   89702:	b083      	sub	sp, #12
   89704:	4690      	mov	r8, r2
   89706:	2b00      	cmp	r3, #0
   89708:	d070      	beq.n	897ec <__ssprint_r+0xf0>
   8970a:	4682      	mov	sl, r0
   8970c:	460c      	mov	r4, r1
   8970e:	6817      	ldr	r7, [r2, #0]
   89710:	688d      	ldr	r5, [r1, #8]
   89712:	6808      	ldr	r0, [r1, #0]
   89714:	e042      	b.n	8979c <__ssprint_r+0xa0>
   89716:	89a3      	ldrh	r3, [r4, #12]
   89718:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8971c:	d02e      	beq.n	8977c <__ssprint_r+0x80>
   8971e:	6965      	ldr	r5, [r4, #20]
   89720:	6921      	ldr	r1, [r4, #16]
   89722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   89726:	eba0 0b01 	sub.w	fp, r0, r1
   8972a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8972e:	f10b 0001 	add.w	r0, fp, #1
   89732:	106d      	asrs	r5, r5, #1
   89734:	4430      	add	r0, r6
   89736:	42a8      	cmp	r0, r5
   89738:	462a      	mov	r2, r5
   8973a:	bf84      	itt	hi
   8973c:	4605      	movhi	r5, r0
   8973e:	462a      	movhi	r2, r5
   89740:	055b      	lsls	r3, r3, #21
   89742:	d538      	bpl.n	897b6 <__ssprint_r+0xba>
   89744:	4611      	mov	r1, r2
   89746:	4650      	mov	r0, sl
   89748:	f7fe ffa6 	bl	88698 <_malloc_r>
   8974c:	2800      	cmp	r0, #0
   8974e:	d03c      	beq.n	897ca <__ssprint_r+0xce>
   89750:	465a      	mov	r2, fp
   89752:	6921      	ldr	r1, [r4, #16]
   89754:	9001      	str	r0, [sp, #4]
   89756:	f7fc fa81 	bl	85c5c <memcpy>
   8975a:	89a2      	ldrh	r2, [r4, #12]
   8975c:	9b01      	ldr	r3, [sp, #4]
   8975e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89766:	81a2      	strh	r2, [r4, #12]
   89768:	eba5 020b 	sub.w	r2, r5, fp
   8976c:	eb03 000b 	add.w	r0, r3, fp
   89770:	6165      	str	r5, [r4, #20]
   89772:	46b3      	mov	fp, r6
   89774:	4635      	mov	r5, r6
   89776:	6123      	str	r3, [r4, #16]
   89778:	6020      	str	r0, [r4, #0]
   8977a:	60a2      	str	r2, [r4, #8]
   8977c:	465a      	mov	r2, fp
   8977e:	4649      	mov	r1, r9
   89780:	f7ff fa88 	bl	88c94 <memmove>
   89784:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89788:	68a2      	ldr	r2, [r4, #8]
   8978a:	6820      	ldr	r0, [r4, #0]
   8978c:	1b55      	subs	r5, r2, r5
   8978e:	4458      	add	r0, fp
   89790:	1b9e      	subs	r6, r3, r6
   89792:	60a5      	str	r5, [r4, #8]
   89794:	6020      	str	r0, [r4, #0]
   89796:	f8c8 6008 	str.w	r6, [r8, #8]
   8979a:	b33e      	cbz	r6, 897ec <__ssprint_r+0xf0>
   8979c:	687e      	ldr	r6, [r7, #4]
   8979e:	463b      	mov	r3, r7
   897a0:	3708      	adds	r7, #8
   897a2:	2e00      	cmp	r6, #0
   897a4:	d0fa      	beq.n	8979c <__ssprint_r+0xa0>
   897a6:	42ae      	cmp	r6, r5
   897a8:	f8d3 9000 	ldr.w	r9, [r3]
   897ac:	46ab      	mov	fp, r5
   897ae:	d2b2      	bcs.n	89716 <__ssprint_r+0x1a>
   897b0:	4635      	mov	r5, r6
   897b2:	46b3      	mov	fp, r6
   897b4:	e7e2      	b.n	8977c <__ssprint_r+0x80>
   897b6:	4650      	mov	r0, sl
   897b8:	f7ff fdd8 	bl	8936c <_realloc_r>
   897bc:	4603      	mov	r3, r0
   897be:	2800      	cmp	r0, #0
   897c0:	d1d2      	bne.n	89768 <__ssprint_r+0x6c>
   897c2:	6921      	ldr	r1, [r4, #16]
   897c4:	4650      	mov	r0, sl
   897c6:	f7fe fe6f 	bl	884a8 <_free_r>
   897ca:	230c      	movs	r3, #12
   897cc:	2200      	movs	r2, #0
   897ce:	f04f 30ff 	mov.w	r0, #4294967295
   897d2:	f8ca 3000 	str.w	r3, [sl]
   897d6:	89a3      	ldrh	r3, [r4, #12]
   897d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   897dc:	81a3      	strh	r3, [r4, #12]
   897de:	f8c8 2008 	str.w	r2, [r8, #8]
   897e2:	f8c8 2004 	str.w	r2, [r8, #4]
   897e6:	b003      	add	sp, #12
   897e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   897ec:	2000      	movs	r0, #0
   897ee:	f8c8 0004 	str.w	r0, [r8, #4]
   897f2:	b003      	add	sp, #12
   897f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000897f8 <__ascii_wctomb>:
   897f8:	b119      	cbz	r1, 89802 <__ascii_wctomb+0xa>
   897fa:	2aff      	cmp	r2, #255	; 0xff
   897fc:	d803      	bhi.n	89806 <__ascii_wctomb+0xe>
   897fe:	700a      	strb	r2, [r1, #0]
   89800:	2101      	movs	r1, #1
   89802:	4608      	mov	r0, r1
   89804:	4770      	bx	lr
   89806:	238a      	movs	r3, #138	; 0x8a
   89808:	f04f 31ff 	mov.w	r1, #4294967295
   8980c:	6003      	str	r3, [r0, #0]
   8980e:	e7f8      	b.n	89802 <__ascii_wctomb+0xa>

00089810 <__register_exitproc>:
   89810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   89814:	4d2c      	ldr	r5, [pc, #176]	; (898c8 <__register_exitproc+0xb8>)
   89816:	4606      	mov	r6, r0
   89818:	6828      	ldr	r0, [r5, #0]
   8981a:	4698      	mov	r8, r3
   8981c:	460f      	mov	r7, r1
   8981e:	4691      	mov	r9, r2
   89820:	f7fe ff36 	bl	88690 <__retarget_lock_acquire_recursive>
   89824:	4b29      	ldr	r3, [pc, #164]	; (898cc <__register_exitproc+0xbc>)
   89826:	681c      	ldr	r4, [r3, #0]
   89828:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8982c:	2b00      	cmp	r3, #0
   8982e:	d03e      	beq.n	898ae <__register_exitproc+0x9e>
   89830:	685a      	ldr	r2, [r3, #4]
   89832:	2a1f      	cmp	r2, #31
   89834:	dc1c      	bgt.n	89870 <__register_exitproc+0x60>
   89836:	f102 0e01 	add.w	lr, r2, #1
   8983a:	b176      	cbz	r6, 8985a <__register_exitproc+0x4a>
   8983c:	2101      	movs	r1, #1
   8983e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   89842:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   89846:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8984a:	4091      	lsls	r1, r2
   8984c:	4308      	orrs	r0, r1
   8984e:	2e02      	cmp	r6, #2
   89850:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   89854:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   89858:	d023      	beq.n	898a2 <__register_exitproc+0x92>
   8985a:	3202      	adds	r2, #2
   8985c:	f8c3 e004 	str.w	lr, [r3, #4]
   89860:	6828      	ldr	r0, [r5, #0]
   89862:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   89866:	f7fe ff15 	bl	88694 <__retarget_lock_release_recursive>
   8986a:	2000      	movs	r0, #0
   8986c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   89870:	4b17      	ldr	r3, [pc, #92]	; (898d0 <__register_exitproc+0xc0>)
   89872:	b30b      	cbz	r3, 898b8 <__register_exitproc+0xa8>
   89874:	f44f 70c8 	mov.w	r0, #400	; 0x190
   89878:	f3af 8000 	nop.w
   8987c:	4603      	mov	r3, r0
   8987e:	b1d8      	cbz	r0, 898b8 <__register_exitproc+0xa8>
   89880:	2000      	movs	r0, #0
   89882:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   89886:	f04f 0e01 	mov.w	lr, #1
   8988a:	6058      	str	r0, [r3, #4]
   8988c:	6019      	str	r1, [r3, #0]
   8988e:	4602      	mov	r2, r0
   89890:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   89894:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   89898:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8989c:	2e00      	cmp	r6, #0
   8989e:	d0dc      	beq.n	8985a <__register_exitproc+0x4a>
   898a0:	e7cc      	b.n	8983c <__register_exitproc+0x2c>
   898a2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   898a6:	4301      	orrs	r1, r0
   898a8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   898ac:	e7d5      	b.n	8985a <__register_exitproc+0x4a>
   898ae:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   898b2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   898b6:	e7bb      	b.n	89830 <__register_exitproc+0x20>
   898b8:	6828      	ldr	r0, [r5, #0]
   898ba:	f7fe feeb 	bl	88694 <__retarget_lock_release_recursive>
   898be:	f04f 30ff 	mov.w	r0, #4294967295
   898c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   898c6:	bf00      	nop
   898c8:	200706d8 	.word	0x200706d8
   898cc:	0008a968 	.word	0x0008a968
   898d0:	00000000 	.word	0x00000000

000898d4 <_calloc_r>:
   898d4:	b510      	push	{r4, lr}
   898d6:	fb02 f101 	mul.w	r1, r2, r1
   898da:	f7fe fedd 	bl	88698 <_malloc_r>
   898de:	4604      	mov	r4, r0
   898e0:	b1d8      	cbz	r0, 8991a <_calloc_r+0x46>
   898e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   898e6:	f022 0203 	bic.w	r2, r2, #3
   898ea:	3a04      	subs	r2, #4
   898ec:	2a24      	cmp	r2, #36	; 0x24
   898ee:	d818      	bhi.n	89922 <_calloc_r+0x4e>
   898f0:	2a13      	cmp	r2, #19
   898f2:	d914      	bls.n	8991e <_calloc_r+0x4a>
   898f4:	2300      	movs	r3, #0
   898f6:	2a1b      	cmp	r2, #27
   898f8:	6003      	str	r3, [r0, #0]
   898fa:	6043      	str	r3, [r0, #4]
   898fc:	d916      	bls.n	8992c <_calloc_r+0x58>
   898fe:	2a24      	cmp	r2, #36	; 0x24
   89900:	6083      	str	r3, [r0, #8]
   89902:	60c3      	str	r3, [r0, #12]
   89904:	bf11      	iteee	ne
   89906:	f100 0210 	addne.w	r2, r0, #16
   8990a:	6103      	streq	r3, [r0, #16]
   8990c:	6143      	streq	r3, [r0, #20]
   8990e:	f100 0218 	addeq.w	r2, r0, #24
   89912:	2300      	movs	r3, #0
   89914:	6013      	str	r3, [r2, #0]
   89916:	6053      	str	r3, [r2, #4]
   89918:	6093      	str	r3, [r2, #8]
   8991a:	4620      	mov	r0, r4
   8991c:	bd10      	pop	{r4, pc}
   8991e:	4602      	mov	r2, r0
   89920:	e7f7      	b.n	89912 <_calloc_r+0x3e>
   89922:	2100      	movs	r1, #0
   89924:	f7fc fa10 	bl	85d48 <memset>
   89928:	4620      	mov	r0, r4
   8992a:	bd10      	pop	{r4, pc}
   8992c:	f100 0208 	add.w	r2, r0, #8
   89930:	e7ef      	b.n	89912 <_calloc_r+0x3e>
   89932:	bf00      	nop

00089934 <__aeabi_drsub>:
   89934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   89938:	e002      	b.n	89940 <__adddf3>
   8993a:	bf00      	nop

0008993c <__aeabi_dsub>:
   8993c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00089940 <__adddf3>:
   89940:	b530      	push	{r4, r5, lr}
   89942:	ea4f 0441 	mov.w	r4, r1, lsl #1
   89946:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8994a:	ea94 0f05 	teq	r4, r5
   8994e:	bf08      	it	eq
   89950:	ea90 0f02 	teqeq	r0, r2
   89954:	bf1f      	itttt	ne
   89956:	ea54 0c00 	orrsne.w	ip, r4, r0
   8995a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8995e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   89962:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89966:	f000 80e2 	beq.w	89b2e <__adddf3+0x1ee>
   8996a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8996e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   89972:	bfb8      	it	lt
   89974:	426d      	neglt	r5, r5
   89976:	dd0c      	ble.n	89992 <__adddf3+0x52>
   89978:	442c      	add	r4, r5
   8997a:	ea80 0202 	eor.w	r2, r0, r2
   8997e:	ea81 0303 	eor.w	r3, r1, r3
   89982:	ea82 0000 	eor.w	r0, r2, r0
   89986:	ea83 0101 	eor.w	r1, r3, r1
   8998a:	ea80 0202 	eor.w	r2, r0, r2
   8998e:	ea81 0303 	eor.w	r3, r1, r3
   89992:	2d36      	cmp	r5, #54	; 0x36
   89994:	bf88      	it	hi
   89996:	bd30      	pophi	{r4, r5, pc}
   89998:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8999c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   899a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   899a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   899a8:	d002      	beq.n	899b0 <__adddf3+0x70>
   899aa:	4240      	negs	r0, r0
   899ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   899b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   899b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   899b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   899bc:	d002      	beq.n	899c4 <__adddf3+0x84>
   899be:	4252      	negs	r2, r2
   899c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   899c4:	ea94 0f05 	teq	r4, r5
   899c8:	f000 80a7 	beq.w	89b1a <__adddf3+0x1da>
   899cc:	f1a4 0401 	sub.w	r4, r4, #1
   899d0:	f1d5 0e20 	rsbs	lr, r5, #32
   899d4:	db0d      	blt.n	899f2 <__adddf3+0xb2>
   899d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   899da:	fa22 f205 	lsr.w	r2, r2, r5
   899de:	1880      	adds	r0, r0, r2
   899e0:	f141 0100 	adc.w	r1, r1, #0
   899e4:	fa03 f20e 	lsl.w	r2, r3, lr
   899e8:	1880      	adds	r0, r0, r2
   899ea:	fa43 f305 	asr.w	r3, r3, r5
   899ee:	4159      	adcs	r1, r3
   899f0:	e00e      	b.n	89a10 <__adddf3+0xd0>
   899f2:	f1a5 0520 	sub.w	r5, r5, #32
   899f6:	f10e 0e20 	add.w	lr, lr, #32
   899fa:	2a01      	cmp	r2, #1
   899fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   89a00:	bf28      	it	cs
   89a02:	f04c 0c02 	orrcs.w	ip, ip, #2
   89a06:	fa43 f305 	asr.w	r3, r3, r5
   89a0a:	18c0      	adds	r0, r0, r3
   89a0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   89a10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89a14:	d507      	bpl.n	89a26 <__adddf3+0xe6>
   89a16:	f04f 0e00 	mov.w	lr, #0
   89a1a:	f1dc 0c00 	rsbs	ip, ip, #0
   89a1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   89a22:	eb6e 0101 	sbc.w	r1, lr, r1
   89a26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   89a2a:	d31b      	bcc.n	89a64 <__adddf3+0x124>
   89a2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   89a30:	d30c      	bcc.n	89a4c <__adddf3+0x10c>
   89a32:	0849      	lsrs	r1, r1, #1
   89a34:	ea5f 0030 	movs.w	r0, r0, rrx
   89a38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   89a3c:	f104 0401 	add.w	r4, r4, #1
   89a40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   89a44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   89a48:	f080 809a 	bcs.w	89b80 <__adddf3+0x240>
   89a4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   89a50:	bf08      	it	eq
   89a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   89a56:	f150 0000 	adcs.w	r0, r0, #0
   89a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89a5e:	ea41 0105 	orr.w	r1, r1, r5
   89a62:	bd30      	pop	{r4, r5, pc}
   89a64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   89a68:	4140      	adcs	r0, r0
   89a6a:	eb41 0101 	adc.w	r1, r1, r1
   89a6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89a72:	f1a4 0401 	sub.w	r4, r4, #1
   89a76:	d1e9      	bne.n	89a4c <__adddf3+0x10c>
   89a78:	f091 0f00 	teq	r1, #0
   89a7c:	bf04      	itt	eq
   89a7e:	4601      	moveq	r1, r0
   89a80:	2000      	moveq	r0, #0
   89a82:	fab1 f381 	clz	r3, r1
   89a86:	bf08      	it	eq
   89a88:	3320      	addeq	r3, #32
   89a8a:	f1a3 030b 	sub.w	r3, r3, #11
   89a8e:	f1b3 0220 	subs.w	r2, r3, #32
   89a92:	da0c      	bge.n	89aae <__adddf3+0x16e>
   89a94:	320c      	adds	r2, #12
   89a96:	dd08      	ble.n	89aaa <__adddf3+0x16a>
   89a98:	f102 0c14 	add.w	ip, r2, #20
   89a9c:	f1c2 020c 	rsb	r2, r2, #12
   89aa0:	fa01 f00c 	lsl.w	r0, r1, ip
   89aa4:	fa21 f102 	lsr.w	r1, r1, r2
   89aa8:	e00c      	b.n	89ac4 <__adddf3+0x184>
   89aaa:	f102 0214 	add.w	r2, r2, #20
   89aae:	bfd8      	it	le
   89ab0:	f1c2 0c20 	rsble	ip, r2, #32
   89ab4:	fa01 f102 	lsl.w	r1, r1, r2
   89ab8:	fa20 fc0c 	lsr.w	ip, r0, ip
   89abc:	bfdc      	itt	le
   89abe:	ea41 010c 	orrle.w	r1, r1, ip
   89ac2:	4090      	lslle	r0, r2
   89ac4:	1ae4      	subs	r4, r4, r3
   89ac6:	bfa2      	ittt	ge
   89ac8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   89acc:	4329      	orrge	r1, r5
   89ace:	bd30      	popge	{r4, r5, pc}
   89ad0:	ea6f 0404 	mvn.w	r4, r4
   89ad4:	3c1f      	subs	r4, #31
   89ad6:	da1c      	bge.n	89b12 <__adddf3+0x1d2>
   89ad8:	340c      	adds	r4, #12
   89ada:	dc0e      	bgt.n	89afa <__adddf3+0x1ba>
   89adc:	f104 0414 	add.w	r4, r4, #20
   89ae0:	f1c4 0220 	rsb	r2, r4, #32
   89ae4:	fa20 f004 	lsr.w	r0, r0, r4
   89ae8:	fa01 f302 	lsl.w	r3, r1, r2
   89aec:	ea40 0003 	orr.w	r0, r0, r3
   89af0:	fa21 f304 	lsr.w	r3, r1, r4
   89af4:	ea45 0103 	orr.w	r1, r5, r3
   89af8:	bd30      	pop	{r4, r5, pc}
   89afa:	f1c4 040c 	rsb	r4, r4, #12
   89afe:	f1c4 0220 	rsb	r2, r4, #32
   89b02:	fa20 f002 	lsr.w	r0, r0, r2
   89b06:	fa01 f304 	lsl.w	r3, r1, r4
   89b0a:	ea40 0003 	orr.w	r0, r0, r3
   89b0e:	4629      	mov	r1, r5
   89b10:	bd30      	pop	{r4, r5, pc}
   89b12:	fa21 f004 	lsr.w	r0, r1, r4
   89b16:	4629      	mov	r1, r5
   89b18:	bd30      	pop	{r4, r5, pc}
   89b1a:	f094 0f00 	teq	r4, #0
   89b1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   89b22:	bf06      	itte	eq
   89b24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   89b28:	3401      	addeq	r4, #1
   89b2a:	3d01      	subne	r5, #1
   89b2c:	e74e      	b.n	899cc <__adddf3+0x8c>
   89b2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   89b32:	bf18      	it	ne
   89b34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89b38:	d029      	beq.n	89b8e <__adddf3+0x24e>
   89b3a:	ea94 0f05 	teq	r4, r5
   89b3e:	bf08      	it	eq
   89b40:	ea90 0f02 	teqeq	r0, r2
   89b44:	d005      	beq.n	89b52 <__adddf3+0x212>
   89b46:	ea54 0c00 	orrs.w	ip, r4, r0
   89b4a:	bf04      	itt	eq
   89b4c:	4619      	moveq	r1, r3
   89b4e:	4610      	moveq	r0, r2
   89b50:	bd30      	pop	{r4, r5, pc}
   89b52:	ea91 0f03 	teq	r1, r3
   89b56:	bf1e      	ittt	ne
   89b58:	2100      	movne	r1, #0
   89b5a:	2000      	movne	r0, #0
   89b5c:	bd30      	popne	{r4, r5, pc}
   89b5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   89b62:	d105      	bne.n	89b70 <__adddf3+0x230>
   89b64:	0040      	lsls	r0, r0, #1
   89b66:	4149      	adcs	r1, r1
   89b68:	bf28      	it	cs
   89b6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   89b6e:	bd30      	pop	{r4, r5, pc}
   89b70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   89b74:	bf3c      	itt	cc
   89b76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   89b7a:	bd30      	popcc	{r4, r5, pc}
   89b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89b80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   89b84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   89b88:	f04f 0000 	mov.w	r0, #0
   89b8c:	bd30      	pop	{r4, r5, pc}
   89b8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   89b92:	bf1a      	itte	ne
   89b94:	4619      	movne	r1, r3
   89b96:	4610      	movne	r0, r2
   89b98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   89b9c:	bf1c      	itt	ne
   89b9e:	460b      	movne	r3, r1
   89ba0:	4602      	movne	r2, r0
   89ba2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   89ba6:	bf06      	itte	eq
   89ba8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   89bac:	ea91 0f03 	teqeq	r1, r3
   89bb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   89bb4:	bd30      	pop	{r4, r5, pc}
   89bb6:	bf00      	nop

00089bb8 <__aeabi_ui2d>:
   89bb8:	f090 0f00 	teq	r0, #0
   89bbc:	bf04      	itt	eq
   89bbe:	2100      	moveq	r1, #0
   89bc0:	4770      	bxeq	lr
   89bc2:	b530      	push	{r4, r5, lr}
   89bc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89bc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89bcc:	f04f 0500 	mov.w	r5, #0
   89bd0:	f04f 0100 	mov.w	r1, #0
   89bd4:	e750      	b.n	89a78 <__adddf3+0x138>
   89bd6:	bf00      	nop

00089bd8 <__aeabi_i2d>:
   89bd8:	f090 0f00 	teq	r0, #0
   89bdc:	bf04      	itt	eq
   89bde:	2100      	moveq	r1, #0
   89be0:	4770      	bxeq	lr
   89be2:	b530      	push	{r4, r5, lr}
   89be4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89be8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89bec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   89bf0:	bf48      	it	mi
   89bf2:	4240      	negmi	r0, r0
   89bf4:	f04f 0100 	mov.w	r1, #0
   89bf8:	e73e      	b.n	89a78 <__adddf3+0x138>
   89bfa:	bf00      	nop

00089bfc <__aeabi_f2d>:
   89bfc:	0042      	lsls	r2, r0, #1
   89bfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   89c02:	ea4f 0131 	mov.w	r1, r1, rrx
   89c06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   89c0a:	bf1f      	itttt	ne
   89c0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   89c10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89c14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   89c18:	4770      	bxne	lr
   89c1a:	f092 0f00 	teq	r2, #0
   89c1e:	bf14      	ite	ne
   89c20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   89c24:	4770      	bxeq	lr
   89c26:	b530      	push	{r4, r5, lr}
   89c28:	f44f 7460 	mov.w	r4, #896	; 0x380
   89c2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89c30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   89c34:	e720      	b.n	89a78 <__adddf3+0x138>
   89c36:	bf00      	nop

00089c38 <__aeabi_ul2d>:
   89c38:	ea50 0201 	orrs.w	r2, r0, r1
   89c3c:	bf08      	it	eq
   89c3e:	4770      	bxeq	lr
   89c40:	b530      	push	{r4, r5, lr}
   89c42:	f04f 0500 	mov.w	r5, #0
   89c46:	e00a      	b.n	89c5e <__aeabi_l2d+0x16>

00089c48 <__aeabi_l2d>:
   89c48:	ea50 0201 	orrs.w	r2, r0, r1
   89c4c:	bf08      	it	eq
   89c4e:	4770      	bxeq	lr
   89c50:	b530      	push	{r4, r5, lr}
   89c52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   89c56:	d502      	bpl.n	89c5e <__aeabi_l2d+0x16>
   89c58:	4240      	negs	r0, r0
   89c5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89c5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   89c62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   89c66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   89c6a:	f43f aedc 	beq.w	89a26 <__adddf3+0xe6>
   89c6e:	f04f 0203 	mov.w	r2, #3
   89c72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   89c76:	bf18      	it	ne
   89c78:	3203      	addne	r2, #3
   89c7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   89c7e:	bf18      	it	ne
   89c80:	3203      	addne	r2, #3
   89c82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   89c86:	f1c2 0320 	rsb	r3, r2, #32
   89c8a:	fa00 fc03 	lsl.w	ip, r0, r3
   89c8e:	fa20 f002 	lsr.w	r0, r0, r2
   89c92:	fa01 fe03 	lsl.w	lr, r1, r3
   89c96:	ea40 000e 	orr.w	r0, r0, lr
   89c9a:	fa21 f102 	lsr.w	r1, r1, r2
   89c9e:	4414      	add	r4, r2
   89ca0:	e6c1      	b.n	89a26 <__adddf3+0xe6>
   89ca2:	bf00      	nop

00089ca4 <__aeabi_dmul>:
   89ca4:	b570      	push	{r4, r5, r6, lr}
   89ca6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   89caa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   89cae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   89cb2:	bf1d      	ittte	ne
   89cb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   89cb8:	ea94 0f0c 	teqne	r4, ip
   89cbc:	ea95 0f0c 	teqne	r5, ip
   89cc0:	f000 f8de 	bleq	89e80 <__aeabi_dmul+0x1dc>
   89cc4:	442c      	add	r4, r5
   89cc6:	ea81 0603 	eor.w	r6, r1, r3
   89cca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   89cce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   89cd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   89cd6:	bf18      	it	ne
   89cd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   89cdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   89ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89ce4:	d038      	beq.n	89d58 <__aeabi_dmul+0xb4>
   89ce6:	fba0 ce02 	umull	ip, lr, r0, r2
   89cea:	f04f 0500 	mov.w	r5, #0
   89cee:	fbe1 e502 	umlal	lr, r5, r1, r2
   89cf2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   89cf6:	fbe0 e503 	umlal	lr, r5, r0, r3
   89cfa:	f04f 0600 	mov.w	r6, #0
   89cfe:	fbe1 5603 	umlal	r5, r6, r1, r3
   89d02:	f09c 0f00 	teq	ip, #0
   89d06:	bf18      	it	ne
   89d08:	f04e 0e01 	orrne.w	lr, lr, #1
   89d0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   89d10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   89d14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   89d18:	d204      	bcs.n	89d24 <__aeabi_dmul+0x80>
   89d1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   89d1e:	416d      	adcs	r5, r5
   89d20:	eb46 0606 	adc.w	r6, r6, r6
   89d24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   89d28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   89d2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   89d30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   89d34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   89d38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   89d3c:	bf88      	it	hi
   89d3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   89d42:	d81e      	bhi.n	89d82 <__aeabi_dmul+0xde>
   89d44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   89d48:	bf08      	it	eq
   89d4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   89d4e:	f150 0000 	adcs.w	r0, r0, #0
   89d52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89d56:	bd70      	pop	{r4, r5, r6, pc}
   89d58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   89d5c:	ea46 0101 	orr.w	r1, r6, r1
   89d60:	ea40 0002 	orr.w	r0, r0, r2
   89d64:	ea81 0103 	eor.w	r1, r1, r3
   89d68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   89d6c:	bfc2      	ittt	gt
   89d6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   89d72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   89d76:	bd70      	popgt	{r4, r5, r6, pc}
   89d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   89d7c:	f04f 0e00 	mov.w	lr, #0
   89d80:	3c01      	subs	r4, #1
   89d82:	f300 80ab 	bgt.w	89edc <__aeabi_dmul+0x238>
   89d86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   89d8a:	bfde      	ittt	le
   89d8c:	2000      	movle	r0, #0
   89d8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   89d92:	bd70      	pople	{r4, r5, r6, pc}
   89d94:	f1c4 0400 	rsb	r4, r4, #0
   89d98:	3c20      	subs	r4, #32
   89d9a:	da35      	bge.n	89e08 <__aeabi_dmul+0x164>
   89d9c:	340c      	adds	r4, #12
   89d9e:	dc1b      	bgt.n	89dd8 <__aeabi_dmul+0x134>
   89da0:	f104 0414 	add.w	r4, r4, #20
   89da4:	f1c4 0520 	rsb	r5, r4, #32
   89da8:	fa00 f305 	lsl.w	r3, r0, r5
   89dac:	fa20 f004 	lsr.w	r0, r0, r4
   89db0:	fa01 f205 	lsl.w	r2, r1, r5
   89db4:	ea40 0002 	orr.w	r0, r0, r2
   89db8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   89dbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   89dc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   89dc4:	fa21 f604 	lsr.w	r6, r1, r4
   89dc8:	eb42 0106 	adc.w	r1, r2, r6
   89dcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   89dd0:	bf08      	it	eq
   89dd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   89dd6:	bd70      	pop	{r4, r5, r6, pc}
   89dd8:	f1c4 040c 	rsb	r4, r4, #12
   89ddc:	f1c4 0520 	rsb	r5, r4, #32
   89de0:	fa00 f304 	lsl.w	r3, r0, r4
   89de4:	fa20 f005 	lsr.w	r0, r0, r5
   89de8:	fa01 f204 	lsl.w	r2, r1, r4
   89dec:	ea40 0002 	orr.w	r0, r0, r2
   89df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   89df4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   89df8:	f141 0100 	adc.w	r1, r1, #0
   89dfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   89e00:	bf08      	it	eq
   89e02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   89e06:	bd70      	pop	{r4, r5, r6, pc}
   89e08:	f1c4 0520 	rsb	r5, r4, #32
   89e0c:	fa00 f205 	lsl.w	r2, r0, r5
   89e10:	ea4e 0e02 	orr.w	lr, lr, r2
   89e14:	fa20 f304 	lsr.w	r3, r0, r4
   89e18:	fa01 f205 	lsl.w	r2, r1, r5
   89e1c:	ea43 0302 	orr.w	r3, r3, r2
   89e20:	fa21 f004 	lsr.w	r0, r1, r4
   89e24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   89e28:	fa21 f204 	lsr.w	r2, r1, r4
   89e2c:	ea20 0002 	bic.w	r0, r0, r2
   89e30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   89e34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   89e38:	bf08      	it	eq
   89e3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   89e3e:	bd70      	pop	{r4, r5, r6, pc}
   89e40:	f094 0f00 	teq	r4, #0
   89e44:	d10f      	bne.n	89e66 <__aeabi_dmul+0x1c2>
   89e46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   89e4a:	0040      	lsls	r0, r0, #1
   89e4c:	eb41 0101 	adc.w	r1, r1, r1
   89e50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89e54:	bf08      	it	eq
   89e56:	3c01      	subeq	r4, #1
   89e58:	d0f7      	beq.n	89e4a <__aeabi_dmul+0x1a6>
   89e5a:	ea41 0106 	orr.w	r1, r1, r6
   89e5e:	f095 0f00 	teq	r5, #0
   89e62:	bf18      	it	ne
   89e64:	4770      	bxne	lr
   89e66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   89e6a:	0052      	lsls	r2, r2, #1
   89e6c:	eb43 0303 	adc.w	r3, r3, r3
   89e70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   89e74:	bf08      	it	eq
   89e76:	3d01      	subeq	r5, #1
   89e78:	d0f7      	beq.n	89e6a <__aeabi_dmul+0x1c6>
   89e7a:	ea43 0306 	orr.w	r3, r3, r6
   89e7e:	4770      	bx	lr
   89e80:	ea94 0f0c 	teq	r4, ip
   89e84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   89e88:	bf18      	it	ne
   89e8a:	ea95 0f0c 	teqne	r5, ip
   89e8e:	d00c      	beq.n	89eaa <__aeabi_dmul+0x206>
   89e90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   89e94:	bf18      	it	ne
   89e96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   89e9a:	d1d1      	bne.n	89e40 <__aeabi_dmul+0x19c>
   89e9c:	ea81 0103 	eor.w	r1, r1, r3
   89ea0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   89ea4:	f04f 0000 	mov.w	r0, #0
   89ea8:	bd70      	pop	{r4, r5, r6, pc}
   89eaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   89eae:	bf06      	itte	eq
   89eb0:	4610      	moveq	r0, r2
   89eb2:	4619      	moveq	r1, r3
   89eb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   89eb8:	d019      	beq.n	89eee <__aeabi_dmul+0x24a>
   89eba:	ea94 0f0c 	teq	r4, ip
   89ebe:	d102      	bne.n	89ec6 <__aeabi_dmul+0x222>
   89ec0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   89ec4:	d113      	bne.n	89eee <__aeabi_dmul+0x24a>
   89ec6:	ea95 0f0c 	teq	r5, ip
   89eca:	d105      	bne.n	89ed8 <__aeabi_dmul+0x234>
   89ecc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   89ed0:	bf1c      	itt	ne
   89ed2:	4610      	movne	r0, r2
   89ed4:	4619      	movne	r1, r3
   89ed6:	d10a      	bne.n	89eee <__aeabi_dmul+0x24a>
   89ed8:	ea81 0103 	eor.w	r1, r1, r3
   89edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   89ee0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   89ee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   89ee8:	f04f 0000 	mov.w	r0, #0
   89eec:	bd70      	pop	{r4, r5, r6, pc}
   89eee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   89ef2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   89ef6:	bd70      	pop	{r4, r5, r6, pc}

00089ef8 <__aeabi_ddiv>:
   89ef8:	b570      	push	{r4, r5, r6, lr}
   89efa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   89efe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   89f02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   89f06:	bf1d      	ittte	ne
   89f08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   89f0c:	ea94 0f0c 	teqne	r4, ip
   89f10:	ea95 0f0c 	teqne	r5, ip
   89f14:	f000 f8a7 	bleq	8a066 <__aeabi_ddiv+0x16e>
   89f18:	eba4 0405 	sub.w	r4, r4, r5
   89f1c:	ea81 0e03 	eor.w	lr, r1, r3
   89f20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   89f24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   89f28:	f000 8088 	beq.w	8a03c <__aeabi_ddiv+0x144>
   89f2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   89f30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   89f34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   89f38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   89f3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   89f40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   89f44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   89f48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   89f4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   89f50:	429d      	cmp	r5, r3
   89f52:	bf08      	it	eq
   89f54:	4296      	cmpeq	r6, r2
   89f56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   89f5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   89f5e:	d202      	bcs.n	89f66 <__aeabi_ddiv+0x6e>
   89f60:	085b      	lsrs	r3, r3, #1
   89f62:	ea4f 0232 	mov.w	r2, r2, rrx
   89f66:	1ab6      	subs	r6, r6, r2
   89f68:	eb65 0503 	sbc.w	r5, r5, r3
   89f6c:	085b      	lsrs	r3, r3, #1
   89f6e:	ea4f 0232 	mov.w	r2, r2, rrx
   89f72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   89f76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   89f7a:	ebb6 0e02 	subs.w	lr, r6, r2
   89f7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   89f82:	bf22      	ittt	cs
   89f84:	1ab6      	subcs	r6, r6, r2
   89f86:	4675      	movcs	r5, lr
   89f88:	ea40 000c 	orrcs.w	r0, r0, ip
   89f8c:	085b      	lsrs	r3, r3, #1
   89f8e:	ea4f 0232 	mov.w	r2, r2, rrx
   89f92:	ebb6 0e02 	subs.w	lr, r6, r2
   89f96:	eb75 0e03 	sbcs.w	lr, r5, r3
   89f9a:	bf22      	ittt	cs
   89f9c:	1ab6      	subcs	r6, r6, r2
   89f9e:	4675      	movcs	r5, lr
   89fa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   89fa4:	085b      	lsrs	r3, r3, #1
   89fa6:	ea4f 0232 	mov.w	r2, r2, rrx
   89faa:	ebb6 0e02 	subs.w	lr, r6, r2
   89fae:	eb75 0e03 	sbcs.w	lr, r5, r3
   89fb2:	bf22      	ittt	cs
   89fb4:	1ab6      	subcs	r6, r6, r2
   89fb6:	4675      	movcs	r5, lr
   89fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   89fbc:	085b      	lsrs	r3, r3, #1
   89fbe:	ea4f 0232 	mov.w	r2, r2, rrx
   89fc2:	ebb6 0e02 	subs.w	lr, r6, r2
   89fc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   89fca:	bf22      	ittt	cs
   89fcc:	1ab6      	subcs	r6, r6, r2
   89fce:	4675      	movcs	r5, lr
   89fd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   89fd4:	ea55 0e06 	orrs.w	lr, r5, r6
   89fd8:	d018      	beq.n	8a00c <__aeabi_ddiv+0x114>
   89fda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   89fde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   89fe2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   89fe6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   89fea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   89fee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   89ff2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   89ff6:	d1c0      	bne.n	89f7a <__aeabi_ddiv+0x82>
   89ff8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89ffc:	d10b      	bne.n	8a016 <__aeabi_ddiv+0x11e>
   89ffe:	ea41 0100 	orr.w	r1, r1, r0
   8a002:	f04f 0000 	mov.w	r0, #0
   8a006:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8a00a:	e7b6      	b.n	89f7a <__aeabi_ddiv+0x82>
   8a00c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a010:	bf04      	itt	eq
   8a012:	4301      	orreq	r1, r0
   8a014:	2000      	moveq	r0, #0
   8a016:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a01a:	bf88      	it	hi
   8a01c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a020:	f63f aeaf 	bhi.w	89d82 <__aeabi_dmul+0xde>
   8a024:	ebb5 0c03 	subs.w	ip, r5, r3
   8a028:	bf04      	itt	eq
   8a02a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8a02e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a032:	f150 0000 	adcs.w	r0, r0, #0
   8a036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a03a:	bd70      	pop	{r4, r5, r6, pc}
   8a03c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8a040:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8a044:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8a048:	bfc2      	ittt	gt
   8a04a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a04e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a052:	bd70      	popgt	{r4, r5, r6, pc}
   8a054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a058:	f04f 0e00 	mov.w	lr, #0
   8a05c:	3c01      	subs	r4, #1
   8a05e:	e690      	b.n	89d82 <__aeabi_dmul+0xde>
   8a060:	ea45 0e06 	orr.w	lr, r5, r6
   8a064:	e68d      	b.n	89d82 <__aeabi_dmul+0xde>
   8a066:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a06a:	ea94 0f0c 	teq	r4, ip
   8a06e:	bf08      	it	eq
   8a070:	ea95 0f0c 	teqeq	r5, ip
   8a074:	f43f af3b 	beq.w	89eee <__aeabi_dmul+0x24a>
   8a078:	ea94 0f0c 	teq	r4, ip
   8a07c:	d10a      	bne.n	8a094 <__aeabi_ddiv+0x19c>
   8a07e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a082:	f47f af34 	bne.w	89eee <__aeabi_dmul+0x24a>
   8a086:	ea95 0f0c 	teq	r5, ip
   8a08a:	f47f af25 	bne.w	89ed8 <__aeabi_dmul+0x234>
   8a08e:	4610      	mov	r0, r2
   8a090:	4619      	mov	r1, r3
   8a092:	e72c      	b.n	89eee <__aeabi_dmul+0x24a>
   8a094:	ea95 0f0c 	teq	r5, ip
   8a098:	d106      	bne.n	8a0a8 <__aeabi_ddiv+0x1b0>
   8a09a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a09e:	f43f aefd 	beq.w	89e9c <__aeabi_dmul+0x1f8>
   8a0a2:	4610      	mov	r0, r2
   8a0a4:	4619      	mov	r1, r3
   8a0a6:	e722      	b.n	89eee <__aeabi_dmul+0x24a>
   8a0a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a0ac:	bf18      	it	ne
   8a0ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a0b2:	f47f aec5 	bne.w	89e40 <__aeabi_dmul+0x19c>
   8a0b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8a0ba:	f47f af0d 	bne.w	89ed8 <__aeabi_dmul+0x234>
   8a0be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8a0c2:	f47f aeeb 	bne.w	89e9c <__aeabi_dmul+0x1f8>
   8a0c6:	e712      	b.n	89eee <__aeabi_dmul+0x24a>

0008a0c8 <__gedf2>:
   8a0c8:	f04f 3cff 	mov.w	ip, #4294967295
   8a0cc:	e006      	b.n	8a0dc <__cmpdf2+0x4>
   8a0ce:	bf00      	nop

0008a0d0 <__ledf2>:
   8a0d0:	f04f 0c01 	mov.w	ip, #1
   8a0d4:	e002      	b.n	8a0dc <__cmpdf2+0x4>
   8a0d6:	bf00      	nop

0008a0d8 <__cmpdf2>:
   8a0d8:	f04f 0c01 	mov.w	ip, #1
   8a0dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   8a0e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a0e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a0e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a0ec:	bf18      	it	ne
   8a0ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8a0f2:	d01b      	beq.n	8a12c <__cmpdf2+0x54>
   8a0f4:	b001      	add	sp, #4
   8a0f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8a0fa:	bf0c      	ite	eq
   8a0fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8a100:	ea91 0f03 	teqne	r1, r3
   8a104:	bf02      	ittt	eq
   8a106:	ea90 0f02 	teqeq	r0, r2
   8a10a:	2000      	moveq	r0, #0
   8a10c:	4770      	bxeq	lr
   8a10e:	f110 0f00 	cmn.w	r0, #0
   8a112:	ea91 0f03 	teq	r1, r3
   8a116:	bf58      	it	pl
   8a118:	4299      	cmppl	r1, r3
   8a11a:	bf08      	it	eq
   8a11c:	4290      	cmpeq	r0, r2
   8a11e:	bf2c      	ite	cs
   8a120:	17d8      	asrcs	r0, r3, #31
   8a122:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8a126:	f040 0001 	orr.w	r0, r0, #1
   8a12a:	4770      	bx	lr
   8a12c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a130:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a134:	d102      	bne.n	8a13c <__cmpdf2+0x64>
   8a136:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a13a:	d107      	bne.n	8a14c <__cmpdf2+0x74>
   8a13c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a144:	d1d6      	bne.n	8a0f4 <__cmpdf2+0x1c>
   8a146:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a14a:	d0d3      	beq.n	8a0f4 <__cmpdf2+0x1c>
   8a14c:	f85d 0b04 	ldr.w	r0, [sp], #4
   8a150:	4770      	bx	lr
   8a152:	bf00      	nop

0008a154 <__aeabi_cdrcmple>:
   8a154:	4684      	mov	ip, r0
   8a156:	4610      	mov	r0, r2
   8a158:	4662      	mov	r2, ip
   8a15a:	468c      	mov	ip, r1
   8a15c:	4619      	mov	r1, r3
   8a15e:	4663      	mov	r3, ip
   8a160:	e000      	b.n	8a164 <__aeabi_cdcmpeq>
   8a162:	bf00      	nop

0008a164 <__aeabi_cdcmpeq>:
   8a164:	b501      	push	{r0, lr}
   8a166:	f7ff ffb7 	bl	8a0d8 <__cmpdf2>
   8a16a:	2800      	cmp	r0, #0
   8a16c:	bf48      	it	mi
   8a16e:	f110 0f00 	cmnmi.w	r0, #0
   8a172:	bd01      	pop	{r0, pc}

0008a174 <__aeabi_dcmpeq>:
   8a174:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a178:	f7ff fff4 	bl	8a164 <__aeabi_cdcmpeq>
   8a17c:	bf0c      	ite	eq
   8a17e:	2001      	moveq	r0, #1
   8a180:	2000      	movne	r0, #0
   8a182:	f85d fb08 	ldr.w	pc, [sp], #8
   8a186:	bf00      	nop

0008a188 <__aeabi_dcmplt>:
   8a188:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a18c:	f7ff ffea 	bl	8a164 <__aeabi_cdcmpeq>
   8a190:	bf34      	ite	cc
   8a192:	2001      	movcc	r0, #1
   8a194:	2000      	movcs	r0, #0
   8a196:	f85d fb08 	ldr.w	pc, [sp], #8
   8a19a:	bf00      	nop

0008a19c <__aeabi_dcmple>:
   8a19c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a1a0:	f7ff ffe0 	bl	8a164 <__aeabi_cdcmpeq>
   8a1a4:	bf94      	ite	ls
   8a1a6:	2001      	movls	r0, #1
   8a1a8:	2000      	movhi	r0, #0
   8a1aa:	f85d fb08 	ldr.w	pc, [sp], #8
   8a1ae:	bf00      	nop

0008a1b0 <__aeabi_dcmpge>:
   8a1b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a1b4:	f7ff ffce 	bl	8a154 <__aeabi_cdrcmple>
   8a1b8:	bf94      	ite	ls
   8a1ba:	2001      	movls	r0, #1
   8a1bc:	2000      	movhi	r0, #0
   8a1be:	f85d fb08 	ldr.w	pc, [sp], #8
   8a1c2:	bf00      	nop

0008a1c4 <__aeabi_dcmpgt>:
   8a1c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a1c8:	f7ff ffc4 	bl	8a154 <__aeabi_cdrcmple>
   8a1cc:	bf34      	ite	cc
   8a1ce:	2001      	movcc	r0, #1
   8a1d0:	2000      	movcs	r0, #0
   8a1d2:	f85d fb08 	ldr.w	pc, [sp], #8
   8a1d6:	bf00      	nop

0008a1d8 <__aeabi_dcmpun>:
   8a1d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a1dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a1e0:	d102      	bne.n	8a1e8 <__aeabi_dcmpun+0x10>
   8a1e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a1e6:	d10a      	bne.n	8a1fe <__aeabi_dcmpun+0x26>
   8a1e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a1ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a1f0:	d102      	bne.n	8a1f8 <__aeabi_dcmpun+0x20>
   8a1f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a1f6:	d102      	bne.n	8a1fe <__aeabi_dcmpun+0x26>
   8a1f8:	f04f 0000 	mov.w	r0, #0
   8a1fc:	4770      	bx	lr
   8a1fe:	f04f 0001 	mov.w	r0, #1
   8a202:	4770      	bx	lr

0008a204 <__aeabi_d2iz>:
   8a204:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8a208:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8a20c:	d215      	bcs.n	8a23a <__aeabi_d2iz+0x36>
   8a20e:	d511      	bpl.n	8a234 <__aeabi_d2iz+0x30>
   8a210:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8a214:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8a218:	d912      	bls.n	8a240 <__aeabi_d2iz+0x3c>
   8a21a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a21e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8a222:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8a226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a22a:	fa23 f002 	lsr.w	r0, r3, r2
   8a22e:	bf18      	it	ne
   8a230:	4240      	negne	r0, r0
   8a232:	4770      	bx	lr
   8a234:	f04f 0000 	mov.w	r0, #0
   8a238:	4770      	bx	lr
   8a23a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8a23e:	d105      	bne.n	8a24c <__aeabi_d2iz+0x48>
   8a240:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8a244:	bf08      	it	eq
   8a246:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a24a:	4770      	bx	lr
   8a24c:	f04f 0000 	mov.w	r0, #0
   8a250:	4770      	bx	lr
   8a252:	bf00      	nop

0008a254 <__aeabi_uldivmod>:
   8a254:	b953      	cbnz	r3, 8a26c <__aeabi_uldivmod+0x18>
   8a256:	b94a      	cbnz	r2, 8a26c <__aeabi_uldivmod+0x18>
   8a258:	2900      	cmp	r1, #0
   8a25a:	bf08      	it	eq
   8a25c:	2800      	cmpeq	r0, #0
   8a25e:	bf1c      	itt	ne
   8a260:	f04f 31ff 	movne.w	r1, #4294967295
   8a264:	f04f 30ff 	movne.w	r0, #4294967295
   8a268:	f000 b97a 	b.w	8a560 <__aeabi_idiv0>
   8a26c:	f1ad 0c08 	sub.w	ip, sp, #8
   8a270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8a274:	f000 f806 	bl	8a284 <__udivmoddi4>
   8a278:	f8dd e004 	ldr.w	lr, [sp, #4]
   8a27c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a280:	b004      	add	sp, #16
   8a282:	4770      	bx	lr

0008a284 <__udivmoddi4>:
   8a284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a288:	468c      	mov	ip, r1
   8a28a:	460e      	mov	r6, r1
   8a28c:	4604      	mov	r4, r0
   8a28e:	9d08      	ldr	r5, [sp, #32]
   8a290:	2b00      	cmp	r3, #0
   8a292:	d150      	bne.n	8a336 <__udivmoddi4+0xb2>
   8a294:	428a      	cmp	r2, r1
   8a296:	4617      	mov	r7, r2
   8a298:	d96c      	bls.n	8a374 <__udivmoddi4+0xf0>
   8a29a:	fab2 fe82 	clz	lr, r2
   8a29e:	f1be 0f00 	cmp.w	lr, #0
   8a2a2:	d00b      	beq.n	8a2bc <__udivmoddi4+0x38>
   8a2a4:	f1ce 0c20 	rsb	ip, lr, #32
   8a2a8:	fa01 f60e 	lsl.w	r6, r1, lr
   8a2ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   8a2b0:	fa02 f70e 	lsl.w	r7, r2, lr
   8a2b4:	ea4c 0c06 	orr.w	ip, ip, r6
   8a2b8:	fa00 f40e 	lsl.w	r4, r0, lr
   8a2bc:	0c3a      	lsrs	r2, r7, #16
   8a2be:	fbbc f9f2 	udiv	r9, ip, r2
   8a2c2:	b2bb      	uxth	r3, r7
   8a2c4:	fb02 cc19 	mls	ip, r2, r9, ip
   8a2c8:	fb09 fa03 	mul.w	sl, r9, r3
   8a2cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8a2d0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8a2d4:	45b2      	cmp	sl, r6
   8a2d6:	d90a      	bls.n	8a2ee <__udivmoddi4+0x6a>
   8a2d8:	19f6      	adds	r6, r6, r7
   8a2da:	f109 31ff 	add.w	r1, r9, #4294967295
   8a2de:	f080 8125 	bcs.w	8a52c <__udivmoddi4+0x2a8>
   8a2e2:	45b2      	cmp	sl, r6
   8a2e4:	f240 8122 	bls.w	8a52c <__udivmoddi4+0x2a8>
   8a2e8:	f1a9 0902 	sub.w	r9, r9, #2
   8a2ec:	443e      	add	r6, r7
   8a2ee:	eba6 060a 	sub.w	r6, r6, sl
   8a2f2:	fbb6 f0f2 	udiv	r0, r6, r2
   8a2f6:	fb02 6610 	mls	r6, r2, r0, r6
   8a2fa:	fb00 f303 	mul.w	r3, r0, r3
   8a2fe:	b2a4      	uxth	r4, r4
   8a300:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8a304:	42a3      	cmp	r3, r4
   8a306:	d909      	bls.n	8a31c <__udivmoddi4+0x98>
   8a308:	19e4      	adds	r4, r4, r7
   8a30a:	f100 32ff 	add.w	r2, r0, #4294967295
   8a30e:	f080 810b 	bcs.w	8a528 <__udivmoddi4+0x2a4>
   8a312:	42a3      	cmp	r3, r4
   8a314:	f240 8108 	bls.w	8a528 <__udivmoddi4+0x2a4>
   8a318:	3802      	subs	r0, #2
   8a31a:	443c      	add	r4, r7
   8a31c:	2100      	movs	r1, #0
   8a31e:	1ae4      	subs	r4, r4, r3
   8a320:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8a324:	2d00      	cmp	r5, #0
   8a326:	d062      	beq.n	8a3ee <__udivmoddi4+0x16a>
   8a328:	2300      	movs	r3, #0
   8a32a:	fa24 f40e 	lsr.w	r4, r4, lr
   8a32e:	602c      	str	r4, [r5, #0]
   8a330:	606b      	str	r3, [r5, #4]
   8a332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a336:	428b      	cmp	r3, r1
   8a338:	d907      	bls.n	8a34a <__udivmoddi4+0xc6>
   8a33a:	2d00      	cmp	r5, #0
   8a33c:	d055      	beq.n	8a3ea <__udivmoddi4+0x166>
   8a33e:	2100      	movs	r1, #0
   8a340:	e885 0041 	stmia.w	r5, {r0, r6}
   8a344:	4608      	mov	r0, r1
   8a346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a34a:	fab3 f183 	clz	r1, r3
   8a34e:	2900      	cmp	r1, #0
   8a350:	f040 808f 	bne.w	8a472 <__udivmoddi4+0x1ee>
   8a354:	42b3      	cmp	r3, r6
   8a356:	d302      	bcc.n	8a35e <__udivmoddi4+0xda>
   8a358:	4282      	cmp	r2, r0
   8a35a:	f200 80fc 	bhi.w	8a556 <__udivmoddi4+0x2d2>
   8a35e:	1a84      	subs	r4, r0, r2
   8a360:	eb66 0603 	sbc.w	r6, r6, r3
   8a364:	2001      	movs	r0, #1
   8a366:	46b4      	mov	ip, r6
   8a368:	2d00      	cmp	r5, #0
   8a36a:	d040      	beq.n	8a3ee <__udivmoddi4+0x16a>
   8a36c:	e885 1010 	stmia.w	r5, {r4, ip}
   8a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a374:	b912      	cbnz	r2, 8a37c <__udivmoddi4+0xf8>
   8a376:	2701      	movs	r7, #1
   8a378:	fbb7 f7f2 	udiv	r7, r7, r2
   8a37c:	fab7 fe87 	clz	lr, r7
   8a380:	f1be 0f00 	cmp.w	lr, #0
   8a384:	d135      	bne.n	8a3f2 <__udivmoddi4+0x16e>
   8a386:	2101      	movs	r1, #1
   8a388:	1bf6      	subs	r6, r6, r7
   8a38a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8a38e:	fa1f f887 	uxth.w	r8, r7
   8a392:	fbb6 f2fc 	udiv	r2, r6, ip
   8a396:	fb0c 6612 	mls	r6, ip, r2, r6
   8a39a:	fb08 f002 	mul.w	r0, r8, r2
   8a39e:	0c23      	lsrs	r3, r4, #16
   8a3a0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8a3a4:	42b0      	cmp	r0, r6
   8a3a6:	d907      	bls.n	8a3b8 <__udivmoddi4+0x134>
   8a3a8:	19f6      	adds	r6, r6, r7
   8a3aa:	f102 33ff 	add.w	r3, r2, #4294967295
   8a3ae:	d202      	bcs.n	8a3b6 <__udivmoddi4+0x132>
   8a3b0:	42b0      	cmp	r0, r6
   8a3b2:	f200 80d2 	bhi.w	8a55a <__udivmoddi4+0x2d6>
   8a3b6:	461a      	mov	r2, r3
   8a3b8:	1a36      	subs	r6, r6, r0
   8a3ba:	fbb6 f0fc 	udiv	r0, r6, ip
   8a3be:	fb0c 6610 	mls	r6, ip, r0, r6
   8a3c2:	fb08 f800 	mul.w	r8, r8, r0
   8a3c6:	b2a3      	uxth	r3, r4
   8a3c8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   8a3cc:	45a0      	cmp	r8, r4
   8a3ce:	d907      	bls.n	8a3e0 <__udivmoddi4+0x15c>
   8a3d0:	19e4      	adds	r4, r4, r7
   8a3d2:	f100 33ff 	add.w	r3, r0, #4294967295
   8a3d6:	d202      	bcs.n	8a3de <__udivmoddi4+0x15a>
   8a3d8:	45a0      	cmp	r8, r4
   8a3da:	f200 80b9 	bhi.w	8a550 <__udivmoddi4+0x2cc>
   8a3de:	4618      	mov	r0, r3
   8a3e0:	eba4 0408 	sub.w	r4, r4, r8
   8a3e4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8a3e8:	e79c      	b.n	8a324 <__udivmoddi4+0xa0>
   8a3ea:	4629      	mov	r1, r5
   8a3ec:	4628      	mov	r0, r5
   8a3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a3f2:	fa07 f70e 	lsl.w	r7, r7, lr
   8a3f6:	f1ce 0320 	rsb	r3, lr, #32
   8a3fa:	fa26 f203 	lsr.w	r2, r6, r3
   8a3fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8a402:	fbb2 f1fc 	udiv	r1, r2, ip
   8a406:	fa1f f887 	uxth.w	r8, r7
   8a40a:	fb0c 2211 	mls	r2, ip, r1, r2
   8a40e:	fa06 f60e 	lsl.w	r6, r6, lr
   8a412:	fa20 f303 	lsr.w	r3, r0, r3
   8a416:	fb01 f908 	mul.w	r9, r1, r8
   8a41a:	4333      	orrs	r3, r6
   8a41c:	0c1e      	lsrs	r6, r3, #16
   8a41e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8a422:	45b1      	cmp	r9, r6
   8a424:	fa00 f40e 	lsl.w	r4, r0, lr
   8a428:	d909      	bls.n	8a43e <__udivmoddi4+0x1ba>
   8a42a:	19f6      	adds	r6, r6, r7
   8a42c:	f101 32ff 	add.w	r2, r1, #4294967295
   8a430:	f080 808c 	bcs.w	8a54c <__udivmoddi4+0x2c8>
   8a434:	45b1      	cmp	r9, r6
   8a436:	f240 8089 	bls.w	8a54c <__udivmoddi4+0x2c8>
   8a43a:	3902      	subs	r1, #2
   8a43c:	443e      	add	r6, r7
   8a43e:	eba6 0609 	sub.w	r6, r6, r9
   8a442:	fbb6 f0fc 	udiv	r0, r6, ip
   8a446:	fb0c 6210 	mls	r2, ip, r0, r6
   8a44a:	fb00 f908 	mul.w	r9, r0, r8
   8a44e:	b29e      	uxth	r6, r3
   8a450:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8a454:	45b1      	cmp	r9, r6
   8a456:	d907      	bls.n	8a468 <__udivmoddi4+0x1e4>
   8a458:	19f6      	adds	r6, r6, r7
   8a45a:	f100 33ff 	add.w	r3, r0, #4294967295
   8a45e:	d271      	bcs.n	8a544 <__udivmoddi4+0x2c0>
   8a460:	45b1      	cmp	r9, r6
   8a462:	d96f      	bls.n	8a544 <__udivmoddi4+0x2c0>
   8a464:	3802      	subs	r0, #2
   8a466:	443e      	add	r6, r7
   8a468:	eba6 0609 	sub.w	r6, r6, r9
   8a46c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   8a470:	e78f      	b.n	8a392 <__udivmoddi4+0x10e>
   8a472:	f1c1 0720 	rsb	r7, r1, #32
   8a476:	fa22 f807 	lsr.w	r8, r2, r7
   8a47a:	408b      	lsls	r3, r1
   8a47c:	ea48 0303 	orr.w	r3, r8, r3
   8a480:	fa26 f407 	lsr.w	r4, r6, r7
   8a484:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   8a488:	fbb4 f9fe 	udiv	r9, r4, lr
   8a48c:	fa1f fc83 	uxth.w	ip, r3
   8a490:	fb0e 4419 	mls	r4, lr, r9, r4
   8a494:	408e      	lsls	r6, r1
   8a496:	fa20 f807 	lsr.w	r8, r0, r7
   8a49a:	fb09 fa0c 	mul.w	sl, r9, ip
   8a49e:	ea48 0806 	orr.w	r8, r8, r6
   8a4a2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8a4a6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8a4aa:	45a2      	cmp	sl, r4
   8a4ac:	fa02 f201 	lsl.w	r2, r2, r1
   8a4b0:	fa00 f601 	lsl.w	r6, r0, r1
   8a4b4:	d908      	bls.n	8a4c8 <__udivmoddi4+0x244>
   8a4b6:	18e4      	adds	r4, r4, r3
   8a4b8:	f109 30ff 	add.w	r0, r9, #4294967295
   8a4bc:	d244      	bcs.n	8a548 <__udivmoddi4+0x2c4>
   8a4be:	45a2      	cmp	sl, r4
   8a4c0:	d942      	bls.n	8a548 <__udivmoddi4+0x2c4>
   8a4c2:	f1a9 0902 	sub.w	r9, r9, #2
   8a4c6:	441c      	add	r4, r3
   8a4c8:	eba4 040a 	sub.w	r4, r4, sl
   8a4cc:	fbb4 f0fe 	udiv	r0, r4, lr
   8a4d0:	fb0e 4410 	mls	r4, lr, r0, r4
   8a4d4:	fb00 fc0c 	mul.w	ip, r0, ip
   8a4d8:	fa1f f888 	uxth.w	r8, r8
   8a4dc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   8a4e0:	45a4      	cmp	ip, r4
   8a4e2:	d907      	bls.n	8a4f4 <__udivmoddi4+0x270>
   8a4e4:	18e4      	adds	r4, r4, r3
   8a4e6:	f100 3eff 	add.w	lr, r0, #4294967295
   8a4ea:	d229      	bcs.n	8a540 <__udivmoddi4+0x2bc>
   8a4ec:	45a4      	cmp	ip, r4
   8a4ee:	d927      	bls.n	8a540 <__udivmoddi4+0x2bc>
   8a4f0:	3802      	subs	r0, #2
   8a4f2:	441c      	add	r4, r3
   8a4f4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8a4f8:	fba0 8902 	umull	r8, r9, r0, r2
   8a4fc:	eba4 0c0c 	sub.w	ip, r4, ip
   8a500:	45cc      	cmp	ip, r9
   8a502:	46c2      	mov	sl, r8
   8a504:	46ce      	mov	lr, r9
   8a506:	d315      	bcc.n	8a534 <__udivmoddi4+0x2b0>
   8a508:	d012      	beq.n	8a530 <__udivmoddi4+0x2ac>
   8a50a:	b155      	cbz	r5, 8a522 <__udivmoddi4+0x29e>
   8a50c:	ebb6 030a 	subs.w	r3, r6, sl
   8a510:	eb6c 060e 	sbc.w	r6, ip, lr
   8a514:	fa06 f707 	lsl.w	r7, r6, r7
   8a518:	40cb      	lsrs	r3, r1
   8a51a:	431f      	orrs	r7, r3
   8a51c:	40ce      	lsrs	r6, r1
   8a51e:	602f      	str	r7, [r5, #0]
   8a520:	606e      	str	r6, [r5, #4]
   8a522:	2100      	movs	r1, #0
   8a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a528:	4610      	mov	r0, r2
   8a52a:	e6f7      	b.n	8a31c <__udivmoddi4+0x98>
   8a52c:	4689      	mov	r9, r1
   8a52e:	e6de      	b.n	8a2ee <__udivmoddi4+0x6a>
   8a530:	4546      	cmp	r6, r8
   8a532:	d2ea      	bcs.n	8a50a <__udivmoddi4+0x286>
   8a534:	ebb8 0a02 	subs.w	sl, r8, r2
   8a538:	eb69 0e03 	sbc.w	lr, r9, r3
   8a53c:	3801      	subs	r0, #1
   8a53e:	e7e4      	b.n	8a50a <__udivmoddi4+0x286>
   8a540:	4670      	mov	r0, lr
   8a542:	e7d7      	b.n	8a4f4 <__udivmoddi4+0x270>
   8a544:	4618      	mov	r0, r3
   8a546:	e78f      	b.n	8a468 <__udivmoddi4+0x1e4>
   8a548:	4681      	mov	r9, r0
   8a54a:	e7bd      	b.n	8a4c8 <__udivmoddi4+0x244>
   8a54c:	4611      	mov	r1, r2
   8a54e:	e776      	b.n	8a43e <__udivmoddi4+0x1ba>
   8a550:	3802      	subs	r0, #2
   8a552:	443c      	add	r4, r7
   8a554:	e744      	b.n	8a3e0 <__udivmoddi4+0x15c>
   8a556:	4608      	mov	r0, r1
   8a558:	e706      	b.n	8a368 <__udivmoddi4+0xe4>
   8a55a:	3a02      	subs	r2, #2
   8a55c:	443e      	add	r6, r7
   8a55e:	e72b      	b.n	8a3b8 <__udivmoddi4+0x134>

0008a560 <__aeabi_idiv0>:
   8a560:	4770      	bx	lr
   8a562:	bf00      	nop
   8a564:	732f2e2e 	.word	0x732f2e2e
   8a568:	412f6372 	.word	0x412f6372
   8a56c:	632f4653 	.word	0x632f4653
   8a570:	6f6d6d6f 	.word	0x6f6d6d6f
   8a574:	65732f6e 	.word	0x65732f6e
   8a578:	63697672 	.word	0x63697672
   8a57c:	662f7365 	.word	0x662f7365
   8a580:	72656572 	.word	0x72656572
   8a584:	2f736f74 	.word	0x2f736f74
   8a588:	2f6d6173 	.word	0x2f6d6173
   8a58c:	65657266 	.word	0x65657266
   8a590:	736f7472 	.word	0x736f7472
   8a594:	7265705f 	.word	0x7265705f
   8a598:	65687069 	.word	0x65687069
   8a59c:	5f6c6172 	.word	0x5f6c6172
   8a5a0:	746e6f63 	.word	0x746e6f63
   8a5a4:	2e6c6f72 	.word	0x2e6c6f72
   8a5a8:	00000063 	.word	0x00000063

0008a5ac <all_twi_definitions>:
   8a5ac:	4008c000 4008c100 00000016 00000016     ...@...@........
   8a5bc:	40090000 40090100 00000017 00000017     ...@...@........

0008a5cc <all_uart_definitions>:
   8a5cc:	400e0800 400e0900 00000008 00000008     ...@...@........
   8a5dc:	732f2e2e 412f6372 632f4653 6f6d6d6f     ../src/ASF/commo
   8a5ec:	65732f6e 63697672 662f7365 72656572     n/services/freer
   8a5fc:	2f736f74 2f6d6173 65657266 736f7472     tos/sam/freertos
   8a60c:	7261755f 65735f74 6c616972 0000632e     _uart_serial.c..

0008a61c <all_usart_definitions>:
   8a61c:	40098000 40098100 00000011 00000011     ...@...@........
   8a62c:	4009c000 4009c100 00000012 00000012     ...@...@........
   8a63c:	400a0000 400a0100 00000013 00000013     ...@...@........
   8a64c:	400a4000 400a4100 00000014 00000014     .@.@.A.@........
   8a65c:	732f2e2e 412f6372 632f4653 6f6d6d6f     ../src/ASF/commo
   8a66c:	65732f6e 63697672 662f7365 72656572     n/services/freer
   8a67c:	2f736f74 2f6d6173 65657266 736f7472     tos/sam/freertos
   8a68c:	6173755f 735f7472 61697265 00632e6c     _usart_serial.c.
	...
   8a6a4:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8a6b4:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8a6c4:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8a6d4:	200716cc 0000004f 0000000a 00000300     ... O...........
   8a6e4:	00002580 000000c0 00000800 00000000     .%..............
	...
   8a6fc:	00007854 00007852 3b756c25 00000000     Tx..Rx..%lu;....
   8a70c:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   8a71c:	74726170 72662f79 74726565 642f736f     party/freertos/d
   8a72c:	2f6f6d65 69726570 72656870 635f6c61     emo/peripheral_c
   8a73c:	72746e6f 642f6c6f 2d6f6d65 6b736174     ontrol/demo-task
   8a74c:	53552f73 2d545241 6f686365 7361742d     s/USART-echo-tas
   8a75c:	632e736b 00000000 30303030 00000000     ks.c....0000....
   8a76c:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   8a77c:	74726170 72662f79 74726565 642f736f     party/freertos/d
   8a78c:	2f6f6d65 69726570 72656870 635f6c61     emo/peripheral_c
   8a79c:	72746e6f 642f6c6f 2d6f6d65 6b736174     ontrol/demo-task
   8a7ac:	53552f73 44432d42 4c432d43 61742d49     s/USB-CDC-CLI-ta
   8a7bc:	632e6b73 00000000 5f434443 00494c43     sk.c....CDC_CLI.
   8a7cc:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   8a7dc:	74726170 72662f79 74726565 662f736f     party/freertos/f
   8a7ec:	72656572 2d736f74 302e3031 532f302e     reertos-10.0.0/S
   8a7fc:	6372756f 6f702f65 62617472 472f656c     ource/portable/G
   8a80c:	412f4343 435f4d52 702f334d 2e74726f     CC/ARM_CM3/port.
   8a81c:	00000063 732f2e2e 412f6372 742f4653     c...../src/ASF/t
   8a82c:	64726968 74726170 72662f79 74726565     hirdparty/freert
   8a83c:	662f736f 72656572 2d736f74 302e3031     os/freertos-10.0
   8a84c:	532f302e 6372756f 6f702f65 62617472     .0/Source/portab
   8a85c:	4d2f656c 614d6d65 682f676e 5f706165     le/MemMang/heap_
   8a86c:	00632e31 732f2e2e 412f6372 742f4653     1.c.../src/ASF/t
   8a87c:	64726968 74726170 72662f79 74726565     hirdparty/freert
   8a88c:	662f736f 72656572 2d736f74 302e3031     os/freertos-10.0
   8a89c:	532f302e 6372756f 75712f65 2e657565     .0/Source/queue.
   8a8ac:	00000063 732f2e2e 412f6372 742f4653     c...../src/ASF/t
   8a8bc:	64726968 74726170 72662f79 74726565     hirdparty/freert
   8a8cc:	662f736f 72656572 2d736f74 302e3031     os/freertos-10.0
   8a8dc:	532f302e 6372756f 61742f65 2e736b73     .0/Source/tasks.
   8a8ec:	00000063 454c4449 00000000 51726d54     c...IDLE....TmrQ
   8a8fc:	00000000 20726d54 00637653 732f2e2e     ....Tmr Svc.../s
   8a90c:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   8a91c:	72662f79 74726565 662f736f 72656572     y/freertos/freer
   8a92c:	2d736f74 302e3031 532f302e 6372756f     tos-10.0.0/Sourc
   8a93c:	69742f65 7372656d 0000632e 6b637566     e/timers.c..fuck
   8a94c:	00000000                                ....

0008a950 <ulLED>:
   8a950:	0000003b 00000055 00000056              ;...U...V...

0008a95c <xActiveStates>:
	...

0008a968 <_global_impure_ptr>:
   8a968:	200702b0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8a978:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8a988:	46454443 00000000 33323130 37363534     CDEF....01234567
   8a998:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8a9a8:	0000296c 00000030                       l)..0...

0008a9b0 <blanks.7223>:
   8a9b0:	20202020 20202020 20202020 20202020                     

0008a9c0 <zeroes.7224>:
   8a9c0:	30303030 30303030 30303030 30303030     0000000000000000
   8a9d0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   8a9e0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008a9f0 <__mprec_bigtens>:
   8a9f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8aa00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8aa10:	7f73bf3c 75154fdd                       <.s..O.u

0008aa18 <__mprec_tens>:
   8aa18:	00000000 3ff00000 00000000 40240000     .......?......$@
   8aa28:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8aa38:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8aa48:	00000000 412e8480 00000000 416312d0     .......A......cA
   8aa58:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8aa68:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8aa78:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8aa88:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8aa98:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8aaa8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8aab8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8aac8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8aad8:	79d99db4 44ea7843                       ...yCx.D

0008aae0 <p05.6055>:
   8aae0:	00000005 00000019 0000007d              ........}...

0008aaec <_ctype_>:
   8aaec:	20202000 20202020 28282020 20282828     .         ((((( 
   8aafc:	20202020 20202020 20202020 20202020                     
   8ab0c:	10108820 10101010 10101010 10101010      ...............
   8ab1c:	04040410 04040404 10040404 10101010     ................
   8ab2c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8ab3c:	01010101 01010101 01010101 10101010     ................
   8ab4c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8ab5c:	02020202 02020202 02020202 10101010     ................
   8ab6c:	00000020 00000000 00000000 00000000      ...............
	...

0008abf0 <_init>:
   8abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8abf2:	bf00      	nop
   8abf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8abf6:	bc08      	pop	{r3}
   8abf8:	469e      	mov	lr, r3
   8abfa:	4770      	bx	lr

0008abfc <__init_array_start>:
   8abfc:	00087449 	.word	0x00087449

0008ac00 <__frame_dummy_init_array_entry>:
   8ac00:	00080119                                ....

0008ac04 <_fini>:
   8ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ac06:	bf00      	nop
   8ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ac0a:	bc08      	pop	{r3}
   8ac0c:	469e      	mov	lr, r3
   8ac0e:	4770      	bx	lr

0008ac10 <__fini_array_start>:
   8ac10:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070270 	.word	0x20070270

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <udi_api_cdc_comm>:
2007012c:	0008103d 00080f9d 00080fb5 00080fb1     =...............
2007013c:	00000000                                ....

20070140 <udi_api_cdc_data>:
20070140:	00081381 00081229 00080fad 00080fb1     ....)...........
20070150:	00081219                                ....

20070154 <udc_config>:
20070154:	20070204 2007016c 20070204 20070218     ... l.. ... ... 
20070164:	20070174 00000000                       t.. ....

2007016c <udc_config_fs>:
2007016c:	2007017c 20070224                       |.. $.. 

20070174 <udc_config_hs>:
20070174:	200701c0 20070224                       ... $.. 

2007017c <udc_desc_fs>:
2007017c:	00430209 c0000102 00040932 02020100     ..C.....2.......
2007018c:	24050001 04011000 05020224 01000624     ...$....$...$...
2007019c:	03012405 83050701 10004003 00010409     .$.......@......
200701ac:	00000a02 81050700 00004002 02020507     .........@......
200701bc:	00000040                                @...

200701c0 <udc_desc_hs>:
200701c0:	00430209 c0000102 00040932 02020100     ..C.....2.......
200701d0:	24050001 04011000 05020224 01000624     ...$....$...$...
200701e0:	03012405 83050701 10004003 00010409     .$.......@......
200701f0:	00000a02 81050700 00020002 02020507     ................
20070200:	00000200                                ....

20070204 <udc_device_desc>:
20070204:	02000112 40000002 240403eb 02010100     .......@...$....
20070214:	00000100                                ....

20070218 <udc_device_qual>:
20070218:	0200060a 40000002 00000001              .......@....

20070224 <udi_apis>:
20070224:	2007012c 20070140                       ,.. @.. 

2007022c <udc_string_desc>:
2007022c:	00000300 00000000 00000000 00000000     ................
	...

20070250 <udc_string_desc_languageid>:
20070250:	04090304                                ....

20070254 <udc_string_manufacturer_name>:
20070254:	656d7441 0000006c                       Atmel...

2007025c <udc_string_product_name>:
2007025c:	6c6c6942 6f422079 75422062 6e6f7474     Billy Bob Button
2007026c:	00010073                                         s.

2007026e <g_interrupt_enabled>:
2007026e:	09000001                                         ..

20070270 <SystemCoreClock>:
20070270:	003d0900                                ..=.

20070274 <uxCriticalNesting>:
20070274:	aaaaaaaa                                ....

20070278 <StateMachine>:
20070278:	00000000 000857b1 00000001 00085819     .....W.......X..
20070288:	00000002 00085855 00000003 000857ed     ....UX.......W..
20070298:	00000004 000857c1 00000005 00085829     .....W......)X..

200702a8 <_impure_ptr>:
200702a8:	200702b0 00000000                       ... ....

200702b0 <impure_data>:
200702b0:	00000000 2007059c 20070604 2007066c     ....... ... l.. 
	...
20070358:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070368:	0005deec 0000000b 00000000 00000000     ................
	...

200706d8 <__atexit_recursive_mutex>:
200706d8:	20075964                                dY. 

200706dc <__global_locale>:
200706dc:	00000043 00000000 00000000 00000000     C...............
	...
200706fc:	00000043 00000000 00000000 00000000     C...............
	...
2007071c:	00000043 00000000 00000000 00000000     C...............
	...
2007073c:	00000043 00000000 00000000 00000000     C...............
	...
2007075c:	00000043 00000000 00000000 00000000     C...............
	...
2007077c:	00000043 00000000 00000000 00000000     C...............
	...
2007079c:	00000043 00000000 00000000 00000000     C...............
	...
200707bc:	000897f9 00088bdd 00000000 0008aaec     ................
200707cc:	0008a9ec 0008a768 0008a768 0008a768     ....h...h...h...
200707dc:	0008a768 0008a768 0008a768 0008a768     h...h...h...h...
200707ec:	0008a768 0008a768 ffffffff ffffffff     h...h...........
200707fc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070824:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070848 <__malloc_av_>:
	...
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 
20070af0:	20070ae8 20070ae8 20070af0 20070af0     ... ... ... ... 
20070b00:	20070af8 20070af8 20070b00 20070b00     ... ... ... ... 
20070b10:	20070b08 20070b08 20070b10 20070b10     ... ... ... ... 
20070b20:	20070b18 20070b18 20070b20 20070b20     ... ...  ..  .. 
20070b30:	20070b28 20070b28 20070b30 20070b30     (.. (.. 0.. 0.. 
20070b40:	20070b38 20070b38 20070b40 20070b40     8.. 8.. @.. @.. 
20070b50:	20070b48 20070b48 20070b50 20070b50     H.. H.. P.. P.. 
20070b60:	20070b58 20070b58 20070b60 20070b60     X.. X.. `.. `.. 
20070b70:	20070b68 20070b68 20070b70 20070b70     h.. h.. p.. p.. 
20070b80:	20070b78 20070b78 20070b80 20070b80     x.. x.. ... ... 
20070b90:	20070b88 20070b88 20070b90 20070b90     ... ... ... ... 
20070ba0:	20070b98 20070b98 20070ba0 20070ba0     ... ... ... ... 
20070bb0:	20070ba8 20070ba8 20070bb0 20070bb0     ... ... ... ... 
20070bc0:	20070bb8 20070bb8 20070bc0 20070bc0     ... ... ... ... 
20070bd0:	20070bc8 20070bc8 20070bd0 20070bd0     ... ... ... ... 
20070be0:	20070bd8 20070bd8 20070be0 20070be0     ... ... ... ... 
20070bf0:	20070be8 20070be8 20070bf0 20070bf0     ... ... ... ... 
20070c00:	20070bf8 20070bf8 20070c00 20070c00     ... ... ... ... 
20070c10:	20070c08 20070c08 20070c10 20070c10     ... ... ... ... 
20070c20:	20070c18 20070c18 20070c20 20070c20     ... ...  ..  .. 
20070c30:	20070c28 20070c28 20070c30 20070c30     (.. (.. 0.. 0.. 
20070c40:	20070c38 20070c38 20070c40 20070c40     8.. 8.. @.. @.. 

20070c50 <__malloc_sbrk_base>:
20070c50:	ffffffff                                ....

20070c54 <__malloc_trim_threshold>:
20070c54:	00020000                                ....
